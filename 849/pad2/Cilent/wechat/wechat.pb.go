// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.10.0
// source: wechat.proto

package wechat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKey    []byte  `protobuf:"bytes,1,opt,name=sessionKey" json:"sessionKey,omitempty"`
	Uin           *uint32 `protobuf:"varint,2,opt,name=uin" json:"uin,omitempty"`
	DeviceId      []byte  `protobuf:"bytes,3,opt,name=deviceId" json:"deviceId,omitempty"`
	ClientVersion *int32  `protobuf:"varint,4,opt,name=clientVersion" json:"clientVersion,omitempty"`
	DeviceType    []byte  `protobuf:"bytes,5,opt,name=deviceType" json:"deviceType,omitempty"`
	Scene         *uint32 `protobuf:"varint,6,opt,name=scene" json:"scene,omitempty"`
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{0}
}

func (x *BaseRequest) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *BaseRequest) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *BaseRequest) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *BaseRequest) GetClientVersion() int32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *BaseRequest) GetDeviceType() []byte {
	if x != nil {
		return x.DeviceType
	}
	return nil
}

func (x *BaseRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type BaseRequestPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 会话key base64字符串
	SessionKey    []byte  `protobuf:"bytes,1,opt,name=session_key,json=sessionKey" json:"session_key,omitempty"`
	Uin           *uint32 `protobuf:"varint,2,opt,name=uin" json:"uin,omitempty"`
	DeviceId      []byte  `protobuf:"bytes,3,opt,name=deviceId" json:"deviceId,omitempty"`
	ClientVersion *int32  `protobuf:"varint,4,opt,name=clientVersion" json:"clientVersion,omitempty"`
	OsType        *string `protobuf:"bytes,5,opt,name=osType" json:"osType,omitempty"`
	Scene         *uint32 `protobuf:"varint,6,opt,name=scene" json:"scene,omitempty"`
}

func (x *BaseRequestPlus) Reset() {
	*x = BaseRequestPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRequestPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequestPlus) ProtoMessage() {}

func (x *BaseRequestPlus) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequestPlus.ProtoReflect.Descriptor instead.
func (*BaseRequestPlus) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{1}
}

func (x *BaseRequestPlus) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *BaseRequestPlus) GetUin() uint32 {
	if x != nil && x.Uin != nil {
		return *x.Uin
	}
	return 0
}

func (x *BaseRequestPlus) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *BaseRequestPlus) GetClientVersion() int32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *BaseRequestPlus) GetOsType() string {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return ""
}

func (x *BaseRequestPlus) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

type SKBuiltinStringT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *string `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
}

func (x *SKBuiltinStringT) Reset() {
	*x = SKBuiltinStringT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinStringT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinStringT) ProtoMessage() {}

func (x *SKBuiltinStringT) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinStringT.ProtoReflect.Descriptor instead.
func (*SKBuiltinStringT) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{2}
}

func (x *SKBuiltinStringT) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret    *int32            `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
	ErrMsg *SKBuiltinStringT `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{3}
}

func (x *BaseResponse) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *BaseResponse) GetErrMsg() *SKBuiltinStringT {
	if x != nil {
		return x.ErrMsg
	}
	return nil
}

type MMBizJsApiGetUserOpenIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,req,name=BaseRequest" json:"BaseRequest,omitempty"`
	AppId       *string      `protobuf:"bytes,2,opt,name=AppId" json:"AppId,omitempty"`
	BusiId      *string      `protobuf:"bytes,3,opt,name=BusiId" json:"BusiId,omitempty"`
	UserName    *string      `protobuf:"bytes,4,opt,name=UserName" json:"UserName,omitempty"`
}

func (x *MMBizJsApiGetUserOpenIdRequest) Reset() {
	*x = MMBizJsApiGetUserOpenIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MMBizJsApiGetUserOpenIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MMBizJsApiGetUserOpenIdRequest) ProtoMessage() {}

func (x *MMBizJsApiGetUserOpenIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MMBizJsApiGetUserOpenIdRequest.ProtoReflect.Descriptor instead.
func (*MMBizJsApiGetUserOpenIdRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{4}
}

func (x *MMBizJsApiGetUserOpenIdRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *MMBizJsApiGetUserOpenIdRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdRequest) GetBusiId() string {
	if x != nil && x.BusiId != nil {
		return *x.BusiId
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

type MMBizJsApiGetUserOpenIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse         *BaseResponse `protobuf:"bytes,1,req,name=BaseResponse" json:"BaseResponse,omitempty"`
	Openid               *string       `protobuf:"bytes,2,opt,name=Openid" json:"Openid,omitempty"`
	NickName             *string       `protobuf:"bytes,3,opt,name=NickName" json:"NickName,omitempty"`
	HeadImgUrl           *string       `protobuf:"bytes,4,opt,name=HeadImgUrl" json:"HeadImgUrl,omitempty"`
	Sign                 *string       `protobuf:"bytes,5,opt,name=Sign" json:"Sign,omitempty"`
	FriendRelation       *uint32       `protobuf:"varint,6,opt,name=FriendRelation" json:"FriendRelation,omitempty"`
	XXX_NoUnkeyedLiteral *string       `protobuf:"bytes,7,opt,name=XXX_NoUnkeyedLiteral,json=XXXNoUnkeyedLiteral" json:"XXX_NoUnkeyedLiteral,omitempty"`
	XXXUnrecognized      *string       `protobuf:"bytes,8,opt,name=XXX_unrecognized,json=XXXUnrecognized" json:"XXX_unrecognized,omitempty"`
	XXXSizecache         *string       `protobuf:"bytes,9,opt,name=XXX_sizecache,json=XXXSizecache" json:"XXX_sizecache,omitempty"`
}

func (x *MMBizJsApiGetUserOpenIdResponse) Reset() {
	*x = MMBizJsApiGetUserOpenIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MMBizJsApiGetUserOpenIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MMBizJsApiGetUserOpenIdResponse) ProtoMessage() {}

func (x *MMBizJsApiGetUserOpenIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MMBizJsApiGetUserOpenIdResponse.ProtoReflect.Descriptor instead.
func (*MMBizJsApiGetUserOpenIdResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{5}
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetOpenid() string {
	if x != nil && x.Openid != nil {
		return *x.Openid
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetFriendRelation() uint32 {
	if x != nil && x.FriendRelation != nil {
		return *x.FriendRelation
	}
	return 0
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetXXX_NoUnkeyedLiteral() string {
	if x != nil && x.XXX_NoUnkeyedLiteral != nil {
		return *x.XXX_NoUnkeyedLiteral
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetXXXUnrecognized() string {
	if x != nil && x.XXXUnrecognized != nil {
		return *x.XXXUnrecognized
	}
	return ""
}

func (x *MMBizJsApiGetUserOpenIdResponse) GetXXXSizecache() string {
	if x != nil && x.XXXSizecache != nil {
		return *x.XXXSizecache
	}
	return ""
}

type BufferT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ILen   *uint32 `protobuf:"varint,1,req,name=iLen" json:"iLen,omitempty"`
	Buffer []byte  `protobuf:"bytes,2,opt,name=Buffer" json:"Buffer,omitempty"`
}

func (x *BufferT) Reset() {
	*x = BufferT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferT) ProtoMessage() {}

func (x *BufferT) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferT.ProtoReflect.Descriptor instead.
func (*BufferT) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{6}
}

func (x *BufferT) GetILen() uint32 {
	if x != nil && x.ILen != nil {
		return *x.ILen
	}
	return 0
}

func (x *BufferT) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type EcdhPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *uint32  `protobuf:"varint,1,req,name=Type" json:"Type,omitempty"`                //固定为1
	Key          *BufferT `protobuf:"bytes,2,req,name=Key" json:"Key,omitempty"`                   //第5步生成的publickey
	Token        []byte   `protobuf:"bytes,3,req,name=Token" json:"Token,omitempty"`               //第8步结果
	Url          *string  `protobuf:"bytes,4,opt,name=Url" json:"Url,omitempty"`                   //空串
	ProtobufData []byte   `protobuf:"bytes,5,opt,name=ProtobufData" json:"ProtobufData,omitempty"` //第10步结果
}

func (x *EcdhPacket) Reset() {
	*x = EcdhPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EcdhPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EcdhPacket) ProtoMessage() {}

func (x *EcdhPacket) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EcdhPacket.ProtoReflect.Descriptor instead.
func (*EcdhPacket) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{7}
}

func (x *EcdhPacket) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *EcdhPacket) GetKey() *BufferT {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EcdhPacket) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EcdhPacket) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *EcdhPacket) GetProtobufData() []byte {
	if x != nil {
		return x.ProtobufData
	}
	return nil
}

type HybridDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          *BufferT `protobuf:"bytes,1,req,name=Key" json:"Key,omitempty"` //第5步生成的publickey
	Type         *uint32  `protobuf:"varint,2,req,name=Type" json:"Type,omitempty"`
	ProtobufData []byte   `protobuf:"bytes,3,req,name=ProtobufData" json:"ProtobufData,omitempty"` //第8步结果
	Token        []byte   `protobuf:"bytes,4,opt,name=token" json:"token,omitempty"`               //空串
}

func (x *HybridDecryptResponse) Reset() {
	*x = HybridDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridDecryptResponse) ProtoMessage() {}

func (x *HybridDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridDecryptResponse.ProtoReflect.Descriptor instead.
func (*HybridDecryptResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{8}
}

func (x *HybridDecryptResponse) GetKey() *BufferT {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *HybridDecryptResponse) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *HybridDecryptResponse) GetProtobufData() []byte {
	if x != nil {
		return x.ProtobufData
	}
	return nil
}

func (x *HybridDecryptResponse) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type HybridEcdhRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *int32   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	SecECDHKey          *BufferT `protobuf:"bytes,2,opt,name=SecECDHKey" json:"SecECDHKey,omitempty"`
	Randomkeydata       []byte   `protobuf:"bytes,3,opt,name=randomkeydata" json:"randomkeydata,omitempty"`
	Randomkeyextenddata []byte   `protobuf:"bytes,4,opt,name=randomkeyextenddata" json:"randomkeyextenddata,omitempty"`
	Encyptdata          []byte   `protobuf:"bytes,5,opt,name=encyptdata" json:"encyptdata,omitempty"`
}

func (x *HybridEcdhRequest) Reset() {
	*x = HybridEcdhRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEcdhRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEcdhRequest) ProtoMessage() {}

func (x *HybridEcdhRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEcdhRequest.ProtoReflect.Descriptor instead.
func (*HybridEcdhRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{9}
}

func (x *HybridEcdhRequest) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *HybridEcdhRequest) GetSecECDHKey() *BufferT {
	if x != nil {
		return x.SecECDHKey
	}
	return nil
}

func (x *HybridEcdhRequest) GetRandomkeydata() []byte {
	if x != nil {
		return x.Randomkeydata
	}
	return nil
}

func (x *HybridEcdhRequest) GetRandomkeyextenddata() []byte {
	if x != nil {
		return x.Randomkeyextenddata
	}
	return nil
}

func (x *HybridEcdhRequest) GetEncyptdata() []byte {
	if x != nil {
		return x.Encyptdata
	}
	return nil
}

type HybridEcdhResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecECDHKey          *BufferT `protobuf:"bytes,1,opt,name=SecECDHKey" json:"SecECDHKey,omitempty"`
	Type                *int32   `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Decryptdata         []byte   `protobuf:"bytes,3,opt,name=decryptdata" json:"decryptdata,omitempty"`
	Randomkeyextenddata []byte   `protobuf:"bytes,4,opt,name=randomkeyextenddata" json:"randomkeyextenddata,omitempty"`
}

func (x *HybridEcdhResponse) Reset() {
	*x = HybridEcdhResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEcdhResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEcdhResponse) ProtoMessage() {}

func (x *HybridEcdhResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEcdhResponse.ProtoReflect.Descriptor instead.
func (*HybridEcdhResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{10}
}

func (x *HybridEcdhResponse) GetSecECDHKey() *BufferT {
	if x != nil {
		return x.SecECDHKey
	}
	return nil
}

func (x *HybridEcdhResponse) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *HybridEcdhResponse) GetDecryptdata() []byte {
	if x != nil {
		return x.Decryptdata
	}
	return nil
}

func (x *HybridEcdhResponse) GetRandomkeyextenddata() []byte {
	if x != nil {
		return x.Randomkeyextenddata
	}
	return nil
}

type ECDHKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid *uint32           `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Key *SKBuiltinString_ `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *ECDHKey) Reset() {
	*x = ECDHKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECDHKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECDHKey) ProtoMessage() {}

func (x *ECDHKey) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECDHKey.ProtoReflect.Descriptor instead.
func (*ECDHKey) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{11}
}

func (x *ECDHKey) GetNid() uint32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *ECDHKey) GetKey() *SKBuiltinString_ {
	if x != nil {
		return x.Key
	}
	return nil
}

type SKBuiltinString_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len *uint32 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
	// base64字符串
	Buffer []byte `protobuf:"bytes,2,opt,name=buffer" json:"buffer,omitempty"`
}

func (x *SKBuiltinString_) Reset() {
	*x = SKBuiltinString_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinString_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinString_) ProtoMessage() {}

func (x *SKBuiltinString_) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinString_.ProtoReflect.Descriptor instead.
func (*SKBuiltinString_) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{12}
}

func (x *SKBuiltinString_) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *SKBuiltinString_) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type ManualAuthRsaReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandomEncryKey *SKBuiltinString_ `protobuf:"bytes,1,opt,name=randomEncryKey" json:"randomEncryKey,omitempty"`
	CliPubEcdhkey  *ECDHKey          `protobuf:"bytes,2,opt,name=cliPubEcdhkey" json:"cliPubEcdhkey,omitempty"`
	UserName       *string           `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`
	Pwd            *string           `protobuf:"bytes,4,opt,name=pwd" json:"pwd,omitempty"`
	Pwd2           *string           `protobuf:"bytes,5,opt,name=pwd2" json:"pwd2,omitempty"`
}

func (x *ManualAuthRsaReqData) Reset() {
	*x = ManualAuthRsaReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualAuthRsaReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualAuthRsaReqData) ProtoMessage() {}

func (x *ManualAuthRsaReqData) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualAuthRsaReqData.ProtoReflect.Descriptor instead.
func (*ManualAuthRsaReqData) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{13}
}

func (x *ManualAuthRsaReqData) GetRandomEncryKey() *SKBuiltinString_ {
	if x != nil {
		return x.RandomEncryKey
	}
	return nil
}

func (x *ManualAuthRsaReqData) GetCliPubEcdhkey() *ECDHKey {
	if x != nil {
		return x.CliPubEcdhkey
	}
	return nil
}

func (x *ManualAuthRsaReqData) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ManualAuthRsaReqData) GetPwd() string {
	if x != nil && x.Pwd != nil {
		return *x.Pwd
	}
	return ""
}

func (x *ManualAuthRsaReqData) GetPwd2() string {
	if x != nil && x.Pwd2 != nil {
		return *x.Pwd2
	}
	return ""
}

type WTLoginImgReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgSid        *string           `protobuf:"bytes,1,opt,name=img_sid,json=imgSid" json:"img_sid,omitempty"`
	ImgCode       *string           `protobuf:"bytes,2,opt,name=img_code,json=imgCode" json:"img_code,omitempty"`
	ImgEncryptKey *string           `protobuf:"bytes,3,opt,name=img_encrypt_key,json=imgEncryptKey" json:"img_encrypt_key,omitempty"`
	Ksid          *SKBuiltinString_ `protobuf:"bytes,4,opt,name=ksid" json:"ksid,omitempty"`
}

func (x *WTLoginImgReqInfo) Reset() {
	*x = WTLoginImgReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WTLoginImgReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WTLoginImgReqInfo) ProtoMessage() {}

func (x *WTLoginImgReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WTLoginImgReqInfo.ProtoReflect.Descriptor instead.
func (*WTLoginImgReqInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{14}
}

func (x *WTLoginImgReqInfo) GetImgSid() string {
	if x != nil && x.ImgSid != nil {
		return *x.ImgSid
	}
	return ""
}

func (x *WTLoginImgReqInfo) GetImgCode() string {
	if x != nil && x.ImgCode != nil {
		return *x.ImgCode
	}
	return ""
}

func (x *WTLoginImgReqInfo) GetImgEncryptKey() string {
	if x != nil && x.ImgEncryptKey != nil {
		return *x.ImgEncryptKey
	}
	return ""
}

func (x *WTLoginImgReqInfo) GetKsid() *SKBuiltinString_ {
	if x != nil {
		return x.Ksid
	}
	return nil
}

type WxVerifyCodeReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifySignature *string `protobuf:"bytes,1,opt,name=verify_signature,json=verifySignature" json:"verify_signature,omitempty"`
	VerifyContent   *string `protobuf:"bytes,2,opt,name=verify_content,json=verifyContent" json:"verify_content,omitempty"`
}

func (x *WxVerifyCodeReqInfo) Reset() {
	*x = WxVerifyCodeReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WxVerifyCodeReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxVerifyCodeReqInfo) ProtoMessage() {}

func (x *WxVerifyCodeReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxVerifyCodeReqInfo.ProtoReflect.Descriptor instead.
func (*WxVerifyCodeReqInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{15}
}

func (x *WxVerifyCodeReqInfo) GetVerifySignature() string {
	if x != nil && x.VerifySignature != nil {
		return *x.VerifySignature
	}
	return ""
}

func (x *WxVerifyCodeReqInfo) GetVerifyContent() string {
	if x != nil && x.VerifyContent != nil {
		return *x.VerifyContent
	}
	return ""
}

type BaseAuthReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WtLoginReqBuff      *SKBuiltinString_    `protobuf:"bytes,1,opt,name=wt_login_req_buff,json=wtLoginReqBuff" json:"wt_login_req_buff,omitempty"`
	WtLoginImgReqInfo   *WTLoginImgReqInfo   `protobuf:"bytes,2,opt,name=wt_login_img_req_info,json=wtLoginImgReqInfo" json:"wt_login_img_req_info,omitempty"`
	WxVerifyCodeReqInfo *WxVerifyCodeReqInfo `protobuf:"bytes,3,opt,name=wx_verify_code_req_info,json=wxVerifyCodeReqInfo" json:"wx_verify_code_req_info,omitempty"`
	ClidbEncryptKey     *SKBuiltinString_    `protobuf:"bytes,4,opt,name=clidb_encrypt_key,json=clidbEncryptKey" json:"clidb_encrypt_key,omitempty"`
	ClidbEncryptInfo    *SKBuiltinString_    `protobuf:"bytes,5,opt,name=clidb_encrypt_info,json=clidbEncryptInfo" json:"clidb_encrypt_info,omitempty"`
	AuthReqFlag         *uint32              `protobuf:"varint,6,opt,name=auth_req_flag,json=authReqFlag" json:"auth_req_flag,omitempty"`
	AuthTicket          *string              `protobuf:"bytes,7,opt,name=auth_ticket,json=authTicket" json:"auth_ticket,omitempty"`
}

func (x *BaseAuthReqInfo) Reset() {
	*x = BaseAuthReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseAuthReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseAuthReqInfo) ProtoMessage() {}

func (x *BaseAuthReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseAuthReqInfo.ProtoReflect.Descriptor instead.
func (*BaseAuthReqInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{16}
}

func (x *BaseAuthReqInfo) GetWtLoginReqBuff() *SKBuiltinString_ {
	if x != nil {
		return x.WtLoginReqBuff
	}
	return nil
}

func (x *BaseAuthReqInfo) GetWtLoginImgReqInfo() *WTLoginImgReqInfo {
	if x != nil {
		return x.WtLoginImgReqInfo
	}
	return nil
}

func (x *BaseAuthReqInfo) GetWxVerifyCodeReqInfo() *WxVerifyCodeReqInfo {
	if x != nil {
		return x.WxVerifyCodeReqInfo
	}
	return nil
}

func (x *BaseAuthReqInfo) GetClidbEncryptKey() *SKBuiltinString_ {
	if x != nil {
		return x.ClidbEncryptKey
	}
	return nil
}

func (x *BaseAuthReqInfo) GetClidbEncryptInfo() *SKBuiltinString_ {
	if x != nil {
		return x.ClidbEncryptInfo
	}
	return nil
}

func (x *BaseAuthReqInfo) GetAuthReqFlag() uint32 {
	if x != nil && x.AuthReqFlag != nil {
		return *x.AuthReqFlag
	}
	return 0
}

func (x *BaseAuthReqInfo) GetAuthTicket() string {
	if x != nil && x.AuthTicket != nil {
		return *x.AuthTicket
	}
	return ""
}

type ManualAuthAesReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	BaseReqInfo     *BaseAuthReqInfo  `protobuf:"bytes,2,opt,name=baseReqInfo" json:"baseReqInfo,omitempty"`
	Imei            *string           `protobuf:"bytes,3,opt,name=imei" json:"imei,omitempty"`
	SoftType        *string           `protobuf:"bytes,4,opt,name=softType" json:"softType,omitempty"`
	BuiltinIpseq    *uint32           `protobuf:"varint,5,opt,name=builtinIpseq" json:"builtinIpseq,omitempty"`
	ClientSeqId     *string           `protobuf:"bytes,6,opt,name=clientSeqId" json:"clientSeqId,omitempty"`
	Signature       *string           `protobuf:"bytes,7,opt,name=signature" json:"signature,omitempty"`
	DeviceName      *string           `protobuf:"bytes,8,opt,name=deviceName" json:"deviceName,omitempty"`
	DeviceType      *string           `protobuf:"bytes,9,opt,name=deviceType" json:"deviceType,omitempty"`
	Language        *string           `protobuf:"bytes,10,opt,name=language" json:"language,omitempty"`
	TimeZone        *string           `protobuf:"bytes,11,opt,name=timeZone" json:"timeZone,omitempty"`
	Channel         *int32            `protobuf:"varint,13,opt,name=channel" json:"channel,omitempty"`
	TimeStamp       *uint32           `protobuf:"varint,14,opt,name=timeStamp" json:"timeStamp,omitempty"`
	DeviceBrand     *string           `protobuf:"bytes,15,opt,name=deviceBrand" json:"deviceBrand,omitempty"`
	DeviceModel     *string           `protobuf:"bytes,16,opt,name=deviceModel" json:"deviceModel,omitempty"`
	Ostype          *string           `protobuf:"bytes,17,opt,name=ostype" json:"ostype,omitempty"`
	RealCountry     *string           `protobuf:"bytes,18,opt,name=realCountry" json:"realCountry,omitempty"`
	BundleId        *string           `protobuf:"bytes,19,opt,name=bundleId" json:"bundleId,omitempty"`
	AdSource        *string           `protobuf:"bytes,20,opt,name=adSource" json:"adSource,omitempty"`
	IphoneVer       *string           `protobuf:"bytes,21,opt,name=iphoneVer" json:"iphoneVer,omitempty"`
	InputType       *uint32           `protobuf:"varint,22,opt,name=inputType" json:"inputType,omitempty"`
	ClientCheckData *SKBuiltinString_ `protobuf:"bytes,23,opt,name=clientCheckData" json:"clientCheckData,omitempty"`
	ExtSpamInfo     *SKBuiltinString_ `protobuf:"bytes,24,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
}

func (x *ManualAuthAesReqData) Reset() {
	*x = ManualAuthAesReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualAuthAesReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualAuthAesReqData) ProtoMessage() {}

func (x *ManualAuthAesReqData) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualAuthAesReqData.ProtoReflect.Descriptor instead.
func (*ManualAuthAesReqData) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{17}
}

func (x *ManualAuthAesReqData) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *ManualAuthAesReqData) GetBaseReqInfo() *BaseAuthReqInfo {
	if x != nil {
		return x.BaseReqInfo
	}
	return nil
}

func (x *ManualAuthAesReqData) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *ManualAuthAesReqData) GetSoftType() string {
	if x != nil && x.SoftType != nil {
		return *x.SoftType
	}
	return ""
}

func (x *ManualAuthAesReqData) GetBuiltinIpseq() uint32 {
	if x != nil && x.BuiltinIpseq != nil {
		return *x.BuiltinIpseq
	}
	return 0
}

func (x *ManualAuthAesReqData) GetClientSeqId() string {
	if x != nil && x.ClientSeqId != nil {
		return *x.ClientSeqId
	}
	return ""
}

func (x *ManualAuthAesReqData) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *ManualAuthAesReqData) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *ManualAuthAesReqData) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *ManualAuthAesReqData) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *ManualAuthAesReqData) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *ManualAuthAesReqData) GetChannel() int32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *ManualAuthAesReqData) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *ManualAuthAesReqData) GetDeviceBrand() string {
	if x != nil && x.DeviceBrand != nil {
		return *x.DeviceBrand
	}
	return ""
}

func (x *ManualAuthAesReqData) GetDeviceModel() string {
	if x != nil && x.DeviceModel != nil {
		return *x.DeviceModel
	}
	return ""
}

func (x *ManualAuthAesReqData) GetOstype() string {
	if x != nil && x.Ostype != nil {
		return *x.Ostype
	}
	return ""
}

func (x *ManualAuthAesReqData) GetRealCountry() string {
	if x != nil && x.RealCountry != nil {
		return *x.RealCountry
	}
	return ""
}

func (x *ManualAuthAesReqData) GetBundleId() string {
	if x != nil && x.BundleId != nil {
		return *x.BundleId
	}
	return ""
}

func (x *ManualAuthAesReqData) GetAdSource() string {
	if x != nil && x.AdSource != nil {
		return *x.AdSource
	}
	return ""
}

func (x *ManualAuthAesReqData) GetIphoneVer() string {
	if x != nil && x.IphoneVer != nil {
		return *x.IphoneVer
	}
	return ""
}

func (x *ManualAuthAesReqData) GetInputType() uint32 {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return 0
}

func (x *ManualAuthAesReqData) GetClientCheckData() *SKBuiltinString_ {
	if x != nil {
		return x.ClientCheckData
	}
	return nil
}

func (x *ManualAuthAesReqData) GetExtSpamInfo() *SKBuiltinString_ {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

type TrustSoftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftConfig *string `protobuf:"bytes,1,opt,name=SoftConfig" json:"SoftConfig,omitempty"`
	SoftData   []byte  `protobuf:"bytes,2,opt,name=SoftData" json:"SoftData,omitempty"`
}

func (x *TrustSoftData) Reset() {
	*x = TrustSoftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustSoftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustSoftData) ProtoMessage() {}

func (x *TrustSoftData) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustSoftData.ProtoReflect.Descriptor instead.
func (*TrustSoftData) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{18}
}

func (x *TrustSoftData) GetSoftConfig() string {
	if x != nil && x.SoftConfig != nil {
		return *x.SoftConfig
	}
	return ""
}

func (x *TrustSoftData) GetSoftData() []byte {
	if x != nil {
		return x.SoftData
	}
	return nil
}

type TrustResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftData    *TrustSoftData `protobuf:"bytes,2,opt,name=SoftData" json:"SoftData,omitempty"`
	DeviceToken *string        `protobuf:"bytes,3,opt,name=DeviceToken" json:"DeviceToken,omitempty"`
	Timestamp   *uint64        `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (x *TrustResponseData) Reset() {
	*x = TrustResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustResponseData) ProtoMessage() {}

func (x *TrustResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustResponseData.ProtoReflect.Descriptor instead.
func (*TrustResponseData) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{19}
}

func (x *TrustResponseData) GetSoftData() *TrustSoftData {
	if x != nil {
		return x.SoftData
	}
	return nil
}

func (x *TrustResponseData) GetDeviceToken() string {
	if x != nil && x.DeviceToken != nil {
		return *x.DeviceToken
	}
	return ""
}

func (x *TrustResponseData) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type TrustResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse      *BaseResponse      `protobuf:"bytes,1,req,name=BaseResponse" json:"BaseResponse,omitempty"`
	TrustResponseData *TrustResponseData `protobuf:"bytes,2,opt,name=TrustResponseData" json:"TrustResponseData,omitempty"`
}

func (x *TrustResp) Reset() {
	*x = TrustResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustResp) ProtoMessage() {}

func (x *TrustResp) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustResp.ProtoReflect.Descriptor instead.
func (*TrustResp) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{20}
}

func (x *TrustResp) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *TrustResp) GetTrustResponseData() *TrustResponseData {
	if x != nil {
		return x.TrustResponseData
	}
	return nil
}

type AutoAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptKey *BufferT `protobuf:"bytes,1,req,name=EncryptKey" json:"EncryptKey,omitempty"`
	Key        *BufferT `protobuf:"bytes,2,req,name=Key" json:"Key,omitempty"`
}

func (x *AutoAuthKey) Reset() {
	*x = AutoAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthKey) ProtoMessage() {}

func (x *AutoAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthKey.ProtoReflect.Descriptor instead.
func (*AutoAuthKey) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{21}
}

func (x *AutoAuthKey) GetEncryptKey() *BufferT {
	if x != nil {
		return x.EncryptKey
	}
	return nil
}

func (x *AutoAuthKey) GetKey() *BufferT {
	if x != nil {
		return x.Key
	}
	return nil
}

type AutoAuthRsaReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AesEncryptKey *SKBuiltinString_ `protobuf:"bytes,2,opt,name=aes_encrypt_key,json=aesEncryptKey" json:"aes_encrypt_key,omitempty"`
	PubEcdhKey    *ECDHKey          `protobuf:"bytes,3,opt,name=pubEcdhKey" json:"pubEcdhKey,omitempty"`
}

func (x *AutoAuthRsaReqData) Reset() {
	*x = AutoAuthRsaReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthRsaReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthRsaReqData) ProtoMessage() {}

func (x *AutoAuthRsaReqData) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthRsaReqData.ProtoReflect.Descriptor instead.
func (*AutoAuthRsaReqData) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{22}
}

func (x *AutoAuthRsaReqData) GetAesEncryptKey() *SKBuiltinString_ {
	if x != nil {
		return x.AesEncryptKey
	}
	return nil
}

func (x *AutoAuthRsaReqData) GetPubEcdhKey() *ECDHKey {
	if x != nil {
		return x.PubEcdhKey
	}
	return nil
}

type AutoAuthAesReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequestPlus  `protobuf:"bytes,1,opt,name=base_request,json=baseRequest" json:"base_request,omitempty"`
	BaseReqInfo     *BaseAuthReqInfo  `protobuf:"bytes,2,opt,name=base_req_info,json=baseReqInfo" json:"base_req_info,omitempty"`
	AutoAuthKey     *SKBuiltinString_ `protobuf:"bytes,3,opt,name=auto_auth_key,json=autoAuthKey" json:"auto_auth_key,omitempty"`
	Imei            *string           `protobuf:"bytes,4,opt,name=imei" json:"imei,omitempty"`
	SoftType        *string           `protobuf:"bytes,5,opt,name=soft_type,json=softType" json:"soft_type,omitempty"`
	BuiltinIpSeq    *uint32           `protobuf:"varint,6,opt,name=builtin_ip_seq,json=builtinIpSeq" json:"builtin_ip_seq,omitempty"`
	ClientSeqId     *string           `protobuf:"bytes,7,opt,name=client_seq_id,json=clientSeqId" json:"client_seq_id,omitempty"`
	Signature       *string           `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	DeviceName      *string           `protobuf:"bytes,9,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	DeviceType      *string           `protobuf:"bytes,10,opt,name=deviceType" json:"deviceType,omitempty"`
	Language        *string           `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	TimeZone        *string           `protobuf:"bytes,12,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	Channel         *uint32           `protobuf:"varint,13,opt,name=channel" json:"channel,omitempty"`
	ClientCheckData *SKBuiltinString_ `protobuf:"bytes,14,opt,name=clientCheckData" json:"clientCheckData,omitempty"`
	ExtSpamInfo     *SKBuiltinString_ `protobuf:"bytes,15,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
}

func (x *AutoAuthAesReqData) Reset() {
	*x = AutoAuthAesReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthAesReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthAesReqData) ProtoMessage() {}

func (x *AutoAuthAesReqData) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthAesReqData.ProtoReflect.Descriptor instead.
func (*AutoAuthAesReqData) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{23}
}

func (x *AutoAuthAesReqData) GetBaseRequest() *BaseRequestPlus {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *AutoAuthAesReqData) GetBaseReqInfo() *BaseAuthReqInfo {
	if x != nil {
		return x.BaseReqInfo
	}
	return nil
}

func (x *AutoAuthAesReqData) GetAutoAuthKey() *SKBuiltinString_ {
	if x != nil {
		return x.AutoAuthKey
	}
	return nil
}

func (x *AutoAuthAesReqData) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *AutoAuthAesReqData) GetSoftType() string {
	if x != nil && x.SoftType != nil {
		return *x.SoftType
	}
	return ""
}

func (x *AutoAuthAesReqData) GetBuiltinIpSeq() uint32 {
	if x != nil && x.BuiltinIpSeq != nil {
		return *x.BuiltinIpSeq
	}
	return 0
}

func (x *AutoAuthAesReqData) GetClientSeqId() string {
	if x != nil && x.ClientSeqId != nil {
		return *x.ClientSeqId
	}
	return ""
}

func (x *AutoAuthAesReqData) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *AutoAuthAesReqData) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *AutoAuthAesReqData) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *AutoAuthAesReqData) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *AutoAuthAesReqData) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *AutoAuthAesReqData) GetChannel() uint32 {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return 0
}

func (x *AutoAuthAesReqData) GetClientCheckData() *SKBuiltinString_ {
	if x != nil {
		return x.ClientCheckData
	}
	return nil
}

func (x *AutoAuthAesReqData) GetExtSpamInfo() *SKBuiltinString_ {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

type AutoAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RsaReqData *AutoAuthRsaReqData `protobuf:"bytes,1,opt,name=rsa_req_data,json=rsaReqData" json:"rsa_req_data,omitempty"`
	AesReqData *AutoAuthAesReqData `protobuf:"bytes,2,opt,name=aes_req_data,json=aesReqData" json:"aes_req_data,omitempty"`
}

func (x *AutoAuthRequest) Reset() {
	*x = AutoAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoAuthRequest) ProtoMessage() {}

func (x *AutoAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoAuthRequest.ProtoReflect.Descriptor instead.
func (*AutoAuthRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{24}
}

func (x *AutoAuthRequest) GetRsaReqData() *AutoAuthRsaReqData {
	if x != nil {
		return x.RsaReqData
	}
	return nil
}

func (x *AutoAuthRequest) GetAesReqData() *AutoAuthAesReqData {
	if x != nil {
		return x.AesReqData
	}
	return nil
}

type WCExtInfoNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wcstf          *BufferT `protobuf:"bytes,1,opt,name=Wcstf" json:"Wcstf,omitempty"`
	Wcste          *BufferT `protobuf:"bytes,2,opt,name=Wcste" json:"Wcste,omitempty"`
	CcData         *BufferT `protobuf:"bytes,3,opt,name=CcData" json:"CcData,omitempty"`
	UserAttrInfo   *BufferT `protobuf:"bytes,4,opt,name=UserAttrInfo" json:"UserAttrInfo,omitempty"`
	AcgiDeviceInfo *BufferT `protobuf:"bytes,5,opt,name=AcgiDeviceInfo" json:"AcgiDeviceInfo,omitempty"`
	AcgiTuring     *BufferT `protobuf:"bytes,6,opt,name=AcgiTuring" json:"AcgiTuring,omitempty"`
	DeviceToken    *BufferT `protobuf:"bytes,7,opt,name=DeviceToken" json:"DeviceToken,omitempty"`
	BehaviorId     *BufferT `protobuf:"bytes,8,opt,name=BehaviorId" json:"BehaviorId,omitempty"`
	IosturingHuman *BufferT `protobuf:"bytes,101,opt,name=IosturingHuman" json:"IosturingHuman,omitempty"`
	IosturingOwner *BufferT `protobuf:"bytes,102,opt,name=IosturingOwner" json:"IosturingOwner,omitempty"`
}

func (x *WCExtInfoNew) Reset() {
	*x = WCExtInfoNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WCExtInfoNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WCExtInfoNew) ProtoMessage() {}

func (x *WCExtInfoNew) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WCExtInfoNew.ProtoReflect.Descriptor instead.
func (*WCExtInfoNew) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{25}
}

func (x *WCExtInfoNew) GetWcstf() *BufferT {
	if x != nil {
		return x.Wcstf
	}
	return nil
}

func (x *WCExtInfoNew) GetWcste() *BufferT {
	if x != nil {
		return x.Wcste
	}
	return nil
}

func (x *WCExtInfoNew) GetCcData() *BufferT {
	if x != nil {
		return x.CcData
	}
	return nil
}

func (x *WCExtInfoNew) GetUserAttrInfo() *BufferT {
	if x != nil {
		return x.UserAttrInfo
	}
	return nil
}

func (x *WCExtInfoNew) GetAcgiDeviceInfo() *BufferT {
	if x != nil {
		return x.AcgiDeviceInfo
	}
	return nil
}

func (x *WCExtInfoNew) GetAcgiTuring() *BufferT {
	if x != nil {
		return x.AcgiTuring
	}
	return nil
}

func (x *WCExtInfoNew) GetDeviceToken() *BufferT {
	if x != nil {
		return x.DeviceToken
	}
	return nil
}

func (x *WCExtInfoNew) GetBehaviorId() *BufferT {
	if x != nil {
		return x.BehaviorId
	}
	return nil
}

func (x *WCExtInfoNew) GetIosturingHuman() *BufferT {
	if x != nil {
		return x.IosturingHuman
	}
	return nil
}

func (x *WCExtInfoNew) GetIosturingOwner() *BufferT {
	if x != nil {
		return x.IosturingOwner
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filepath *string `protobuf:"bytes,1,opt,name=Filepath" json:"Filepath,omitempty"`
	Fileuuid *string `protobuf:"bytes,2,opt,name=Fileuuid" json:"Fileuuid,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{26}
}

func (x *FileInfo) GetFilepath() string {
	if x != nil && x.Filepath != nil {
		return *x.Filepath
	}
	return ""
}

func (x *FileInfo) GetFileuuid() string {
	if x != nil && x.Fileuuid != nil {
		return *x.Fileuuid
	}
	return ""
}

type SpamDataBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnKnown1              *int32      `protobuf:"varint,1,req,name=UnKnown1" json:"UnKnown1,omitempty"`
	TimeStamp             *uint32     `protobuf:"varint,2,req,name=TimeStamp" json:"TimeStamp,omitempty"`
	KeyHash               *int32      `protobuf:"varint,3,req,name=KeyHash" json:"KeyHash,omitempty"`
	Yes1                  *string     `protobuf:"bytes,11,req,name=Yes1" json:"Yes1,omitempty"`
	Yes2                  *string     `protobuf:"bytes,12,req,name=Yes2" json:"Yes2,omitempty"`
	IosVersion            *string     `protobuf:"bytes,13,req,name=IosVersion" json:"IosVersion,omitempty"`
	DeviceType            *string     `protobuf:"bytes,14,req,name=DeviceType" json:"DeviceType,omitempty"`
	UnKnown2              *int32      `protobuf:"varint,15,req,name=UnKnown2" json:"UnKnown2,omitempty"`
	IdentifierForVendor   *string     `protobuf:"bytes,16,req,name=IdentifierForVendor" json:"IdentifierForVendor,omitempty"`
	AdvertisingIdentifier *string     `protobuf:"bytes,17,req,name=AdvertisingIdentifier" json:"AdvertisingIdentifier,omitempty"`
	Carrier               *string     `protobuf:"bytes,18,req,name=Carrier" json:"Carrier,omitempty"`
	BatteryInfo           *int32      `protobuf:"varint,19,req,name=BatteryInfo" json:"BatteryInfo,omitempty"`
	NetworkName           *string     `protobuf:"bytes,20,req,name=NetworkName" json:"NetworkName,omitempty"`
	NetType               *int32      `protobuf:"varint,21,req,name=NetType" json:"NetType,omitempty"`
	AppBundleId           *string     `protobuf:"bytes,22,req,name=AppBundleId" json:"AppBundleId,omitempty"`
	DeviceName            *string     `protobuf:"bytes,23,req,name=DeviceName" json:"DeviceName,omitempty"`
	UserName              *string     `protobuf:"bytes,24,req,name=UserName" json:"UserName,omitempty"`
	Unknown3              *int64      `protobuf:"varint,25,req,name=Unknown3" json:"Unknown3,omitempty"`
	Unknown4              *int64      `protobuf:"varint,26,req,name=Unknown4" json:"Unknown4,omitempty"`
	Unknown5              *int32      `protobuf:"varint,27,req,name=Unknown5" json:"Unknown5,omitempty"`
	Unknown6              *int32      `protobuf:"varint,28,req,name=Unknown6" json:"Unknown6,omitempty"`
	Lang                  *string     `protobuf:"bytes,29,req,name=Lang" json:"Lang,omitempty"`
	Country               *string     `protobuf:"bytes,30,req,name=Country" json:"Country,omitempty"`
	Unknown7              *int32      `protobuf:"varint,31,req,name=Unknown7" json:"Unknown7,omitempty"`
	DocumentDir           *string     `protobuf:"bytes,32,req,name=DocumentDir" json:"DocumentDir,omitempty"`
	Unknown8              *int32      `protobuf:"varint,33,req,name=Unknown8" json:"Unknown8,omitempty"`
	Unknown9              *int32      `protobuf:"varint,34,req,name=Unknown9" json:"Unknown9,omitempty"`
	HeadMD5               *string     `protobuf:"bytes,35,req,name=HeadMD5" json:"HeadMD5,omitempty"`
	AppUUID               *string     `protobuf:"bytes,36,req,name=AppUUID" json:"AppUUID,omitempty"`
	SyslogUUID            *string     `protobuf:"bytes,37,req,name=SyslogUUID" json:"SyslogUUID,omitempty"`
	WifiName              *string     `protobuf:"bytes,38,req,name=WifiName" json:"WifiName,omitempty"`
	WifiMac               *string     `protobuf:"bytes,39,req,name=WifiMac" json:"WifiMac,omitempty"`
	AppName               *string     `protobuf:"bytes,40,req,name=AppName" json:"AppName,omitempty"`
	SshPath               *string     `protobuf:"bytes,41,opt,name=SshPath" json:"SshPath,omitempty"`
	TempTest              *string     `protobuf:"bytes,42,opt,name=TempTest" json:"TempTest,omitempty"`
	DevMD5                *string     `protobuf:"bytes,43,opt,name=DevMD5" json:"DevMD5,omitempty"`
	DevUser               *string     `protobuf:"bytes,44,opt,name=DevUser" json:"DevUser,omitempty"`
	DevPrefix             *string     `protobuf:"bytes,45,opt,name=DevPrefix" json:"DevPrefix,omitempty"`
	AppFileInfo           []*FileInfo `protobuf:"bytes,46,rep,name=AppFileInfo" json:"AppFileInfo,omitempty"`
	Unknown12             *string     `protobuf:"bytes,47,req,name=Unknown12" json:"Unknown12,omitempty"`
	IsModify              *int32      `protobuf:"varint,50,req,name=IsModify" json:"IsModify,omitempty"`
	ModifyMD5             *string     `protobuf:"bytes,51,req,name=ModifyMD5" json:"ModifyMD5,omitempty"`
	RqtHash               *int64      `protobuf:"varint,52,req,name=RqtHash" json:"RqtHash,omitempty"`
	Unknown13             *int32      `protobuf:"varint,53,req,name=Unknown13" json:"Unknown13,omitempty"`
	Unknown14             *int32      `protobuf:"varint,54,req,name=Unknown14" json:"Unknown14,omitempty"`
	Ssid                  *string     `protobuf:"bytes,55,req,name=Ssid" json:"Ssid,omitempty"`
	Unknown15             *int32      `protobuf:"varint,56,req,name=Unknown15" json:"Unknown15,omitempty"`
	Bssid                 *string     `protobuf:"bytes,57,req,name=Bssid" json:"Bssid,omitempty"`
	IsJail                *int32      `protobuf:"varint,58,req,name=IsJail" json:"IsJail,omitempty"`
	Seid                  *string     `protobuf:"bytes,59,opt,name=Seid" json:"Seid,omitempty"`
	Unknown16             *int32      `protobuf:"varint,60,opt,name=Unknown16" json:"Unknown16,omitempty"`
	Unknown17             *int32      `protobuf:"varint,61,opt,name=Unknown17" json:"Unknown17,omitempty"`
	Unknown18             *int32      `protobuf:"varint,62,opt,name=Unknown18" json:"Unknown18,omitempty"`
	WifiOn                *int32      `protobuf:"varint,63,opt,name=WifiOn" json:"WifiOn,omitempty"`
	BluethOn              *int32      `protobuf:"varint,64,opt,name=BluethOn" json:"BluethOn,omitempty"`
	BluethName            *string     `protobuf:"bytes,65,opt,name=BluethName" json:"BluethName,omitempty"`
	BluethMac             *string     `protobuf:"bytes,66,opt,name=BluethMac" json:"BluethMac,omitempty"`
	Unknown19             *int32      `protobuf:"varint,67,opt,name=Unknown19" json:"Unknown19,omitempty"`
	Unknown20             *int32      `protobuf:"varint,68,opt,name=Unknown20" json:"Unknown20,omitempty"`
	Unknown26             *int32      `protobuf:"varint,69,opt,name=Unknown26" json:"Unknown26,omitempty"`
	HasSim                *int32      `protobuf:"varint,70,opt,name=HasSim" json:"HasSim,omitempty"`
	UsbState              *int32      `protobuf:"varint,71,opt,name=UsbState" json:"UsbState,omitempty"`
	Unknown27             *int32      `protobuf:"varint,72,opt,name=Unknown27" json:"Unknown27,omitempty"`
	Unknown28             *int32      `protobuf:"varint,73,opt,name=Unknown28" json:"Unknown28,omitempty"`
	Sign                  *string     `protobuf:"bytes,74,opt,name=Sign" json:"Sign,omitempty"`
	PackageFlag           *uint32     `protobuf:"varint,75,opt,name=PackageFlag" json:"PackageFlag,omitempty"`
	AccessFlag            *uint32     `protobuf:"varint,76,opt,name=AccessFlag" json:"AccessFlag,omitempty"`
	Imei                  *string     `protobuf:"bytes,77,opt,name=Imei" json:"Imei,omitempty"`
	DevSerial             *string     `protobuf:"bytes,78,opt,name=DevSerial" json:"DevSerial,omitempty"`
	Unknown29             *uint32     `protobuf:"varint,79,opt,name=Unknown29" json:"Unknown29,omitempty"`
	Unknown30             *uint32     `protobuf:"varint,80,opt,name=Unknown30" json:"Unknown30,omitempty"`
	Unknown31             *uint32     `protobuf:"varint,81,opt,name=Unknown31" json:"Unknown31,omitempty"`
	Unknown32             *uint32     `protobuf:"varint,82,opt,name=Unknown32" json:"Unknown32,omitempty"`
	AppNum                *uint32     `protobuf:"varint,83,opt,name=AppNum" json:"AppNum,omitempty"`
	Totcapacity           *string     `protobuf:"bytes,84,opt,name=Totcapacity" json:"Totcapacity,omitempty"`
	Avacapacity           *string     `protobuf:"bytes,85,opt,name=Avacapacity" json:"Avacapacity,omitempty"`
	Unknown33             *uint32     `protobuf:"varint,86,opt,name=Unknown33" json:"Unknown33,omitempty"`
	Unknown34             *uint32     `protobuf:"varint,87,opt,name=Unknown34" json:"Unknown34,omitempty"`
	Unknown35             *uint32     `protobuf:"varint,88,opt,name=Unknown35" json:"Unknown35,omitempty"`
	Unknown103            *int32      `protobuf:"varint,89,opt,name=Unknown103" json:"Unknown103,omitempty"`
	Unknown104            *int32      `protobuf:"varint,90,opt,name=Unknown104" json:"Unknown104,omitempty"`
	Unknown105            *int32      `protobuf:"varint,91,opt,name=Unknown105" json:"Unknown105,omitempty"`
	Unknown106            *uint32     `protobuf:"varint,92,opt,name=Unknown106" json:"Unknown106,omitempty"`
	Unknown107            *int32      `protobuf:"varint,93,opt,name=Unknown107" json:"Unknown107,omitempty"`
	Unknown108            *int32      `protobuf:"varint,94,opt,name=Unknown108" json:"Unknown108,omitempty"`
	Unknown109            *int32      `protobuf:"varint,95,opt,name=Unknown109" json:"Unknown109,omitempty"`
	Unknown110            *int32      `protobuf:"varint,96,opt,name=Unknown110" json:"Unknown110,omitempty"`
	Unknown111            *int32      `protobuf:"varint,97,opt,name=Unknown111" json:"Unknown111,omitempty"`
	Unknown112            *uint32     `protobuf:"varint,98,opt,name=Unknown112" json:"Unknown112,omitempty"`
}

func (x *SpamDataBody) Reset() {
	*x = SpamDataBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpamDataBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpamDataBody) ProtoMessage() {}

func (x *SpamDataBody) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpamDataBody.ProtoReflect.Descriptor instead.
func (*SpamDataBody) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{27}
}

func (x *SpamDataBody) GetUnKnown1() int32 {
	if x != nil && x.UnKnown1 != nil {
		return *x.UnKnown1
	}
	return 0
}

func (x *SpamDataBody) GetTimeStamp() uint32 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *SpamDataBody) GetKeyHash() int32 {
	if x != nil && x.KeyHash != nil {
		return *x.KeyHash
	}
	return 0
}

func (x *SpamDataBody) GetYes1() string {
	if x != nil && x.Yes1 != nil {
		return *x.Yes1
	}
	return ""
}

func (x *SpamDataBody) GetYes2() string {
	if x != nil && x.Yes2 != nil {
		return *x.Yes2
	}
	return ""
}

func (x *SpamDataBody) GetIosVersion() string {
	if x != nil && x.IosVersion != nil {
		return *x.IosVersion
	}
	return ""
}

func (x *SpamDataBody) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *SpamDataBody) GetUnKnown2() int32 {
	if x != nil && x.UnKnown2 != nil {
		return *x.UnKnown2
	}
	return 0
}

func (x *SpamDataBody) GetIdentifierForVendor() string {
	if x != nil && x.IdentifierForVendor != nil {
		return *x.IdentifierForVendor
	}
	return ""
}

func (x *SpamDataBody) GetAdvertisingIdentifier() string {
	if x != nil && x.AdvertisingIdentifier != nil {
		return *x.AdvertisingIdentifier
	}
	return ""
}

func (x *SpamDataBody) GetCarrier() string {
	if x != nil && x.Carrier != nil {
		return *x.Carrier
	}
	return ""
}

func (x *SpamDataBody) GetBatteryInfo() int32 {
	if x != nil && x.BatteryInfo != nil {
		return *x.BatteryInfo
	}
	return 0
}

func (x *SpamDataBody) GetNetworkName() string {
	if x != nil && x.NetworkName != nil {
		return *x.NetworkName
	}
	return ""
}

func (x *SpamDataBody) GetNetType() int32 {
	if x != nil && x.NetType != nil {
		return *x.NetType
	}
	return 0
}

func (x *SpamDataBody) GetAppBundleId() string {
	if x != nil && x.AppBundleId != nil {
		return *x.AppBundleId
	}
	return ""
}

func (x *SpamDataBody) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *SpamDataBody) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *SpamDataBody) GetUnknown3() int64 {
	if x != nil && x.Unknown3 != nil {
		return *x.Unknown3
	}
	return 0
}

func (x *SpamDataBody) GetUnknown4() int64 {
	if x != nil && x.Unknown4 != nil {
		return *x.Unknown4
	}
	return 0
}

func (x *SpamDataBody) GetUnknown5() int32 {
	if x != nil && x.Unknown5 != nil {
		return *x.Unknown5
	}
	return 0
}

func (x *SpamDataBody) GetUnknown6() int32 {
	if x != nil && x.Unknown6 != nil {
		return *x.Unknown6
	}
	return 0
}

func (x *SpamDataBody) GetLang() string {
	if x != nil && x.Lang != nil {
		return *x.Lang
	}
	return ""
}

func (x *SpamDataBody) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *SpamDataBody) GetUnknown7() int32 {
	if x != nil && x.Unknown7 != nil {
		return *x.Unknown7
	}
	return 0
}

func (x *SpamDataBody) GetDocumentDir() string {
	if x != nil && x.DocumentDir != nil {
		return *x.DocumentDir
	}
	return ""
}

func (x *SpamDataBody) GetUnknown8() int32 {
	if x != nil && x.Unknown8 != nil {
		return *x.Unknown8
	}
	return 0
}

func (x *SpamDataBody) GetUnknown9() int32 {
	if x != nil && x.Unknown9 != nil {
		return *x.Unknown9
	}
	return 0
}

func (x *SpamDataBody) GetHeadMD5() string {
	if x != nil && x.HeadMD5 != nil {
		return *x.HeadMD5
	}
	return ""
}

func (x *SpamDataBody) GetAppUUID() string {
	if x != nil && x.AppUUID != nil {
		return *x.AppUUID
	}
	return ""
}

func (x *SpamDataBody) GetSyslogUUID() string {
	if x != nil && x.SyslogUUID != nil {
		return *x.SyslogUUID
	}
	return ""
}

func (x *SpamDataBody) GetWifiName() string {
	if x != nil && x.WifiName != nil {
		return *x.WifiName
	}
	return ""
}

func (x *SpamDataBody) GetWifiMac() string {
	if x != nil && x.WifiMac != nil {
		return *x.WifiMac
	}
	return ""
}

func (x *SpamDataBody) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *SpamDataBody) GetSshPath() string {
	if x != nil && x.SshPath != nil {
		return *x.SshPath
	}
	return ""
}

func (x *SpamDataBody) GetTempTest() string {
	if x != nil && x.TempTest != nil {
		return *x.TempTest
	}
	return ""
}

func (x *SpamDataBody) GetDevMD5() string {
	if x != nil && x.DevMD5 != nil {
		return *x.DevMD5
	}
	return ""
}

func (x *SpamDataBody) GetDevUser() string {
	if x != nil && x.DevUser != nil {
		return *x.DevUser
	}
	return ""
}

func (x *SpamDataBody) GetDevPrefix() string {
	if x != nil && x.DevPrefix != nil {
		return *x.DevPrefix
	}
	return ""
}

func (x *SpamDataBody) GetAppFileInfo() []*FileInfo {
	if x != nil {
		return x.AppFileInfo
	}
	return nil
}

func (x *SpamDataBody) GetUnknown12() string {
	if x != nil && x.Unknown12 != nil {
		return *x.Unknown12
	}
	return ""
}

func (x *SpamDataBody) GetIsModify() int32 {
	if x != nil && x.IsModify != nil {
		return *x.IsModify
	}
	return 0
}

func (x *SpamDataBody) GetModifyMD5() string {
	if x != nil && x.ModifyMD5 != nil {
		return *x.ModifyMD5
	}
	return ""
}

func (x *SpamDataBody) GetRqtHash() int64 {
	if x != nil && x.RqtHash != nil {
		return *x.RqtHash
	}
	return 0
}

func (x *SpamDataBody) GetUnknown13() int32 {
	if x != nil && x.Unknown13 != nil {
		return *x.Unknown13
	}
	return 0
}

func (x *SpamDataBody) GetUnknown14() int32 {
	if x != nil && x.Unknown14 != nil {
		return *x.Unknown14
	}
	return 0
}

func (x *SpamDataBody) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *SpamDataBody) GetUnknown15() int32 {
	if x != nil && x.Unknown15 != nil {
		return *x.Unknown15
	}
	return 0
}

func (x *SpamDataBody) GetBssid() string {
	if x != nil && x.Bssid != nil {
		return *x.Bssid
	}
	return ""
}

func (x *SpamDataBody) GetIsJail() int32 {
	if x != nil && x.IsJail != nil {
		return *x.IsJail
	}
	return 0
}

func (x *SpamDataBody) GetSeid() string {
	if x != nil && x.Seid != nil {
		return *x.Seid
	}
	return ""
}

func (x *SpamDataBody) GetUnknown16() int32 {
	if x != nil && x.Unknown16 != nil {
		return *x.Unknown16
	}
	return 0
}

func (x *SpamDataBody) GetUnknown17() int32 {
	if x != nil && x.Unknown17 != nil {
		return *x.Unknown17
	}
	return 0
}

func (x *SpamDataBody) GetUnknown18() int32 {
	if x != nil && x.Unknown18 != nil {
		return *x.Unknown18
	}
	return 0
}

func (x *SpamDataBody) GetWifiOn() int32 {
	if x != nil && x.WifiOn != nil {
		return *x.WifiOn
	}
	return 0
}

func (x *SpamDataBody) GetBluethOn() int32 {
	if x != nil && x.BluethOn != nil {
		return *x.BluethOn
	}
	return 0
}

func (x *SpamDataBody) GetBluethName() string {
	if x != nil && x.BluethName != nil {
		return *x.BluethName
	}
	return ""
}

func (x *SpamDataBody) GetBluethMac() string {
	if x != nil && x.BluethMac != nil {
		return *x.BluethMac
	}
	return ""
}

func (x *SpamDataBody) GetUnknown19() int32 {
	if x != nil && x.Unknown19 != nil {
		return *x.Unknown19
	}
	return 0
}

func (x *SpamDataBody) GetUnknown20() int32 {
	if x != nil && x.Unknown20 != nil {
		return *x.Unknown20
	}
	return 0
}

func (x *SpamDataBody) GetUnknown26() int32 {
	if x != nil && x.Unknown26 != nil {
		return *x.Unknown26
	}
	return 0
}

func (x *SpamDataBody) GetHasSim() int32 {
	if x != nil && x.HasSim != nil {
		return *x.HasSim
	}
	return 0
}

func (x *SpamDataBody) GetUsbState() int32 {
	if x != nil && x.UsbState != nil {
		return *x.UsbState
	}
	return 0
}

func (x *SpamDataBody) GetUnknown27() int32 {
	if x != nil && x.Unknown27 != nil {
		return *x.Unknown27
	}
	return 0
}

func (x *SpamDataBody) GetUnknown28() int32 {
	if x != nil && x.Unknown28 != nil {
		return *x.Unknown28
	}
	return 0
}

func (x *SpamDataBody) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *SpamDataBody) GetPackageFlag() uint32 {
	if x != nil && x.PackageFlag != nil {
		return *x.PackageFlag
	}
	return 0
}

func (x *SpamDataBody) GetAccessFlag() uint32 {
	if x != nil && x.AccessFlag != nil {
		return *x.AccessFlag
	}
	return 0
}

func (x *SpamDataBody) GetImei() string {
	if x != nil && x.Imei != nil {
		return *x.Imei
	}
	return ""
}

func (x *SpamDataBody) GetDevSerial() string {
	if x != nil && x.DevSerial != nil {
		return *x.DevSerial
	}
	return ""
}

func (x *SpamDataBody) GetUnknown29() uint32 {
	if x != nil && x.Unknown29 != nil {
		return *x.Unknown29
	}
	return 0
}

func (x *SpamDataBody) GetUnknown30() uint32 {
	if x != nil && x.Unknown30 != nil {
		return *x.Unknown30
	}
	return 0
}

func (x *SpamDataBody) GetUnknown31() uint32 {
	if x != nil && x.Unknown31 != nil {
		return *x.Unknown31
	}
	return 0
}

func (x *SpamDataBody) GetUnknown32() uint32 {
	if x != nil && x.Unknown32 != nil {
		return *x.Unknown32
	}
	return 0
}

func (x *SpamDataBody) GetAppNum() uint32 {
	if x != nil && x.AppNum != nil {
		return *x.AppNum
	}
	return 0
}

func (x *SpamDataBody) GetTotcapacity() string {
	if x != nil && x.Totcapacity != nil {
		return *x.Totcapacity
	}
	return ""
}

func (x *SpamDataBody) GetAvacapacity() string {
	if x != nil && x.Avacapacity != nil {
		return *x.Avacapacity
	}
	return ""
}

func (x *SpamDataBody) GetUnknown33() uint32 {
	if x != nil && x.Unknown33 != nil {
		return *x.Unknown33
	}
	return 0
}

func (x *SpamDataBody) GetUnknown34() uint32 {
	if x != nil && x.Unknown34 != nil {
		return *x.Unknown34
	}
	return 0
}

func (x *SpamDataBody) GetUnknown35() uint32 {
	if x != nil && x.Unknown35 != nil {
		return *x.Unknown35
	}
	return 0
}

func (x *SpamDataBody) GetUnknown103() int32 {
	if x != nil && x.Unknown103 != nil {
		return *x.Unknown103
	}
	return 0
}

func (x *SpamDataBody) GetUnknown104() int32 {
	if x != nil && x.Unknown104 != nil {
		return *x.Unknown104
	}
	return 0
}

func (x *SpamDataBody) GetUnknown105() int32 {
	if x != nil && x.Unknown105 != nil {
		return *x.Unknown105
	}
	return 0
}

func (x *SpamDataBody) GetUnknown106() uint32 {
	if x != nil && x.Unknown106 != nil {
		return *x.Unknown106
	}
	return 0
}

func (x *SpamDataBody) GetUnknown107() int32 {
	if x != nil && x.Unknown107 != nil {
		return *x.Unknown107
	}
	return 0
}

func (x *SpamDataBody) GetUnknown108() int32 {
	if x != nil && x.Unknown108 != nil {
		return *x.Unknown108
	}
	return 0
}

func (x *SpamDataBody) GetUnknown109() int32 {
	if x != nil && x.Unknown109 != nil {
		return *x.Unknown109
	}
	return 0
}

func (x *SpamDataBody) GetUnknown110() int32 {
	if x != nil && x.Unknown110 != nil {
		return *x.Unknown110
	}
	return 0
}

func (x *SpamDataBody) GetUnknown111() int32 {
	if x != nil && x.Unknown111 != nil {
		return *x.Unknown111
	}
	return 0
}

func (x *SpamDataBody) GetUnknown112() uint32 {
	if x != nil && x.Unknown112 != nil {
		return *x.Unknown112
	}
	return 0
}

type NewClientCheckData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	C32CData  *int64 `protobuf:"varint,1,opt,name=C32cData" json:"C32cData,omitempty"`
	TimeStamp *int64 `protobuf:"varint,2,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	DataBody  []byte `protobuf:"bytes,3,opt,name=DataBody" json:"DataBody,omitempty"`
}

func (x *NewClientCheckData) Reset() {
	*x = NewClientCheckData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClientCheckData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClientCheckData) ProtoMessage() {}

func (x *NewClientCheckData) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClientCheckData.ProtoReflect.Descriptor instead.
func (*NewClientCheckData) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{28}
}

func (x *NewClientCheckData) GetC32CData() int64 {
	if x != nil && x.C32CData != nil {
		return *x.C32CData
	}
	return 0
}

func (x *NewClientCheckData) GetTimeStamp() int64 {
	if x != nil && x.TimeStamp != nil {
		return *x.TimeStamp
	}
	return 0
}

func (x *NewClientCheckData) GetDataBody() []byte {
	if x != nil {
		return x.DataBody
	}
	return nil
}

type DeviceRunningInfoNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     []byte  `protobuf:"bytes,1,req,name=Version" json:"Version,omitempty"`
	Type        *uint32 `protobuf:"varint,2,req,name=Type" json:"Type,omitempty"`
	EncryptData []byte  `protobuf:"bytes,3,req,name=EncryptData" json:"EncryptData,omitempty"`
	Timestamp   *uint32 `protobuf:"varint,4,req,name=Timestamp" json:"Timestamp,omitempty"`
	Unknown5    *uint32 `protobuf:"varint,5,req,name=Unknown5" json:"Unknown5,omitempty"`
	Unknown6    *uint32 `protobuf:"varint,6,req,name=Unknown6" json:"Unknown6,omitempty"`
}

func (x *DeviceRunningInfoNew) Reset() {
	*x = DeviceRunningInfoNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRunningInfoNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRunningInfoNew) ProtoMessage() {}

func (x *DeviceRunningInfoNew) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRunningInfoNew.ProtoReflect.Descriptor instead.
func (*DeviceRunningInfoNew) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{29}
}

func (x *DeviceRunningInfoNew) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeviceRunningInfoNew) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DeviceRunningInfoNew) GetEncryptData() []byte {
	if x != nil {
		return x.EncryptData
	}
	return nil
}

func (x *DeviceRunningInfoNew) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *DeviceRunningInfoNew) GetUnknown5() uint32 {
	if x != nil && x.Unknown5 != nil {
		return *x.Unknown5
	}
	return 0
}

func (x *DeviceRunningInfoNew) GetUnknown6() uint32 {
	if x != nil && x.Unknown6 != nil {
		return *x.Unknown6
	}
	return 0
}

type WCSTF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *uint64  `protobuf:"varint,1,req,name=StartTime" json:"StartTime,omitempty"`
	CheckTime *uint64  `protobuf:"varint,2,req,name=CheckTime" json:"CheckTime,omitempty"`
	Count     *uint32  `protobuf:"varint,3,req,name=Count" json:"Count,omitempty"`
	EndTime   []uint64 `protobuf:"varint,4,rep,name=EndTime" json:"EndTime,omitempty"`
}

func (x *WCSTF) Reset() {
	*x = WCSTF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WCSTF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WCSTF) ProtoMessage() {}

func (x *WCSTF) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WCSTF.ProtoReflect.Descriptor instead.
func (*WCSTF) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{30}
}

func (x *WCSTF) GetStartTime() uint64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *WCSTF) GetCheckTime() uint64 {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return 0
}

func (x *WCSTF) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *WCSTF) GetEndTime() []uint64 {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type WCSTE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckId   *string `protobuf:"bytes,1,req,name=CheckId" json:"CheckId,omitempty"`
	StartTime *uint32 `protobuf:"varint,2,req,name=StartTime" json:"StartTime,omitempty"`
	CheckTime *uint32 `protobuf:"varint,3,req,name=CheckTime" json:"CheckTime,omitempty"`
	Count1    *uint32 `protobuf:"varint,4,req,name=Count1" json:"Count1,omitempty"`
	Count2    *uint32 `protobuf:"varint,5,req,name=Count2" json:"Count2,omitempty"`
	Count3    *uint32 `protobuf:"varint,6,req,name=Count3" json:"Count3,omitempty"`
	Const1    *uint64 `protobuf:"varint,7,req,name=Const1" json:"Const1,omitempty"`
	Const2    *uint64 `protobuf:"varint,8,req,name=Const2" json:"Const2,omitempty"`
	Const3    *uint64 `protobuf:"varint,9,req,name=Const3" json:"Const3,omitempty"`
	Const4    *uint64 `protobuf:"varint,10,req,name=Const4" json:"Const4,omitempty"`
	Const5    *uint64 `protobuf:"varint,11,req,name=Const5" json:"Const5,omitempty"`
	Const6    *uint64 `protobuf:"varint,12,req,name=Const6" json:"Const6,omitempty"`
}

func (x *WCSTE) Reset() {
	*x = WCSTE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WCSTE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WCSTE) ProtoMessage() {}

func (x *WCSTE) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WCSTE.ProtoReflect.Descriptor instead.
func (*WCSTE) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{31}
}

func (x *WCSTE) GetCheckId() string {
	if x != nil && x.CheckId != nil {
		return *x.CheckId
	}
	return ""
}

func (x *WCSTE) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *WCSTE) GetCheckTime() uint32 {
	if x != nil && x.CheckTime != nil {
		return *x.CheckTime
	}
	return 0
}

func (x *WCSTE) GetCount1() uint32 {
	if x != nil && x.Count1 != nil {
		return *x.Count1
	}
	return 0
}

func (x *WCSTE) GetCount2() uint32 {
	if x != nil && x.Count2 != nil {
		return *x.Count2
	}
	return 0
}

func (x *WCSTE) GetCount3() uint32 {
	if x != nil && x.Count3 != nil {
		return *x.Count3
	}
	return 0
}

func (x *WCSTE) GetConst1() uint64 {
	if x != nil && x.Const1 != nil {
		return *x.Const1
	}
	return 0
}

func (x *WCSTE) GetConst2() uint64 {
	if x != nil && x.Const2 != nil {
		return *x.Const2
	}
	return 0
}

func (x *WCSTE) GetConst3() uint64 {
	if x != nil && x.Const3 != nil {
		return *x.Const3
	}
	return 0
}

func (x *WCSTE) GetConst4() uint64 {
	if x != nil && x.Const4 != nil {
		return *x.Const4
	}
	return 0
}

func (x *WCSTE) GetConst5() uint64 {
	if x != nil && x.Const5 != nil {
		return *x.Const5
	}
	return 0
}

func (x *WCSTE) GetConst6() uint64 {
	if x != nil && x.Const6 != nil {
		return *x.Const6
	}
	return 0
}

type SaeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          []byte  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Iv            []byte  `protobuf:"bytes,2,opt,name=iv" json:"iv,omitempty"`
	Len           *uint32 `protobuf:"varint,3,opt,name=len" json:"len,omitempty"`
	UnknowValue9  []byte  `protobuf:"bytes,9,opt,name=unknowValue9" json:"unknowValue9,omitempty"`
	TableKey      []byte  `protobuf:"bytes,10,opt,name=tableKey" json:"tableKey,omitempty"`
	UnknowValue11 []byte  `protobuf:"bytes,11,opt,name=unknowValue11" json:"unknowValue11,omitempty"`
	TableValue    []byte  `protobuf:"bytes,12,opt,name=tableValue" json:"tableValue,omitempty"`
	UnknowValue18 []byte  `protobuf:"bytes,18,opt,name=unknowValue18" json:"unknowValue18,omitempty"`
}

func (x *SaeInfo) Reset() {
	*x = SaeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaeInfo) ProtoMessage() {}

func (x *SaeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaeInfo.ProtoReflect.Descriptor instead.
func (*SaeInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{32}
}

func (x *SaeInfo) GetType() []byte {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SaeInfo) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *SaeInfo) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *SaeInfo) GetUnknowValue9() []byte {
	if x != nil {
		return x.UnknowValue9
	}
	return nil
}

func (x *SaeInfo) GetTableKey() []byte {
	if x != nil {
		return x.TableKey
	}
	return nil
}

func (x *SaeInfo) GetUnknowValue11() []byte {
	if x != nil {
		return x.UnknowValue11
	}
	return nil
}

func (x *SaeInfo) GetTableValue() []byte {
	if x != nil {
		return x.TableValue
	}
	return nil
}

func (x *SaeInfo) GetUnknowValue18() []byte {
	if x != nil {
		return x.UnknowValue18
	}
	return nil
}

type TenPayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest      `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	CgiCmd      *uint32           `protobuf:"varint,2,opt,name=cgiCmd" json:"cgiCmd,omitempty"`
	OutPutType  *uint32           `protobuf:"varint,3,opt,name=outPutType" json:"outPutType,omitempty"`
	ReqText     *SKBuiltinString_ `protobuf:"bytes,4,opt,name=reqText" json:"reqText,omitempty"`
	ReqTextWx   *SKBuiltinString_ `protobuf:"bytes,5,opt,name=reqTextWx" json:"reqTextWx,omitempty"`
	Sign        *string           `protobuf:"bytes,6,opt,name=sign" json:"sign,omitempty"`
	CrtNo       *string           `protobuf:"bytes,7,opt,name=crtNo" json:"crtNo,omitempty"`
}

func (x *TenPayRequest) Reset() {
	*x = TenPayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenPayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenPayRequest) ProtoMessage() {}

func (x *TenPayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenPayRequest.ProtoReflect.Descriptor instead.
func (*TenPayRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{33}
}

func (x *TenPayRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *TenPayRequest) GetCgiCmd() uint32 {
	if x != nil && x.CgiCmd != nil {
		return *x.CgiCmd
	}
	return 0
}

func (x *TenPayRequest) GetOutPutType() uint32 {
	if x != nil && x.OutPutType != nil {
		return *x.OutPutType
	}
	return 0
}

func (x *TenPayRequest) GetReqText() *SKBuiltinString_ {
	if x != nil {
		return x.ReqText
	}
	return nil
}

func (x *TenPayRequest) GetReqTextWx() *SKBuiltinString_ {
	if x != nil {
		return x.ReqTextWx
	}
	return nil
}

func (x *TenPayRequest) GetSign() string {
	if x != nil && x.Sign != nil {
		return *x.Sign
	}
	return ""
}

func (x *TenPayRequest) GetCrtNo() string {
	if x != nil && x.CrtNo != nil {
		return *x.CrtNo
	}
	return ""
}

type SKBuiltinBufferT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ILen   *uint32 `protobuf:"varint,1,opt,name=iLen" json:"iLen,omitempty"`
	Buffer []byte  `protobuf:"bytes,2,opt,name=buffer" json:"buffer,omitempty"`
}

func (x *SKBuiltinBufferT) Reset() {
	*x = SKBuiltinBufferT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinBufferT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinBufferT) ProtoMessage() {}

func (x *SKBuiltinBufferT) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinBufferT.ProtoReflect.Descriptor instead.
func (*SKBuiltinBufferT) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{34}
}

func (x *SKBuiltinBufferT) GetILen() uint32 {
	if x != nil && x.ILen != nil {
		return *x.ILen
	}
	return 0
}

func (x *SKBuiltinBufferT) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

type UploadAppAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest     *BaseRequest      `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	AppId           *string           `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	SdkVersion      *uint32           `protobuf:"varint,3,opt,name=sdkVersion" json:"sdkVersion,omitempty"`
	ClientAppDataId *string           `protobuf:"bytes,4,opt,name=clientAppDataId" json:"clientAppDataId,omitempty"`
	UserName        *string           `protobuf:"bytes,5,opt,name=userName" json:"userName,omitempty"`
	TotalLen        *uint32           `protobuf:"varint,6,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos        *uint32           `protobuf:"varint,7,opt,name=startPos" json:"startPos,omitempty"`
	DataLen         *uint32           `protobuf:"varint,8,opt,name=dataLen" json:"dataLen,omitempty"`
	Data            *SKBuiltinBufferT `protobuf:"bytes,9,opt,name=data" json:"data,omitempty"`
	Type            *uint32           `protobuf:"varint,10,opt,name=type" json:"type,omitempty"`
	Md5             *string           `protobuf:"bytes,11,opt,name=md5" json:"md5,omitempty"`
}

func (x *UploadAppAttachRequest) Reset() {
	*x = UploadAppAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAppAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAppAttachRequest) ProtoMessage() {}

func (x *UploadAppAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAppAttachRequest.ProtoReflect.Descriptor instead.
func (*UploadAppAttachRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{35}
}

func (x *UploadAppAttachRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *UploadAppAttachRequest) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *UploadAppAttachRequest) GetSdkVersion() uint32 {
	if x != nil && x.SdkVersion != nil {
		return *x.SdkVersion
	}
	return 0
}

func (x *UploadAppAttachRequest) GetClientAppDataId() string {
	if x != nil && x.ClientAppDataId != nil {
		return *x.ClientAppDataId
	}
	return ""
}

func (x *UploadAppAttachRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UploadAppAttachRequest) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *UploadAppAttachRequest) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *UploadAppAttachRequest) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *UploadAppAttachRequest) GetData() *SKBuiltinBufferT {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UploadAppAttachRequest) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *UploadAppAttachRequest) GetMd5() string {
	if x != nil && x.Md5 != nil {
		return *x.Md5
	}
	return ""
}

type UploadAppAttachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse    *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	AppId           *string       `protobuf:"bytes,2,opt,name=appId" json:"appId,omitempty"`
	MediaId         *string       `protobuf:"bytes,3,opt,name=mediaId" json:"mediaId,omitempty"`
	ClientAppDataId *string       `protobuf:"bytes,4,opt,name=clientAppDataId" json:"clientAppDataId,omitempty"`
	UserName        *string       `protobuf:"bytes,5,opt,name=userName" json:"userName,omitempty"`
	TotalLen        *uint32       `protobuf:"varint,6,opt,name=totalLen" json:"totalLen,omitempty"`
	StartPos        *uint32       `protobuf:"varint,7,opt,name=startPos" json:"startPos,omitempty"`
	DataLen         *uint32       `protobuf:"varint,8,opt,name=dataLen" json:"dataLen,omitempty"`
	CreateTime      *uint64       `protobuf:"varint,9,opt,name=createTime" json:"createTime,omitempty"`
}

func (x *UploadAppAttachResponse) Reset() {
	*x = UploadAppAttachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadAppAttachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadAppAttachResponse) ProtoMessage() {}

func (x *UploadAppAttachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadAppAttachResponse.ProtoReflect.Descriptor instead.
func (*UploadAppAttachResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{36}
}

func (x *UploadAppAttachResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *UploadAppAttachResponse) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *UploadAppAttachResponse) GetMediaId() string {
	if x != nil && x.MediaId != nil {
		return *x.MediaId
	}
	return ""
}

func (x *UploadAppAttachResponse) GetClientAppDataId() string {
	if x != nil && x.ClientAppDataId != nil {
		return *x.ClientAppDataId
	}
	return ""
}

func (x *UploadAppAttachResponse) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *UploadAppAttachResponse) GetTotalLen() uint32 {
	if x != nil && x.TotalLen != nil {
		return *x.TotalLen
	}
	return 0
}

func (x *UploadAppAttachResponse) GetStartPos() uint32 {
	if x != nil && x.StartPos != nil {
		return *x.StartPos
	}
	return 0
}

func (x *UploadAppAttachResponse) GetDataLen() uint32 {
	if x != nil && x.DataLen != nil {
		return *x.DataLen
	}
	return 0
}

func (x *UploadAppAttachResponse) GetCreateTime() uint64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

type DownloadVoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        *uint64      `protobuf:"varint,1,opt,name=msgId" json:"msgId,omitempty"`
	Offset       *uint32      `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Length       *uint32      `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	ClientMsgId  *string      `protobuf:"bytes,4,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	BaseRequest  *BaseRequest `protobuf:"bytes,5,opt,name=baseRequest" json:"baseRequest,omitempty"`
	NewMsgId     *uint64      `protobuf:"varint,6,opt,name=newMsgId" json:"newMsgId,omitempty"`
	ChatRoomName *string      `protobuf:"bytes,7,opt,name=chatRoomName" json:"chatRoomName,omitempty"`
	MasterBufId  *int64       `protobuf:"varint,8,opt,name=masterBufId" json:"masterBufId,omitempty"`
}

func (x *DownloadVoiceRequest) Reset() {
	*x = DownloadVoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadVoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadVoiceRequest) ProtoMessage() {}

func (x *DownloadVoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadVoiceRequest.ProtoReflect.Descriptor instead.
func (*DownloadVoiceRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{37}
}

func (x *DownloadVoiceRequest) GetMsgId() uint64 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *DownloadVoiceRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DownloadVoiceRequest) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *DownloadVoiceRequest) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *DownloadVoiceRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *DownloadVoiceRequest) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

func (x *DownloadVoiceRequest) GetChatRoomName() string {
	if x != nil && x.ChatRoomName != nil {
		return *x.ChatRoomName
	}
	return ""
}

func (x *DownloadVoiceRequest) GetMasterBufId() int64 {
	if x != nil && x.MasterBufId != nil {
		return *x.MasterBufId
	}
	return 0
}

type DownloadVoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        *uint32           `protobuf:"varint,1,opt,name=msgId" json:"msgId,omitempty"`
	Offset       *uint32           `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Length       *uint32           `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	VoiceLength  *uint32           `protobuf:"varint,5,opt,name=voiceLength" json:"voiceLength,omitempty"`
	ClientMsgId  *string           `protobuf:"bytes,6,opt,name=clientMsgId" json:"clientMsgId,omitempty"`
	Data         *SKBuiltinString_ `protobuf:"bytes,7,opt,name=data" json:"data,omitempty"`
	EndFlag      *uint32           `protobuf:"varint,8,opt,name=endFlag" json:"endFlag,omitempty"`
	BaseResponse *BaseResponse     `protobuf:"bytes,9,opt,name=baseResponse" json:"baseResponse,omitempty"`
	CancelFlag   *uint32           `protobuf:"varint,10,opt,name=cancelFlag" json:"cancelFlag,omitempty"`
	NewMsgId     *uint64           `protobuf:"varint,11,opt,name=newMsgId" json:"newMsgId,omitempty"`
}

func (x *DownloadVoiceResponse) Reset() {
	*x = DownloadVoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadVoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadVoiceResponse) ProtoMessage() {}

func (x *DownloadVoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadVoiceResponse.ProtoReflect.Descriptor instead.
func (*DownloadVoiceResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{38}
}

func (x *DownloadVoiceResponse) GetMsgId() uint32 {
	if x != nil && x.MsgId != nil {
		return *x.MsgId
	}
	return 0
}

func (x *DownloadVoiceResponse) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DownloadVoiceResponse) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *DownloadVoiceResponse) GetVoiceLength() uint32 {
	if x != nil && x.VoiceLength != nil {
		return *x.VoiceLength
	}
	return 0
}

func (x *DownloadVoiceResponse) GetClientMsgId() string {
	if x != nil && x.ClientMsgId != nil {
		return *x.ClientMsgId
	}
	return ""
}

func (x *DownloadVoiceResponse) GetData() *SKBuiltinString_ {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DownloadVoiceResponse) GetEndFlag() uint32 {
	if x != nil && x.EndFlag != nil {
		return *x.EndFlag
	}
	return 0
}

func (x *DownloadVoiceResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *DownloadVoiceResponse) GetCancelFlag() uint32 {
	if x != nil && x.CancelFlag != nil {
		return *x.CancelFlag
	}
	return 0
}

func (x *DownloadVoiceResponse) GetNewMsgId() uint64 {
	if x != nil && x.NewMsgId != nil {
		return *x.NewMsgId
	}
	return 0
}

type ClientContextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextId         *string `protobuf:"bytes,1,opt,name=ContextId" json:"ContextId,omitempty"`
	ClickTabContextId *string `protobuf:"bytes,2,opt,name=ClickTabContextId" json:"ClickTabContextId,omitempty"`
	ClientReportBuff  *string `protobuf:"bytes,3,opt,name=ClientReportBuff" json:"ClientReportBuff,omitempty"`
}

func (x *ClientContextInfo) Reset() {
	*x = ClientContextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientContextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientContextInfo) ProtoMessage() {}

func (x *ClientContextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientContextInfo.ProtoReflect.Descriptor instead.
func (*ClientContextInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{39}
}

func (x *ClientContextInfo) GetContextId() string {
	if x != nil && x.ContextId != nil {
		return *x.ContextId
	}
	return ""
}

func (x *ClientContextInfo) GetClickTabContextId() string {
	if x != nil && x.ClickTabContextId != nil {
		return *x.ClickTabContextId
	}
	return ""
}

func (x *ClientContextInfo) GetClientReportBuff() string {
	if x != nil && x.ClientReportBuff != nil {
		return *x.ClientReportBuff
	}
	return ""
}

// 视频号
type FinderBaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userver     *int32             `protobuf:"varint,1,opt,name=userver" json:"userver,omitempty"`
	Scene       *int32             `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	ExtSpamInfo []byte             `protobuf:"bytes,3,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
	ExptFla     *uint32            `protobuf:"varint,4,opt,name=ExptFla" json:"ExptFla,omitempty"`
	CtxInfo     *ClientContextInfo `protobuf:"bytes,5,opt,name=CtxInfo" json:"CtxInfo,omitempty"`
	Times       *uint64            `protobuf:"varint,6,opt,name=times" json:"times,omitempty"`
}

func (x *FinderBaseRequest) Reset() {
	*x = FinderBaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBaseRequest) ProtoMessage() {}

func (x *FinderBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBaseRequest.ProtoReflect.Descriptor instead.
func (*FinderBaseRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{40}
}

func (x *FinderBaseRequest) GetUserver() int32 {
	if x != nil && x.Userver != nil {
		return *x.Userver
	}
	return 0
}

func (x *FinderBaseRequest) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderBaseRequest) GetExtSpamInfo() []byte {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

func (x *FinderBaseRequest) GetExptFla() uint32 {
	if x != nil && x.ExptFla != nil {
		return *x.ExptFla
	}
	return 0
}

func (x *FinderBaseRequest) GetCtxInfo() *ClientContextInfo {
	if x != nil {
		return x.CtxInfo
	}
	return nil
}

func (x *FinderBaseRequest) GetTimes() uint64 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

type FinderPwd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FbrId   *uint64 `protobuf:"varint,1,opt,name=FbrId" json:"FbrId,omitempty"`
	FbrKey  *string `protobuf:"bytes,2,opt,name=FbrKey" json:"FbrKey,omitempty"`
	FbrTime *uint64 `protobuf:"varint,3,opt,name=FbrTime" json:"FbrTime,omitempty"`
	T       *uint64 `protobuf:"varint,4,opt,name=T" json:"T,omitempty"`
	G       *uint64 `protobuf:"varint,5,opt,name=G" json:"G,omitempty"`
}

func (x *FinderPwd) Reset() {
	*x = FinderPwd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderPwd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderPwd) ProtoMessage() {}

func (x *FinderPwd) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderPwd.ProtoReflect.Descriptor instead.
func (*FinderPwd) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{41}
}

func (x *FinderPwd) GetFbrId() uint64 {
	if x != nil && x.FbrId != nil {
		return *x.FbrId
	}
	return 0
}

func (x *FinderPwd) GetFbrKey() string {
	if x != nil && x.FbrKey != nil {
		return *x.FbrKey
	}
	return ""
}

func (x *FinderPwd) GetFbrTime() uint64 {
	if x != nil && x.FbrTime != nil {
		return *x.FbrTime
	}
	return 0
}

func (x *FinderPwd) GetT() uint64 {
	if x != nil && x.T != nil {
		return *x.T
	}
	return 0
}

func (x *FinderPwd) GetG() uint64 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

type FinderBaseRequestPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userver     *int32             `protobuf:"varint,1,opt,name=userver" json:"userver,omitempty"`
	Scene       *int32             `protobuf:"varint,2,opt,name=scene" json:"scene,omitempty"`
	ExtSpamInfo []byte             `protobuf:"bytes,3,opt,name=extSpamInfo" json:"extSpamInfo,omitempty"`
	ExptFla     *uint32            `protobuf:"varint,4,opt,name=ExptFla" json:"ExptFla,omitempty"`
	CtxInfo     *ClientContextInfo `protobuf:"bytes,5,opt,name=CtxInfo" json:"CtxInfo,omitempty"`
	Times       *uint64            `protobuf:"varint,6,opt,name=times" json:"times,omitempty"`
	FbrV7       *uint64            `protobuf:"varint,7,opt,name=FbrV7" json:"FbrV7,omitempty"`
	Pwd         *FinderPwd         `protobuf:"bytes,8,opt,name=Pwd" json:"Pwd,omitempty"`
}

func (x *FinderBaseRequestPlus) Reset() {
	*x = FinderBaseRequestPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderBaseRequestPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderBaseRequestPlus) ProtoMessage() {}

func (x *FinderBaseRequestPlus) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderBaseRequestPlus.ProtoReflect.Descriptor instead.
func (*FinderBaseRequestPlus) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{42}
}

func (x *FinderBaseRequestPlus) GetUserver() int32 {
	if x != nil && x.Userver != nil {
		return *x.Userver
	}
	return 0
}

func (x *FinderBaseRequestPlus) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderBaseRequestPlus) GetExtSpamInfo() []byte {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

func (x *FinderBaseRequestPlus) GetExptFla() uint32 {
	if x != nil && x.ExptFla != nil {
		return *x.ExptFla
	}
	return 0
}

func (x *FinderBaseRequestPlus) GetCtxInfo() *ClientContextInfo {
	if x != nil {
		return x.CtxInfo
	}
	return nil
}

func (x *FinderBaseRequestPlus) GetTimes() uint64 {
	if x != nil && x.Times != nil {
		return *x.Times
	}
	return 0
}

func (x *FinderBaseRequestPlus) GetFbrV7() uint64 {
	if x != nil && x.FbrV7 != nil {
		return *x.FbrV7
	}
	return 0
}

func (x *FinderBaseRequestPlus) GetPwd() *FinderPwd {
	if x != nil {
		return x.Pwd
	}
	return nil
}

type FinderTxRequestPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userver     *int32    `protobuf:"varint,1,opt,name=Userver" json:"Userver,omitempty"`
	Scene       *int32    `protobuf:"varint,2,opt,name=Scene" json:"Scene,omitempty"`
	ExtSpamInfo []byte    `protobuf:"bytes,3,opt,name=ExtSpamInfo" json:"ExtSpamInfo,omitempty"`
	T           *int32    `protobuf:"varint,4,opt,name=T" json:"T,omitempty"`
	G           *FinderZd `protobuf:"bytes,5,opt,name=G" json:"G,omitempty"`
	Tg          *int64    `protobuf:"varint,6,opt,name=Tg" json:"Tg,omitempty"`
}

func (x *FinderTxRequestPlus) Reset() {
	*x = FinderTxRequestPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTxRequestPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTxRequestPlus) ProtoMessage() {}

func (x *FinderTxRequestPlus) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTxRequestPlus.ProtoReflect.Descriptor instead.
func (*FinderTxRequestPlus) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{43}
}

func (x *FinderTxRequestPlus) GetUserver() int32 {
	if x != nil && x.Userver != nil {
		return *x.Userver
	}
	return 0
}

func (x *FinderTxRequestPlus) GetScene() int32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderTxRequestPlus) GetExtSpamInfo() []byte {
	if x != nil {
		return x.ExtSpamInfo
	}
	return nil
}

func (x *FinderTxRequestPlus) GetT() int32 {
	if x != nil && x.T != nil {
		return *x.T
	}
	return 0
}

func (x *FinderTxRequestPlus) GetG() *FinderZd {
	if x != nil {
		return x.G
	}
	return nil
}

func (x *FinderTxRequestPlus) GetTg() int64 {
	if x != nil && x.Tg != nil {
		return *x.Tg
	}
	return 0
}

type FinderZd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	G1 *string `protobuf:"bytes,1,opt,name=G1" json:"G1,omitempty"`
	G2 *string `protobuf:"bytes,2,opt,name=G2" json:"G2,omitempty"`
	G3 *string `protobuf:"bytes,3,opt,name=G3" json:"G3,omitempty"`
}

func (x *FinderZd) Reset() {
	*x = FinderZd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderZd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderZd) ProtoMessage() {}

func (x *FinderZd) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderZd.ProtoReflect.Descriptor instead.
func (*FinderZd) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{44}
}

func (x *FinderZd) GetG1() string {
	if x != nil && x.G1 != nil {
		return *x.G1
	}
	return ""
}

func (x *FinderZd) GetG2() string {
	if x != nil && x.G2 != nil {
		return *x.G2
	}
	return ""
}

func (x *FinderZd) GetG3() string {
	if x != nil && x.G3 != nil {
		return *x.G3
	}
	return ""
}

type FinderFollowRequestPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderUsername *string              `protobuf:"bytes,2,opt,name=FinderUsername" json:"FinderUsername,omitempty"`
	OpType         *int32               `protobuf:"varint,3,opt,name=OpType" json:"OpType,omitempty"`
	RefObjectId    *uint64              `protobuf:"varint,4,opt,name=RefObjectId" json:"RefObjectId,omitempty"`
	PosterUsername *string              `protobuf:"bytes,5,opt,name=PosterUsername" json:"PosterUsername,omitempty"`
	FinderReq      *FinderTxRequestPlus `protobuf:"bytes,7,opt,name=FinderReq" json:"FinderReq,omitempty"`
	Cook           *string              `protobuf:"bytes,8,opt,name=Cook" json:"Cook,omitempty"`
	EnterType      *int32               `protobuf:"varint,9,opt,name=EnterType" json:"EnterType,omitempty"`
}

func (x *FinderFollowRequestPlus) Reset() {
	*x = FinderFollowRequestPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFollowRequestPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFollowRequestPlus) ProtoMessage() {}

func (x *FinderFollowRequestPlus) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFollowRequestPlus.ProtoReflect.Descriptor instead.
func (*FinderFollowRequestPlus) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{45}
}

func (x *FinderFollowRequestPlus) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderFollowRequestPlus) GetOpType() int32 {
	if x != nil && x.OpType != nil {
		return *x.OpType
	}
	return 0
}

func (x *FinderFollowRequestPlus) GetRefObjectId() uint64 {
	if x != nil && x.RefObjectId != nil {
		return *x.RefObjectId
	}
	return 0
}

func (x *FinderFollowRequestPlus) GetPosterUsername() string {
	if x != nil && x.PosterUsername != nil {
		return *x.PosterUsername
	}
	return ""
}

func (x *FinderFollowRequestPlus) GetFinderReq() *FinderTxRequestPlus {
	if x != nil {
		return x.FinderReq
	}
	return nil
}

func (x *FinderFollowRequestPlus) GetCook() string {
	if x != nil && x.Cook != nil {
		return *x.Cook
	}
	return ""
}

func (x *FinderFollowRequestPlus) GetEnterType() int32 {
	if x != nil && x.EnterType != nil {
		return *x.EnterType
	}
	return 0
}

type FinderCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Username       *string            `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Objectid       *uint64            `protobuf:"varint,3,opt,name=Objectid" json:"Objectid,omitempty"`
	Content        *string            `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	CommentId      *uint64            `protobuf:"varint,5,opt,name=CommentId" json:"CommentId,omitempty"`
	ReplyCommentId *uint64            `protobuf:"varint,6,opt,name=ReplyCommentId" json:"ReplyCommentId,omitempty"`
	ReplyUsername  *string            `protobuf:"bytes,7,opt,name=ReplyUsername" json:"ReplyUsername,omitempty"`
	Optype         *uint32            `protobuf:"varint,8,opt,name=Optype" json:"Optype,omitempty"`
	Clientid       *string            `protobuf:"bytes,9,opt,name=Clientid" json:"Clientid,omitempty"`
	RootCommentId  *uint64            `protobuf:"varint,10,opt,name=RootCommentId" json:"RootCommentId,omitempty"`
	Scene          *uint32            `protobuf:"varint,11,opt,name=Scene" json:"Scene,omitempty"`
	ObjectNonceId  *string            `protobuf:"bytes,12,opt,name=ObjectNonceId" json:"ObjectNonceId,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,13,opt,name=FinderBasereq" json:"FinderBasereq,omitempty"`
	SessionBuffer  *string            `protobuf:"bytes,14,opt,name=SessionBuffer" json:"SessionBuffer,omitempty"`
}

func (x *FinderCommentRequest) Reset() {
	*x = FinderCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentRequest) ProtoMessage() {}

func (x *FinderCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentRequest.ProtoReflect.Descriptor instead.
func (*FinderCommentRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{46}
}

func (x *FinderCommentRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderCommentRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderCommentRequest) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *FinderCommentRequest) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *FinderCommentRequest) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderCommentRequest) GetReplyCommentId() uint64 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *FinderCommentRequest) GetReplyUsername() string {
	if x != nil && x.ReplyUsername != nil {
		return *x.ReplyUsername
	}
	return ""
}

func (x *FinderCommentRequest) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderCommentRequest) GetClientid() string {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return ""
}

func (x *FinderCommentRequest) GetRootCommentId() uint64 {
	if x != nil && x.RootCommentId != nil {
		return *x.RootCommentId
	}
	return 0
}

func (x *FinderCommentRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderCommentRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderCommentRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderCommentRequest) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

type FinderMediaSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat     *string `protobuf:"bytes,1,opt,name=fileFormat" json:"fileFormat,omitempty"`
	FirstLoadBytes *int32  `protobuf:"varint,2,opt,name=firstLoadBytes" json:"firstLoadBytes,omitempty"`
	BitRate        *int32  `protobuf:"varint,3,opt,name=bitRate" json:"bitRate,omitempty"`
	CodingFormat   *string `protobuf:"bytes,4,opt,name=codingFormat" json:"codingFormat,omitempty"`
}

func (x *FinderMediaSpec) Reset() {
	*x = FinderMediaSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaSpec) ProtoMessage() {}

func (x *FinderMediaSpec) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaSpec.ProtoReflect.Descriptor instead.
func (*FinderMediaSpec) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{47}
}

func (x *FinderMediaSpec) GetFileFormat() string {
	if x != nil && x.FileFormat != nil {
		return *x.FileFormat
	}
	return ""
}

func (x *FinderMediaSpec) GetFirstLoadBytes() int32 {
	if x != nil && x.FirstLoadBytes != nil {
		return *x.FirstLoadBytes
	}
	return 0
}

func (x *FinderMediaSpec) GetBitRate() int32 {
	if x != nil && x.BitRate != nil {
		return *x.BitRate
	}
	return 0
}

func (x *FinderMediaSpec) GetCodingFormat() string {
	if x != nil && x.CodingFormat != nil {
		return *x.CodingFormat
	}
	return ""
}

type FinderMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url          *string            `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty"`
	ThumbUrl     *string            `protobuf:"bytes,2,opt,name=ThumbUrl" json:"ThumbUrl,omitempty"`
	MediaType    *int32             `protobuf:"varint,3,opt,name=MediaType" json:"MediaType,omitempty"`
	VideoPlayLen *int32             `protobuf:"varint,4,opt,name=VideoPlayLen" json:"VideoPlayLen,omitempty"`
	Width        *float32           `protobuf:"fixed32,5,opt,name=Width" json:"Width,omitempty"`
	Height       *float32           `protobuf:"fixed32,6,opt,name=Height" json:"Height,omitempty"`
	Md5Sum       *string            `protobuf:"bytes,7,opt,name=Md5Sum" json:"Md5Sum,omitempty"`
	FileSize     *int32             `protobuf:"varint,8,opt,name=FileSize" json:"FileSize,omitempty"`
	Bitrate      *int32             `protobuf:"varint,9,opt,name=Bitrate" json:"Bitrate,omitempty"`
	Spec         []*FinderMediaSpec `protobuf:"bytes,10,rep,name=Spec" json:"Spec,omitempty"`
}

func (x *FinderMedia) Reset() {
	*x = FinderMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMedia) ProtoMessage() {}

func (x *FinderMedia) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMedia.ProtoReflect.Descriptor instead.
func (*FinderMedia) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{48}
}

func (x *FinderMedia) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *FinderMedia) GetThumbUrl() string {
	if x != nil && x.ThumbUrl != nil {
		return *x.ThumbUrl
	}
	return ""
}

func (x *FinderMedia) GetMediaType() int32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *FinderMedia) GetVideoPlayLen() int32 {
	if x != nil && x.VideoPlayLen != nil {
		return *x.VideoPlayLen
	}
	return 0
}

func (x *FinderMedia) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *FinderMedia) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *FinderMedia) GetMd5Sum() string {
	if x != nil && x.Md5Sum != nil {
		return *x.Md5Sum
	}
	return ""
}

func (x *FinderMedia) GetFileSize() int32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *FinderMedia) GetBitrate() int32 {
	if x != nil && x.Bitrate != nil {
		return *x.Bitrate
	}
	return 0
}

func (x *FinderMedia) GetSpec() []*FinderMediaSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type FinderMediaExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text *string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (x *FinderMediaExtra) Reset() {
	*x = FinderMediaExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMediaExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMediaExtra) ProtoMessage() {}

func (x *FinderMediaExtra) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMediaExtra.ProtoReflect.Descriptor instead.
func (*FinderMediaExtra) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{49}
}

func (x *FinderMediaExtra) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type FinderLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude       *float32 `protobuf:"fixed32,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude        *float32 `protobuf:"fixed32,2,opt,name=latitude" json:"latitude,omitempty"`
	City            *string  `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	PoiName         *string  `protobuf:"bytes,4,opt,name=poiName" json:"poiName,omitempty"`
	PoiAddress      *string  `protobuf:"bytes,5,opt,name=poiAddress" json:"poiAddress,omitempty"`
	PoiClassifyId   *string  `protobuf:"bytes,6,opt,name=poiClassifyId" json:"poiClassifyId,omitempty"`
	PoiClassifyType *int32   `protobuf:"varint,7,opt,name=poiClassifyType" json:"poiClassifyType,omitempty"`
}

func (x *FinderLocation) Reset() {
	*x = FinderLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLocation) ProtoMessage() {}

func (x *FinderLocation) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLocation.ProtoReflect.Descriptor instead.
func (*FinderLocation) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{50}
}

func (x *FinderLocation) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderLocation) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderLocation) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *FinderLocation) GetPoiName() string {
	if x != nil && x.PoiName != nil {
		return *x.PoiName
	}
	return ""
}

func (x *FinderLocation) GetPoiAddress() string {
	if x != nil && x.PoiAddress != nil {
		return *x.PoiAddress
	}
	return ""
}

func (x *FinderLocation) GetPoiClassifyId() string {
	if x != nil && x.PoiClassifyId != nil {
		return *x.PoiClassifyId
	}
	return ""
}

func (x *FinderLocation) GetPoiClassifyType() int32 {
	if x != nil && x.PoiClassifyType != nil {
		return *x.PoiClassifyType
	}
	return 0
}

type FinderExtendedReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link  *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Title *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *FinderExtendedReading) Reset() {
	*x = FinderExtendedReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderExtendedReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderExtendedReading) ProtoMessage() {}

func (x *FinderExtendedReading) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderExtendedReading.ProtoReflect.Descriptor instead.
func (*FinderExtendedReading) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{51}
}

func (x *FinderExtendedReading) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *FinderExtendedReading) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type FinderTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderTopicInfo *string `protobuf:"bytes,1,opt,name=finderTopicInfo" json:"finderTopicInfo,omitempty"`
}

func (x *FinderTopic) Reset() {
	*x = FinderTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderTopic) ProtoMessage() {}

func (x *FinderTopic) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderTopic.ProtoReflect.Descriptor instead.
func (*FinderTopic) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{52}
}

func (x *FinderTopic) GetFinderTopicInfo() string {
	if x != nil && x.FinderTopicInfo != nil {
		return *x.FinderTopicInfo
	}
	return ""
}

type FinderObjectDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *string                `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Media       []*FinderMedia         `protobuf:"bytes,2,rep,name=media" json:"media,omitempty"` //疑似PB不对
	MediaType   *int32                 `protobuf:"varint,3,opt,name=mediaType" json:"mediaType,omitempty"`
	Extra       *FinderMediaExtra      `protobuf:"bytes,4,opt,name=extra" json:"extra,omitempty"`
	Location    *FinderLocation        `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	ExtReading  *FinderExtendedReading `protobuf:"bytes,6,opt,name=extReading" json:"extReading,omitempty"`
	Topic       *FinderTopic           `protobuf:"bytes,7,opt,name=topic" json:"topic,omitempty"`
}

func (x *FinderObjectDesc) Reset() {
	*x = FinderObjectDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjectDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjectDesc) ProtoMessage() {}

func (x *FinderObjectDesc) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjectDesc.ProtoReflect.Descriptor instead.
func (*FinderObjectDesc) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{53}
}

func (x *FinderObjectDesc) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FinderObjectDesc) GetMedia() []*FinderMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *FinderObjectDesc) GetMediaType() int32 {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return 0
}

func (x *FinderObjectDesc) GetExtra() *FinderMediaExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *FinderObjectDesc) GetLocation() *FinderLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FinderObjectDesc) GetExtReading() *FinderExtendedReading {
	if x != nil {
		return x.ExtReading
	}
	return nil
}

func (x *FinderObjectDesc) GetTopic() *FinderTopic {
	if x != nil {
		return x.Topic
	}
	return nil
}

type FinderCommentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username           *string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname           *string  `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Content            *string  `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	CommentId          *uint32  `protobuf:"varint,4,opt,name=commentId" json:"commentId,omitempty"`
	ReplyCommentId     *uint32  `protobuf:"varint,5,opt,name=replyCommentId" json:"replyCommentId,omitempty"`
	DeleteFlag         *int32   `protobuf:"varint,6,opt,name=deleteFlag" json:"deleteFlag,omitempty"`
	HeadUrl            *string  `protobuf:"bytes,7,opt,name=headUrl" json:"headUrl,omitempty"`
	LevelTwoComment    []string `protobuf:"bytes,8,rep,name=levelTwoComment" json:"levelTwoComment,omitempty"` //未找到相关PB
	Createtime         *uint32  `protobuf:"varint,9,opt,name=createtime" json:"createtime,omitempty"`
	ReplyNickname      *string  `protobuf:"bytes,10,opt,name=replyNickname" json:"replyNickname,omitempty"`
	DisplayidDiscarded *string  `protobuf:"bytes,11,opt,name=displayidDiscarded" json:"displayidDiscarded,omitempty"`
	LikeFlag           *int32   `protobuf:"varint,12,opt,name=likeFlag" json:"likeFlag,omitempty"`
	LikeCount          *int32   `protobuf:"varint,13,opt,name=likeCount" json:"likeCount,omitempty"`
	Displayid          *uint32  `protobuf:"varint,14,opt,name=displayid" json:"displayid,omitempty"`
	ExpandCommentCount *int32   `protobuf:"varint,15,opt,name=expandCommentCount" json:"expandCommentCount,omitempty"`
	LastBuffer         []byte   `protobuf:"bytes,16,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	ContinueFlag       *int32   `protobuf:"varint,17,opt,name=continueFlag" json:"continueFlag,omitempty"`
	DisplayFlag        *int32   `protobuf:"varint,18,opt,name=displayFlag" json:"displayFlag,omitempty"`
	BlacklistFlag      *int32   `protobuf:"varint,19,opt,name=blacklistFlag" json:"blacklistFlag,omitempty"`
	ReplyContent       *string  `protobuf:"bytes,20,opt,name=replyContent" json:"replyContent,omitempty"`
	ReplyUsername      *string  `protobuf:"bytes,21,opt,name=replyUsername" json:"replyUsername,omitempty"`
	ClientId           *string  `protobuf:"bytes,22,opt,name=clientId" json:"clientId,omitempty"`
	UpContinueFlag     *int32   `protobuf:"varint,23,opt,name=upContinueFlag" json:"upContinueFlag,omitempty"`
}

func (x *FinderCommentInfo) Reset() {
	*x = FinderCommentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentInfo) ProtoMessage() {}

func (x *FinderCommentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentInfo.ProtoReflect.Descriptor instead.
func (*FinderCommentInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{54}
}

func (x *FinderCommentInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderCommentInfo) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderCommentInfo) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *FinderCommentInfo) GetCommentId() uint32 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyCommentId() uint32 {
	if x != nil && x.ReplyCommentId != nil {
		return *x.ReplyCommentId
	}
	return 0
}

func (x *FinderCommentInfo) GetDeleteFlag() int32 {
	if x != nil && x.DeleteFlag != nil {
		return *x.DeleteFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

func (x *FinderCommentInfo) GetLevelTwoComment() []string {
	if x != nil {
		return x.LevelTwoComment
	}
	return nil
}

func (x *FinderCommentInfo) GetCreatetime() uint32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyNickname() string {
	if x != nil && x.ReplyNickname != nil {
		return *x.ReplyNickname
	}
	return ""
}

func (x *FinderCommentInfo) GetDisplayidDiscarded() string {
	if x != nil && x.DisplayidDiscarded != nil {
		return *x.DisplayidDiscarded
	}
	return ""
}

func (x *FinderCommentInfo) GetLikeFlag() int32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderCommentInfo) GetDisplayid() uint32 {
	if x != nil && x.Displayid != nil {
		return *x.Displayid
	}
	return 0
}

func (x *FinderCommentInfo) GetExpandCommentCount() int32 {
	if x != nil && x.ExpandCommentCount != nil {
		return *x.ExpandCommentCount
	}
	return 0
}

func (x *FinderCommentInfo) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderCommentInfo) GetContinueFlag() int32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetDisplayFlag() int32 {
	if x != nil && x.DisplayFlag != nil {
		return *x.DisplayFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetBlacklistFlag() int32 {
	if x != nil && x.BlacklistFlag != nil {
		return *x.BlacklistFlag
	}
	return 0
}

func (x *FinderCommentInfo) GetReplyContent() string {
	if x != nil && x.ReplyContent != nil {
		return *x.ReplyContent
	}
	return ""
}

func (x *FinderCommentInfo) GetReplyUsername() string {
	if x != nil && x.ReplyUsername != nil {
		return *x.ReplyUsername
	}
	return ""
}

func (x *FinderCommentInfo) GetClientId() string {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return ""
}

func (x *FinderCommentInfo) GetUpContinueFlag() int32 {
	if x != nil && x.UpContinueFlag != nil {
		return *x.UpContinueFlag
	}
	return 0
}

type FinderAuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional  string realName = 1;
	// optional  int32 authIconType = 2;
	// optional  string authProfession = 3;
	// optional  FinderContact authGuarantor = 4;
	// optional  string detailLink = 5;
	// optional  string appName = 6;
	V1           *string `protobuf:"bytes,1,opt,name=v1" json:"v1,omitempty"`
	AuthIconType *int32  `protobuf:"varint,2,opt,name=authIconType" json:"authIconType,omitempty"`
	RealName     *string `protobuf:"bytes,3,opt,name=realName" json:"realName,omitempty"`
	Photo        *string `protobuf:"bytes,7,opt,name=photo" json:"photo,omitempty"`
	V8           *int32  `protobuf:"varint,8,opt,name=v8" json:"v8,omitempty"`
	V9           *int32  `protobuf:"varint,9,opt,name=v9" json:"v9,omitempty"`
}

func (x *FinderAuthInfo) Reset() {
	*x = FinderAuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderAuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderAuthInfo) ProtoMessage() {}

func (x *FinderAuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderAuthInfo.ProtoReflect.Descriptor instead.
func (*FinderAuthInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{55}
}

func (x *FinderAuthInfo) GetV1() string {
	if x != nil && x.V1 != nil {
		return *x.V1
	}
	return ""
}

func (x *FinderAuthInfo) GetAuthIconType() int32 {
	if x != nil && x.AuthIconType != nil {
		return *x.AuthIconType
	}
	return 0
}

func (x *FinderAuthInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *FinderAuthInfo) GetPhoto() string {
	if x != nil && x.Photo != nil {
		return *x.Photo
	}
	return ""
}

func (x *FinderAuthInfo) GetV8() int32 {
	if x != nil && x.V8 != nil {
		return *x.V8
	}
	return 0
}

func (x *FinderAuthInfo) GetV9() int32 {
	if x != nil && x.V9 != nil {
		return *x.V9
	}
	return 0
}

type FinderContactExtInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country    *string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
	Province   *string `protobuf:"bytes,2,opt,name=province" json:"province,omitempty"`
	City       *string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	Sex        *int32  `protobuf:"varint,4,opt,name=sex" json:"sex,omitempty"`
	BirthYear  *int32  `protobuf:"varint,5,opt,name=birthYear" json:"birthYear,omitempty"`
	BirthMonth *int32  `protobuf:"varint,6,opt,name=birthMonth" json:"birthMonth,omitempty"`
	BirthDay   *int32  `protobuf:"varint,7,opt,name=birthDay" json:"birthDay,omitempty"`
}

func (x *FinderContactExtInfo) Reset() {
	*x = FinderContactExtInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContactExtInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContactExtInfo) ProtoMessage() {}

func (x *FinderContactExtInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContactExtInfo.ProtoReflect.Descriptor instead.
func (*FinderContactExtInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{56}
}

func (x *FinderContactExtInfo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *FinderContactExtInfo) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *FinderContactExtInfo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *FinderContactExtInfo) GetSex() int32 {
	if x != nil && x.Sex != nil {
		return *x.Sex
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthYear() int32 {
	if x != nil && x.BirthYear != nil {
		return *x.BirthYear
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthMonth() int32 {
	if x != nil && x.BirthMonth != nil {
		return *x.BirthMonth
	}
	return 0
}

func (x *FinderContactExtInfo) GetBirthDay() int32 {
	if x != nil && x.BirthDay != nil {
		return *x.BirthDay
	}
	return 0
}

type FinderContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     *string               `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Nickname     *string               `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	HeadUrl      *string               `protobuf:"bytes,3,opt,name=headUrl" json:"headUrl,omitempty"`
	Seq          *uint64               `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
	Signature    *string               `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	FollowFlag   *int32                `protobuf:"varint,6,opt,name=followFlag" json:"followFlag,omitempty"`
	FollowTime   *int32                `protobuf:"varint,7,opt,name=followTime" json:"followTime,omitempty"`
	AuthInfo     *FinderAuthInfo       `protobuf:"bytes,8,opt,name=authInfo" json:"authInfo,omitempty"`
	CoverImgUrl  *string               `protobuf:"bytes,9,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	SpamStatus   *int32                `protobuf:"varint,10,opt,name=spamStatus" json:"spamStatus,omitempty"`
	ExtFlag      *int32                `protobuf:"varint,11,opt,name=extFlag" json:"extFlag,omitempty"`
	ExtInfo      *FinderContactExtInfo `protobuf:"bytes,12,opt,name=extInfo" json:"extInfo,omitempty"`
	OriginalFlag *int32                `protobuf:"varint,13,opt,name=originalFlag" json:"originalFlag,omitempty"`
}

func (x *FinderContact) Reset() {
	*x = FinderContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderContact) ProtoMessage() {}

func (x *FinderContact) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderContact.ProtoReflect.Descriptor instead.
func (*FinderContact) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{57}
}

func (x *FinderContact) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderContact) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderContact) GetHeadUrl() string {
	if x != nil && x.HeadUrl != nil {
		return *x.HeadUrl
	}
	return ""
}

func (x *FinderContact) GetSeq() uint64 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return 0
}

func (x *FinderContact) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *FinderContact) GetFollowFlag() int32 {
	if x != nil && x.FollowFlag != nil {
		return *x.FollowFlag
	}
	return 0
}

func (x *FinderContact) GetFollowTime() int32 {
	if x != nil && x.FollowTime != nil {
		return *x.FollowTime
	}
	return 0
}

func (x *FinderContact) GetAuthInfo() *FinderAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

func (x *FinderContact) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderContact) GetSpamStatus() int32 {
	if x != nil && x.SpamStatus != nil {
		return *x.SpamStatus
	}
	return 0
}

func (x *FinderContact) GetExtFlag() int32 {
	if x != nil && x.ExtFlag != nil {
		return *x.ExtFlag
	}
	return 0
}

func (x *FinderContact) GetExtInfo() *FinderContactExtInfo {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *FinderContact) GetOriginalFlag() int32 {
	if x != nil && x.OriginalFlag != nil {
		return *x.OriginalFlag
	}
	return 0
}

type ByNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByNum *uint64 `protobuf:"varint,1,opt,name=byNum" json:"byNum,omitempty"`
}

func (x *ByNumber) Reset() {
	*x = ByNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByNumber) ProtoMessage() {}

func (x *ByNumber) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByNumber.ProtoReflect.Descriptor instead.
func (*ByNumber) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{58}
}

func (x *ByNumber) GetByNum() uint64 {
	if x != nil && x.ByNum != nil {
		return *x.ByNum
	}
	return 0
}

type ByTabMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByNum      *uint64 `protobuf:"varint,1,opt,name=byNum" json:"byNum,omitempty"`
	ByTabTitle *string `protobuf:"bytes,2,opt,name=byTabTitle" json:"byTabTitle,omitempty"`
}

func (x *ByTabMsg) Reset() {
	*x = ByTabMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByTabMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByTabMsg) ProtoMessage() {}

func (x *ByTabMsg) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByTabMsg.ProtoReflect.Descriptor instead.
func (*ByTabMsg) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{59}
}

func (x *ByTabMsg) GetByNum() uint64 {
	if x != nil && x.ByNum != nil {
		return *x.ByNum
	}
	return 0
}

func (x *ByTabMsg) GetByTabTitle() string {
	if x != nil && x.ByTabTitle != nil {
		return *x.ByTabTitle
	}
	return ""
}

type FinderObjDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetId      *uint64   `protobuf:"varint,1,opt,name=detId" json:"detId,omitempty"`
	Det2       *uint64   `protobuf:"varint,2,opt,name=det2" json:"det2,omitempty"`
	Det3       *uint64   `protobuf:"varint,3,opt,name=det3" json:"det3,omitempty"`
	VideoUrl   *string   `protobuf:"bytes,4,opt,name=videoUrl" json:"videoUrl,omitempty"`
	TimesTime  *uint64   `protobuf:"varint,5,opt,name=timesTime" json:"timesTime,omitempty"`
	LikeNumber *uint64   `protobuf:"varint,6,opt,name=likeNumber" json:"likeNumber,omitempty"`
	Nu7        *uint64   `protobuf:"varint,7,opt,name=nu7" json:"nu7,omitempty"`
	ByNumber   *ByNumber `protobuf:"bytes,10,opt,name=byNumber" json:"byNumber,omitempty"`
	LookNumber *uint64   `protobuf:"varint,11,opt,name=lookNumber" json:"lookNumber,omitempty"`
	Nu13       *uint64   `protobuf:"varint,13,opt,name=nu13" json:"nu13,omitempty"`
	Tab        *ByTabMsg `protobuf:"bytes,16,opt,name=tab" json:"tab,omitempty"`
}

func (x *FinderObjDetails) Reset() {
	*x = FinderObjDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObjDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObjDetails) ProtoMessage() {}

func (x *FinderObjDetails) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObjDetails.ProtoReflect.Descriptor instead.
func (*FinderObjDetails) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{60}
}

func (x *FinderObjDetails) GetDetId() uint64 {
	if x != nil && x.DetId != nil {
		return *x.DetId
	}
	return 0
}

func (x *FinderObjDetails) GetDet2() uint64 {
	if x != nil && x.Det2 != nil {
		return *x.Det2
	}
	return 0
}

func (x *FinderObjDetails) GetDet3() uint64 {
	if x != nil && x.Det3 != nil {
		return *x.Det3
	}
	return 0
}

func (x *FinderObjDetails) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

func (x *FinderObjDetails) GetTimesTime() uint64 {
	if x != nil && x.TimesTime != nil {
		return *x.TimesTime
	}
	return 0
}

func (x *FinderObjDetails) GetLikeNumber() uint64 {
	if x != nil && x.LikeNumber != nil {
		return *x.LikeNumber
	}
	return 0
}

func (x *FinderObjDetails) GetNu7() uint64 {
	if x != nil && x.Nu7 != nil {
		return *x.Nu7
	}
	return 0
}

func (x *FinderObjDetails) GetByNumber() *ByNumber {
	if x != nil {
		return x.ByNumber
	}
	return nil
}

func (x *FinderObjDetails) GetLookNumber() uint64 {
	if x != nil && x.LookNumber != nil {
		return *x.LookNumber
	}
	return 0
}

func (x *FinderObjDetails) GetNu13() uint64 {
	if x != nil && x.Nu13 != nil {
		return *x.Nu13
	}
	return 0
}

func (x *FinderObjDetails) GetTab() *ByTabMsg {
	if x != nil {
		return x.Tab
	}
	return nil
}

// 疑似不对
type FinderRecommendInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid               *string `protobuf:"bytes,1,opt,name=tid" json:"tid,omitempty"`
	RecommendType     *uint32 `protobuf:"varint,2,opt,name=recommendType" json:"recommendType,omitempty"`
	RecommendReason   *string `protobuf:"bytes,3,opt,name=recommendReason" json:"recommendReason,omitempty"`
	OrgRecommendType  *uint32 `protobuf:"varint,4,opt,name=orgRecommendType" json:"orgRecommendType,omitempty"`
	LastInsertedRowID *uint32 `protobuf:"varint,5,opt,name=lastInsertedRowID" json:"lastInsertedRowID,omitempty"`
	IsAutoIncrement   *bool   `protobuf:"varint,6,opt,name=isAutoIncrement" json:"isAutoIncrement,omitempty"`
}

func (x *FinderRecommendInfo) Reset() {
	*x = FinderRecommendInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderRecommendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderRecommendInfo) ProtoMessage() {}

func (x *FinderRecommendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderRecommendInfo.ProtoReflect.Descriptor instead.
func (*FinderRecommendInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{61}
}

func (x *FinderRecommendInfo) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *FinderRecommendInfo) GetRecommendType() uint32 {
	if x != nil && x.RecommendType != nil {
		return *x.RecommendType
	}
	return 0
}

func (x *FinderRecommendInfo) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

func (x *FinderRecommendInfo) GetOrgRecommendType() uint32 {
	if x != nil && x.OrgRecommendType != nil {
		return *x.OrgRecommendType
	}
	return 0
}

func (x *FinderRecommendInfo) GetLastInsertedRowID() uint32 {
	if x != nil && x.LastInsertedRowID != nil {
		return *x.LastInsertedRowID
	}
	return 0
}

func (x *FinderRecommendInfo) GetIsAutoIncrement() bool {
	if x != nil && x.IsAutoIncrement != nil {
		return *x.IsAutoIncrement
	}
	return false
}

type FinderObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *uint64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FinderObjectID      *string                `protobuf:"bytes,100,opt,name=finderObjectID" json:"finderObjectID,omitempty"`
	Nickname            *string                `protobuf:"bytes,2,opt,name=nickname" json:"nickname,omitempty"`
	Username            *string                `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	ObjectDesc          *FinderObjectDesc      `protobuf:"bytes,4,opt,name=objectDesc" json:"objectDesc,omitempty"`
	Createtime          *int32                 `protobuf:"varint,5,opt,name=createtime" json:"createtime,omitempty"`
	LikeFlag            *int32                 `protobuf:"varint,6,opt,name=likeFlag" json:"likeFlag,omitempty"`
	LikeList            [][]byte               `protobuf:"bytes,7,rep,name=likeList" json:"likeList,omitempty"` //未找到相关PB
	CommentList         []*FinderCommentInfo   `protobuf:"bytes,8,rep,name=commentList" json:"commentList,omitempty"`
	ForwardCount        *int32                 `protobuf:"varint,9,opt,name=forwardCount" json:"forwardCount,omitempty"`
	Contact             *FinderContact         `protobuf:"bytes,10,opt,name=contact" json:"contact,omitempty"`
	DisplayidDiscarded  *string                `protobuf:"bytes,11,opt,name=displayidDiscarded" json:"displayidDiscarded,omitempty"`
	RecommenderList     []*FinderRecommendInfo `protobuf:"bytes,12,rep,name=recommenderList" json:"recommenderList,omitempty"` //疑似PB不对
	Displayid           *uint64                `protobuf:"varint,13,opt,name=displayid" json:"displayid,omitempty"`
	LikeCount           *int32                 `protobuf:"varint,14,opt,name=likeCount" json:"likeCount,omitempty"`
	CommentCount        *int32                 `protobuf:"varint,15,opt,name=commentCount" json:"commentCount,omitempty"`
	RecommendReason     *string                `protobuf:"bytes,16,opt,name=recommendReason" json:"recommendReason,omitempty"`
	ReadCount           *int32                 `protobuf:"varint,17,opt,name=readCount" json:"readCount,omitempty"`
	Deletetime          *int32                 `protobuf:"varint,18,opt,name=deletetime" json:"deletetime,omitempty"`
	CommentClose        *int32                 `protobuf:"varint,19,opt,name=commentClose" json:"commentClose,omitempty"`
	RefObjectFlag       *uint32                `protobuf:"varint,20,opt,name=refObjectFlag" json:"refObjectFlag,omitempty"`
	RefObjectid         *uint32                `protobuf:"varint,21,opt,name=refObjectid" json:"refObjectid,omitempty"`
	RefObjectContact    *FinderContact         `protobuf:"bytes,22,opt,name=refObjectContact" json:"refObjectContact,omitempty"`
	RecommendType       *int32                 `protobuf:"varint,23,opt,name=recommendType" json:"recommendType,omitempty"`
	FriendLikeCount     *int32                 `protobuf:"varint,24,opt,name=friendLikeCount" json:"friendLikeCount,omitempty"`
	ObjectNonceId       *string                `protobuf:"bytes,25,opt,name=objectNonceId" json:"objectNonceId,omitempty"`
	RefObjectNonceId    *string                `protobuf:"bytes,26,opt,name=refObjectNonceId" json:"refObjectNonceId,omitempty"`
	ObjectStatus        *int32                 `protobuf:"varint,27,opt,name=objectStatus" json:"objectStatus,omitempty"`
	SendShareFavWording *string                `protobuf:"bytes,28,opt,name=sendShareFavWording" json:"sendShareFavWording,omitempty"`
	OriginalFlag        *int32                 `protobuf:"varint,29,opt,name=originalFlag" json:"originalFlag,omitempty"`
	SecondaryShowFlag   *int32                 `protobuf:"varint,30,opt,name=secondaryShowFlag" json:"secondaryShowFlag,omitempty"`
	TipsWording         *string                `protobuf:"bytes,31,opt,name=tipsWording" json:"tipsWording,omitempty"`
	OrgRecommendType    *int32                 `protobuf:"varint,32,opt,name=orgRecommendType" json:"orgRecommendType,omitempty"`
	EnKey               *string                `protobuf:"bytes,34,opt,name=enKey" json:"enKey,omitempty"`
	FinderObjDetails    *FinderObjDetails      `protobuf:"bytes,37,opt,name=finderObjDetails" json:"finderObjDetails,omitempty"`
	Unk38               *uint64                `protobuf:"varint,38,opt,name=unk38" json:"unk38,omitempty"`
	Unk39               *uint64                `protobuf:"varint,39,opt,name=unk39" json:"unk39,omitempty"`
	Unk43               *uint64                `protobuf:"varint,43,opt,name=unk43" json:"unk43,omitempty"`
	Unk44               *uint64                `protobuf:"varint,44,opt,name=unk44" json:"unk44,omitempty"`
	Unk57               *uint64                `protobuf:"varint,57,opt,name=unk57" json:"unk57,omitempty"`
}

func (x *FinderObject) Reset() {
	*x = FinderObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderObject) ProtoMessage() {}

func (x *FinderObject) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderObject.ProtoReflect.Descriptor instead.
func (*FinderObject) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{62}
}

func (x *FinderObject) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderObject) GetFinderObjectID() string {
	if x != nil && x.FinderObjectID != nil {
		return *x.FinderObjectID
	}
	return ""
}

func (x *FinderObject) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *FinderObject) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderObject) GetObjectDesc() *FinderObjectDesc {
	if x != nil {
		return x.ObjectDesc
	}
	return nil
}

func (x *FinderObject) GetCreatetime() int32 {
	if x != nil && x.Createtime != nil {
		return *x.Createtime
	}
	return 0
}

func (x *FinderObject) GetLikeFlag() int32 {
	if x != nil && x.LikeFlag != nil {
		return *x.LikeFlag
	}
	return 0
}

func (x *FinderObject) GetLikeList() [][]byte {
	if x != nil {
		return x.LikeList
	}
	return nil
}

func (x *FinderObject) GetCommentList() []*FinderCommentInfo {
	if x != nil {
		return x.CommentList
	}
	return nil
}

func (x *FinderObject) GetForwardCount() int32 {
	if x != nil && x.ForwardCount != nil {
		return *x.ForwardCount
	}
	return 0
}

func (x *FinderObject) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderObject) GetDisplayidDiscarded() string {
	if x != nil && x.DisplayidDiscarded != nil {
		return *x.DisplayidDiscarded
	}
	return ""
}

func (x *FinderObject) GetRecommenderList() []*FinderRecommendInfo {
	if x != nil {
		return x.RecommenderList
	}
	return nil
}

func (x *FinderObject) GetDisplayid() uint64 {
	if x != nil && x.Displayid != nil {
		return *x.Displayid
	}
	return 0
}

func (x *FinderObject) GetLikeCount() int32 {
	if x != nil && x.LikeCount != nil {
		return *x.LikeCount
	}
	return 0
}

func (x *FinderObject) GetCommentCount() int32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *FinderObject) GetRecommendReason() string {
	if x != nil && x.RecommendReason != nil {
		return *x.RecommendReason
	}
	return ""
}

func (x *FinderObject) GetReadCount() int32 {
	if x != nil && x.ReadCount != nil {
		return *x.ReadCount
	}
	return 0
}

func (x *FinderObject) GetDeletetime() int32 {
	if x != nil && x.Deletetime != nil {
		return *x.Deletetime
	}
	return 0
}

func (x *FinderObject) GetCommentClose() int32 {
	if x != nil && x.CommentClose != nil {
		return *x.CommentClose
	}
	return 0
}

func (x *FinderObject) GetRefObjectFlag() uint32 {
	if x != nil && x.RefObjectFlag != nil {
		return *x.RefObjectFlag
	}
	return 0
}

func (x *FinderObject) GetRefObjectid() uint32 {
	if x != nil && x.RefObjectid != nil {
		return *x.RefObjectid
	}
	return 0
}

func (x *FinderObject) GetRefObjectContact() *FinderContact {
	if x != nil {
		return x.RefObjectContact
	}
	return nil
}

func (x *FinderObject) GetRecommendType() int32 {
	if x != nil && x.RecommendType != nil {
		return *x.RecommendType
	}
	return 0
}

func (x *FinderObject) GetFriendLikeCount() int32 {
	if x != nil && x.FriendLikeCount != nil {
		return *x.FriendLikeCount
	}
	return 0
}

func (x *FinderObject) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderObject) GetRefObjectNonceId() string {
	if x != nil && x.RefObjectNonceId != nil {
		return *x.RefObjectNonceId
	}
	return ""
}

func (x *FinderObject) GetObjectStatus() int32 {
	if x != nil && x.ObjectStatus != nil {
		return *x.ObjectStatus
	}
	return 0
}

func (x *FinderObject) GetSendShareFavWording() string {
	if x != nil && x.SendShareFavWording != nil {
		return *x.SendShareFavWording
	}
	return ""
}

func (x *FinderObject) GetOriginalFlag() int32 {
	if x != nil && x.OriginalFlag != nil {
		return *x.OriginalFlag
	}
	return 0
}

func (x *FinderObject) GetSecondaryShowFlag() int32 {
	if x != nil && x.SecondaryShowFlag != nil {
		return *x.SecondaryShowFlag
	}
	return 0
}

func (x *FinderObject) GetTipsWording() string {
	if x != nil && x.TipsWording != nil {
		return *x.TipsWording
	}
	return ""
}

func (x *FinderObject) GetOrgRecommendType() int32 {
	if x != nil && x.OrgRecommendType != nil {
		return *x.OrgRecommendType
	}
	return 0
}

func (x *FinderObject) GetEnKey() string {
	if x != nil && x.EnKey != nil {
		return *x.EnKey
	}
	return ""
}

func (x *FinderObject) GetFinderObjDetails() *FinderObjDetails {
	if x != nil {
		return x.FinderObjDetails
	}
	return nil
}

func (x *FinderObject) GetUnk38() uint64 {
	if x != nil && x.Unk38 != nil {
		return *x.Unk38
	}
	return 0
}

func (x *FinderObject) GetUnk39() uint64 {
	if x != nil && x.Unk39 != nil {
		return *x.Unk39
	}
	return 0
}

func (x *FinderObject) GetUnk43() uint64 {
	if x != nil && x.Unk43 != nil {
		return *x.Unk43
	}
	return 0
}

func (x *FinderObject) GetUnk44() uint64 {
	if x != nil && x.Unk44 != nil {
		return *x.Unk44
	}
	return 0
}

func (x *FinderObject) GetUnk57() uint64 {
	if x != nil && x.Unk57 != nil {
		return *x.Unk57
	}
	return 0
}

type FinderCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse   *BaseResponse        `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	CommentId      *uint64              `protobuf:"varint,2,opt,name=CommentId" json:"CommentId,omitempty"`
	Clientid       *string              `protobuf:"bytes,3,opt,name=Clientid" json:"Clientid,omitempty"`
	Object         *FinderObject        `protobuf:"bytes,4,opt,name=Object" json:"Object,omitempty"`
	ExposedComment []*FinderCommentInfo `protobuf:"bytes,5,rep,name=ExposedComment" json:"ExposedComment,omitempty"`
}

func (x *FinderCommentResponse) Reset() {
	*x = FinderCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderCommentResponse) ProtoMessage() {}

func (x *FinderCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderCommentResponse.ProtoReflect.Descriptor instead.
func (*FinderCommentResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{63}
}

func (x *FinderCommentResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderCommentResponse) GetCommentId() uint64 {
	if x != nil && x.CommentId != nil {
		return *x.CommentId
	}
	return 0
}

func (x *FinderCommentResponse) GetClientid() string {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return ""
}

func (x *FinderCommentResponse) GetObject() *FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderCommentResponse) GetExposedComment() []*FinderCommentInfo {
	if x != nil {
		return x.ExposedComment
	}
	return nil
}

type FinderFollowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest      *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	PosterUsername   *string            `protobuf:"bytes,2,opt,name=PosterUsername" json:"PosterUsername,omitempty"`
	Optype           *uint32            `protobuf:"varint,3,opt,name=Optype" json:"Optype,omitempty"`
	RefObjectid      *uint32            `protobuf:"varint,4,opt,name=RefObjectid" json:"RefObjectid,omitempty"`
	FinderUsername   *string            `protobuf:"bytes,5,opt,name=FinderUsername" json:"FinderUsername,omitempty"`
	RefObjectNonceId *string            `protobuf:"bytes,6,opt,name=RefObjectNonceId" json:"RefObjectNonceId,omitempty"`
	FinderBasereq    *FinderBaseRequest `protobuf:"bytes,7,opt,name=FinderBasereq" json:"FinderBasereq,omitempty"`
	SessionBuffer    *string            `protobuf:"bytes,8,opt,name=SessionBuffer" json:"SessionBuffer,omitempty"`
	EnterType        *uint32            `protobuf:"varint,9,opt,name=EnterType" json:"EnterType,omitempty"`
}

func (x *FinderFollowRequest) Reset() {
	*x = FinderFollowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFollowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFollowRequest) ProtoMessage() {}

func (x *FinderFollowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFollowRequest.ProtoReflect.Descriptor instead.
func (*FinderFollowRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{64}
}

func (x *FinderFollowRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderFollowRequest) GetPosterUsername() string {
	if x != nil && x.PosterUsername != nil {
		return *x.PosterUsername
	}
	return ""
}

func (x *FinderFollowRequest) GetOptype() uint32 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderFollowRequest) GetRefObjectid() uint32 {
	if x != nil && x.RefObjectid != nil {
		return *x.RefObjectid
	}
	return 0
}

func (x *FinderFollowRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderFollowRequest) GetRefObjectNonceId() string {
	if x != nil && x.RefObjectNonceId != nil {
		return *x.RefObjectNonceId
	}
	return ""
}

func (x *FinderFollowRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderFollowRequest) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderFollowRequest) GetEnterType() uint32 {
	if x != nil && x.EnterType != nil {
		return *x.EnterType
	}
	return 0
}

type FinderFollowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *FinderFollowResponse) Reset() {
	*x = FinderFollowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderFollowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderFollowResponse) ProtoMessage() {}

func (x *FinderFollowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderFollowResponse.ProtoReflect.Descriptor instead.
func (*FinderFollowResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{65}
}

func (x *FinderFollowResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FinderGetCommentDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Objectid          *uint64            `protobuf:"varint,2,opt,name=Objectid" json:"Objectid,omitempty"`
	MaxCommentId      *uint64            `protobuf:"varint,3,opt,name=MaxCommentId" json:"MaxCommentId,omitempty"`
	NeedObject        *uint32            `protobuf:"varint,4,opt,name=NeedObject" json:"NeedObject,omitempty"`
	LastBuffer        []byte             `protobuf:"bytes,5,opt,name=LastBuffer" json:"LastBuffer,omitempty"`
	RootCommentId     *uint64            `protobuf:"varint,6,opt,name=RootCommentId" json:"RootCommentId,omitempty"`
	FinderUsername    *string            `protobuf:"bytes,7,opt,name=FinderUsername" json:"FinderUsername,omitempty"`
	RefCommentId      *uint64            `protobuf:"varint,8,opt,name=RefCommentId" json:"RefCommentId,omitempty"`
	Scene             *uint32            `protobuf:"varint,9,opt,name=Scene" json:"Scene,omitempty"`
	Direction         *uint32            `protobuf:"varint,10,opt,name=Direction" json:"Direction,omitempty"`
	EncryptedObjectid *string            `protobuf:"bytes,11,opt,name=EncryptedObjectid" json:"EncryptedObjectid,omitempty"`
	ObjectNonceId     *string            `protobuf:"bytes,12,opt,name=ObjectNonceId" json:"ObjectNonceId,omitempty"`
	FinderBasereq     *FinderBaseRequest `protobuf:"bytes,13,opt,name=FinderBasereq" json:"FinderBasereq,omitempty"`
	IdentityScene     *uint32            `protobuf:"varint,14,opt,name=IdentityScene" json:"IdentityScene,omitempty"`
	Scene15           *uint32            `protobuf:"varint,15,opt,name=scene15" json:"scene15,omitempty"`
	SceneAll16        *string            `protobuf:"bytes,16,opt,name=sceneAll16" json:"sceneAll16,omitempty"`
}

func (x *FinderGetCommentDetailRequest) Reset() {
	*x = FinderGetCommentDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetCommentDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetCommentDetailRequest) ProtoMessage() {}

func (x *FinderGetCommentDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetCommentDetailRequest.ProtoReflect.Descriptor instead.
func (*FinderGetCommentDetailRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{66}
}

func (x *FinderGetCommentDetailRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetMaxCommentId() uint64 {
	if x != nil && x.MaxCommentId != nil {
		return *x.MaxCommentId
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetNeedObject() uint32 {
	if x != nil && x.NeedObject != nil {
		return *x.NeedObject
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetRootCommentId() uint64 {
	if x != nil && x.RootCommentId != nil {
		return *x.RootCommentId
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetCommentDetailRequest) GetRefCommentId() uint64 {
	if x != nil && x.RefCommentId != nil {
		return *x.RefCommentId
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetDirection() uint32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetEncryptedObjectid() string {
	if x != nil && x.EncryptedObjectid != nil {
		return *x.EncryptedObjectid
	}
	return ""
}

func (x *FinderGetCommentDetailRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderGetCommentDetailRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderGetCommentDetailRequest) GetIdentityScene() uint32 {
	if x != nil && x.IdentityScene != nil {
		return *x.IdentityScene
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetScene15() uint32 {
	if x != nil && x.Scene15 != nil {
		return *x.Scene15
	}
	return 0
}

func (x *FinderGetCommentDetailRequest) GetSceneAll16() string {
	if x != nil && x.SceneAll16 != nil {
		return *x.SceneAll16
	}
	return ""
}

type FinderGetCommentDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse          *BaseResponse        `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	CommentInfo           []*FinderCommentInfo `protobuf:"bytes,2,rep,name=CommentInfo" json:"CommentInfo,omitempty"`
	Object                *FinderObject        `protobuf:"bytes,3,opt,name=Object" json:"Object,omitempty"`
	LastBuffer            []byte               `protobuf:"bytes,4,opt,name=LastBuffer" json:"LastBuffer,omitempty"`
	CommentCount          *uint32              `protobuf:"varint,5,opt,name=CommentCount" json:"CommentCount,omitempty"`
	UpContinueFlag        *uint32              `protobuf:"varint,6,opt,name=UpContinueFlag" json:"UpContinueFlag,omitempty"`
	DownContinueFlag      *uint32              `protobuf:"varint,7,opt,name=DownContinueFlag" json:"DownContinueFlag,omitempty"`
	NextCheckObjectStatus *uint32              `protobuf:"varint,8,opt,name=NextCheckObjectStatus" json:"NextCheckObjectStatus,omitempty"`
	SecondaryShowFlag     *uint32              `protobuf:"varint,9,opt,name=SecondaryShowFlag" json:"SecondaryShowFlag,omitempty"`
}

func (x *FinderGetCommentDetailResponse) Reset() {
	*x = FinderGetCommentDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetCommentDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetCommentDetailResponse) ProtoMessage() {}

func (x *FinderGetCommentDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetCommentDetailResponse.ProtoReflect.Descriptor instead.
func (*FinderGetCommentDetailResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{67}
}

func (x *FinderGetCommentDetailResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetCommentInfo() []*FinderCommentInfo {
	if x != nil {
		return x.CommentInfo
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetObject() *FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetCommentDetailResponse) GetCommentCount() uint32 {
	if x != nil && x.CommentCount != nil {
		return *x.CommentCount
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetUpContinueFlag() uint32 {
	if x != nil && x.UpContinueFlag != nil {
		return *x.UpContinueFlag
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetDownContinueFlag() uint32 {
	if x != nil && x.DownContinueFlag != nil {
		return *x.DownContinueFlag
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetNextCheckObjectStatus() uint32 {
	if x != nil && x.NextCheckObjectStatus != nil {
		return *x.NextCheckObjectStatus
	}
	return 0
}

func (x *FinderGetCommentDetailResponse) GetSecondaryShowFlag() uint32 {
	if x != nil && x.SecondaryShowFlag != nil {
		return *x.SecondaryShowFlag
	}
	return 0
}

type FinderLikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Objectid       *uint64            `protobuf:"varint,2,opt,name=Objectid" json:"Objectid,omitempty"`
	Commentid      *uint64            `protobuf:"varint,3,opt,name=Commentid" json:"Commentid,omitempty"`
	Optype         *uint64            `protobuf:"varint,4,opt,name=Optype" json:"Optype,omitempty"`
	Likeid         *uint64            `protobuf:"varint,5,opt,name=Likeid" json:"Likeid,omitempty"`
	CurLikeCount   *uint32            `protobuf:"varint,6,opt,name=CurLikeCount" json:"CurLikeCount,omitempty"`
	FinderUsername *string            `protobuf:"bytes,7,opt,name=FinderUsername" json:"FinderUsername,omitempty"`
	Scene          *uint32            `protobuf:"varint,8,opt,name=Scene" json:"Scene,omitempty"`
	ObjectNonceId  *string            `protobuf:"bytes,9,opt,name=ObjectNonceId" json:"ObjectNonceId,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,10,opt,name=FinderBasereq" json:"FinderBasereq,omitempty"`
	SessionBuffer  *string            `protobuf:"bytes,11,opt,name=SessionBuffer" json:"SessionBuffer,omitempty"`
	LikeUsername   *string            `protobuf:"bytes,12,opt,name=LikeUsername" json:"LikeUsername,omitempty"`
}

func (x *FinderLikeRequest) Reset() {
	*x = FinderLikeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLikeRequest) ProtoMessage() {}

func (x *FinderLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLikeRequest.ProtoReflect.Descriptor instead.
func (*FinderLikeRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{68}
}

func (x *FinderLikeRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderLikeRequest) GetObjectid() uint64 {
	if x != nil && x.Objectid != nil {
		return *x.Objectid
	}
	return 0
}

func (x *FinderLikeRequest) GetCommentid() uint64 {
	if x != nil && x.Commentid != nil {
		return *x.Commentid
	}
	return 0
}

func (x *FinderLikeRequest) GetOptype() uint64 {
	if x != nil && x.Optype != nil {
		return *x.Optype
	}
	return 0
}

func (x *FinderLikeRequest) GetLikeid() uint64 {
	if x != nil && x.Likeid != nil {
		return *x.Likeid
	}
	return 0
}

func (x *FinderLikeRequest) GetCurLikeCount() uint32 {
	if x != nil && x.CurLikeCount != nil {
		return *x.CurLikeCount
	}
	return 0
}

func (x *FinderLikeRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderLikeRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderLikeRequest) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderLikeRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderLikeRequest) GetSessionBuffer() string {
	if x != nil && x.SessionBuffer != nil {
		return *x.SessionBuffer
	}
	return ""
}

func (x *FinderLikeRequest) GetLikeUsername() string {
	if x != nil && x.LikeUsername != nil {
		return *x.LikeUsername
	}
	return ""
}

type FinderLikeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse *BaseResponse `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
}

func (x *FinderLikeResponse) Reset() {
	*x = FinderLikeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderLikeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderLikeResponse) ProtoMessage() {}

func (x *FinderLikeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderLikeResponse.ProtoReflect.Descriptor instead.
func (*FinderLikeResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{69}
}

func (x *FinderLikeResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

type FinderSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	Query         *string            `protobuf:"bytes,2,opt,name=Query" json:"Query,omitempty"`
	Offset        *uint32            `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	LastBuff      []byte             `protobuf:"bytes,4,opt,name=LastBuff" json:"LastBuff,omitempty"`
	Scene         *uint32            `protobuf:"varint,5,opt,name=Scene" json:"Scene,omitempty"`
	RequestId     *string            `protobuf:"bytes,6,opt,name=RequestId" json:"RequestId,omitempty"`
	FinderBasereq *FinderBaseRequest `protobuf:"bytes,7,opt,name=FinderBasereq" json:"FinderBasereq,omitempty"`
}

func (x *FinderSearchRequest) Reset() {
	*x = FinderSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchRequest) ProtoMessage() {}

func (x *FinderSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchRequest.ProtoReflect.Descriptor instead.
func (*FinderSearchRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{70}
}

func (x *FinderSearchRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderSearchRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *FinderSearchRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *FinderSearchRequest) GetLastBuff() []byte {
	if x != nil {
		return x.LastBuff
	}
	return nil
}

func (x *FinderSearchRequest) GetScene() uint32 {
	if x != nil && x.Scene != nil {
		return *x.Scene
	}
	return 0
}

func (x *FinderSearchRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *FinderSearchRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

type FinderJoinLiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest   *BaseRequest           `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	FinderBasereq *FinderBaseRequestPlus `protobuf:"bytes,2,opt,name=FinderBasereq" json:"FinderBasereq,omitempty"`
	Dt1           *uint64                `protobuf:"varint,3,opt,name=Dt1" json:"Dt1,omitempty"`
	Jlr           *string                `protobuf:"bytes,4,opt,name=Jlr" json:"Jlr,omitempty"`
	JlrId         *uint64                `protobuf:"varint,5,opt,name=JlrId" json:"JlrId,omitempty"`
	FinderUser    *string                `protobuf:"bytes,6,opt,name=FinderUser" json:"FinderUser,omitempty"`
	Sce           *uint32                `protobuf:"varint,7,opt,name=Sce" json:"Sce,omitempty"`
	Jlr8          *string                `protobuf:"bytes,8,opt,name=Jlr8" json:"Jlr8,omitempty"`
	ObjectNonceId *string                `protobuf:"bytes,9,opt,name=ObjectNonceId" json:"ObjectNonceId,omitempty"`
	Enk           *string                `protobuf:"bytes,10,opt,name=Enk" json:"Enk,omitempty"`
	Jlr11         *uint32                `protobuf:"varint,11,opt,name=Jlr11" json:"Jlr11,omitempty"`
	Jlr12         *string                `protobuf:"bytes,12,opt,name=Jlr12" json:"Jlr12,omitempty"`
}

func (x *FinderJoinLiveReq) Reset() {
	*x = FinderJoinLiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveReq) ProtoMessage() {}

func (x *FinderJoinLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveReq.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveReq) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{71}
}

func (x *FinderJoinLiveReq) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderJoinLiveReq) GetFinderBasereq() *FinderBaseRequestPlus {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderJoinLiveReq) GetDt1() uint64 {
	if x != nil && x.Dt1 != nil {
		return *x.Dt1
	}
	return 0
}

func (x *FinderJoinLiveReq) GetJlr() string {
	if x != nil && x.Jlr != nil {
		return *x.Jlr
	}
	return ""
}

func (x *FinderJoinLiveReq) GetJlrId() uint64 {
	if x != nil && x.JlrId != nil {
		return *x.JlrId
	}
	return 0
}

func (x *FinderJoinLiveReq) GetFinderUser() string {
	if x != nil && x.FinderUser != nil {
		return *x.FinderUser
	}
	return ""
}

func (x *FinderJoinLiveReq) GetSce() uint32 {
	if x != nil && x.Sce != nil {
		return *x.Sce
	}
	return 0
}

func (x *FinderJoinLiveReq) GetJlr8() string {
	if x != nil && x.Jlr8 != nil {
		return *x.Jlr8
	}
	return ""
}

func (x *FinderJoinLiveReq) GetObjectNonceId() string {
	if x != nil && x.ObjectNonceId != nil {
		return *x.ObjectNonceId
	}
	return ""
}

func (x *FinderJoinLiveReq) GetEnk() string {
	if x != nil && x.Enk != nil {
		return *x.Enk
	}
	return ""
}

func (x *FinderJoinLiveReq) GetJlr11() uint32 {
	if x != nil && x.Jlr11 != nil {
		return *x.Jlr11
	}
	return 0
}

func (x *FinderJoinLiveReq) GetJlr12() string {
	if x != nil && x.Jlr12 != nil {
		return *x.Jlr12
	}
	return ""
}

type FinderSearchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact             *FinderContact `protobuf:"bytes,1,opt,name=Contact" json:"Contact,omitempty"`
	HighlightNickname   *string        `protobuf:"bytes,2,opt,name=HighlightNickname" json:"HighlightNickname,omitempty"`
	HighlightSignature  *string        `protobuf:"bytes,3,opt,name=HighlightSignature" json:"HighlightSignature,omitempty"`
	FansCount           *uint32        `protobuf:"varint,4,opt,name=FansCount" json:"FansCount,omitempty"`
	FriendFollowCount   *uint32        `protobuf:"varint,5,opt,name=FriendFollowCount" json:"FriendFollowCount,omitempty"`
	HighlightProfession *string        `protobuf:"bytes,6,opt,name=HighlightProfession" json:"HighlightProfession,omitempty"`
}

func (x *FinderSearchInfo) Reset() {
	*x = FinderSearchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchInfo) ProtoMessage() {}

func (x *FinderSearchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchInfo.ProtoReflect.Descriptor instead.
func (*FinderSearchInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{72}
}

func (x *FinderSearchInfo) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderSearchInfo) GetHighlightNickname() string {
	if x != nil && x.HighlightNickname != nil {
		return *x.HighlightNickname
	}
	return ""
}

func (x *FinderSearchInfo) GetHighlightSignature() string {
	if x != nil && x.HighlightSignature != nil {
		return *x.HighlightSignature
	}
	return ""
}

func (x *FinderSearchInfo) GetFansCount() uint32 {
	if x != nil && x.FansCount != nil {
		return *x.FansCount
	}
	return 0
}

func (x *FinderSearchInfo) GetFriendFollowCount() uint32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderSearchInfo) GetHighlightProfession() string {
	if x != nil && x.HighlightProfession != nil {
		return *x.HighlightProfession
	}
	return ""
}

type FinderSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse       *BaseResponse       `protobuf:"bytes,1,opt,name=BaseResponse" json:"BaseResponse,omitempty"`
	InfoList           []*FinderSearchInfo `protobuf:"bytes,2,rep,name=InfoList" json:"InfoList,omitempty"`
	Offset             *uint32             `protobuf:"varint,3,opt,name=Offset" json:"Offset,omitempty"`
	ContinueFlag       *uint32             `protobuf:"varint,4,opt,name=ContinueFlag" json:"ContinueFlag,omitempty"`
	ObjectList         []*FinderObject     `protobuf:"bytes,5,rep,name=ObjectList" json:"ObjectList,omitempty"`
	LastBuff           []byte              `protobuf:"bytes,6,opt,name=LastBuff" json:"LastBuff,omitempty"`
	RequsetId          *string             `protobuf:"bytes,7,opt,name=RequsetId" json:"RequsetId,omitempty"`
	TopicInfoList      []*FinderTopic      `protobuf:"bytes,8,rep,name=TopicInfoList" json:"TopicInfoList,omitempty"`
	ObjectContinueFlag *uint32             `protobuf:"varint,9,opt,name=ObjectContinueFlag" json:"ObjectContinueFlag,omitempty"`
	TopicContinueFlag  *uint32             `protobuf:"varint,10,opt,name=TopicContinueFlag" json:"TopicContinueFlag,omitempty"`
}

func (x *FinderSearchResponse) Reset() {
	*x = FinderSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchResponse) ProtoMessage() {}

func (x *FinderSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchResponse.ProtoReflect.Descriptor instead.
func (*FinderSearchResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{73}
}

func (x *FinderSearchResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderSearchResponse) GetInfoList() []*FinderSearchInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

func (x *FinderSearchResponse) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *FinderSearchResponse) GetContinueFlag() uint32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderSearchResponse) GetObjectList() []*FinderObject {
	if x != nil {
		return x.ObjectList
	}
	return nil
}

func (x *FinderSearchResponse) GetLastBuff() []byte {
	if x != nil {
		return x.LastBuff
	}
	return nil
}

func (x *FinderSearchResponse) GetRequsetId() string {
	if x != nil && x.RequsetId != nil {
		return *x.RequsetId
	}
	return ""
}

func (x *FinderSearchResponse) GetTopicInfoList() []*FinderTopic {
	if x != nil {
		return x.TopicInfoList
	}
	return nil
}

func (x *FinderSearchResponse) GetObjectContinueFlag() uint32 {
	if x != nil && x.ObjectContinueFlag != nil {
		return *x.ObjectContinueFlag
	}
	return 0
}

func (x *FinderSearchResponse) GetTopicContinueFlag() uint32 {
	if x != nil && x.TopicContinueFlag != nil {
		return *x.TopicContinueFlag
	}
	return 0
}

type FinderUserPageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest    *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	Username       *string            `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	MaxId          *uint64            `protobuf:"varint,3,opt,name=maxId" json:"maxId,omitempty"`
	FirstPageMd5   *string            `protobuf:"bytes,4,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	FinderUsername *string            `protobuf:"bytes,5,opt,name=finderUsername" json:"finderUsername,omitempty"`
	NeedFansCount  *int32             `protobuf:"varint,6,opt,name=needFansCount" json:"needFansCount,omitempty"`
	FinderBasereq  *FinderBaseRequest `protobuf:"bytes,7,opt,name=finderBasereq" json:"finderBasereq,omitempty"`
	LastBuffer     []byte             `protobuf:"bytes,8,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
}

func (x *FinderUserPageRequest) Reset() {
	*x = FinderUserPageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPageRequest) ProtoMessage() {}

func (x *FinderUserPageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPageRequest.ProtoReflect.Descriptor instead.
func (*FinderUserPageRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{74}
}

func (x *FinderUserPageRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderUserPageRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *FinderUserPageRequest) GetMaxId() uint64 {
	if x != nil && x.MaxId != nil {
		return *x.MaxId
	}
	return 0
}

func (x *FinderUserPageRequest) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *FinderUserPageRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderUserPageRequest) GetNeedFansCount() int32 {
	if x != nil && x.NeedFansCount != nil {
		return *x.NeedFansCount
	}
	return 0
}

func (x *FinderUserPageRequest) GetFinderBasereq() *FinderBaseRequest {
	if x != nil {
		return x.FinderBasereq
	}
	return nil
}

func (x *FinderUserPageRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

type FinderNicknameVerifyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifyPrefix   *string `protobuf:"bytes,1,opt,name=verifyPrefix" json:"verifyPrefix,omitempty"`
	BannerWording  *string `protobuf:"bytes,2,opt,name=bannerWording" json:"bannerWording,omitempty"`
	VerifyLink     *string `protobuf:"bytes,3,opt,name=verifyLink" json:"verifyLink,omitempty"`
	Appname        *string `protobuf:"bytes,4,opt,name=appname" json:"appname,omitempty"`
	VerifyNickname *string `protobuf:"bytes,5,opt,name=verifyNickname" json:"verifyNickname,omitempty"`
	HeadImgUrl     *string `protobuf:"bytes,6,opt,name=headImgUrl" json:"headImgUrl,omitempty"`
	ErrScene       *int32  `protobuf:"varint,7,opt,name=errScene" json:"errScene,omitempty"`
}

func (x *FinderNicknameVerifyInfo) Reset() {
	*x = FinderNicknameVerifyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderNicknameVerifyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderNicknameVerifyInfo) ProtoMessage() {}

func (x *FinderNicknameVerifyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderNicknameVerifyInfo.ProtoReflect.Descriptor instead.
func (*FinderNicknameVerifyInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{75}
}

func (x *FinderNicknameVerifyInfo) GetVerifyPrefix() string {
	if x != nil && x.VerifyPrefix != nil {
		return *x.VerifyPrefix
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetBannerWording() string {
	if x != nil && x.BannerWording != nil {
		return *x.BannerWording
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetVerifyLink() string {
	if x != nil && x.VerifyLink != nil {
		return *x.VerifyLink
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetAppname() string {
	if x != nil && x.Appname != nil {
		return *x.Appname
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetVerifyNickname() string {
	if x != nil && x.VerifyNickname != nil {
		return *x.VerifyNickname
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetHeadImgUrl() string {
	if x != nil && x.HeadImgUrl != nil {
		return *x.HeadImgUrl
	}
	return ""
}

func (x *FinderNicknameVerifyInfo) GetErrScene() int32 {
	if x != nil && x.ErrScene != nil {
		return *x.ErrScene
	}
	return 0
}

type FinderUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoverImgUrl    *string         `protobuf:"bytes,1,opt,name=coverImgUrl" json:"coverImgUrl,omitempty"`
	AuthIconType   *int32          `protobuf:"varint,2,opt,name=authIconType" json:"authIconType,omitempty"`
	AuthProfession *string         `protobuf:"bytes,3,opt,name=authProfession" json:"authProfession,omitempty"`
	AuthInfo       *FinderAuthInfo `protobuf:"bytes,4,opt,name=authInfo" json:"authInfo,omitempty"`
}

func (x *FinderUserInfo) Reset() {
	*x = FinderUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserInfo) ProtoMessage() {}

func (x *FinderUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserInfo.ProtoReflect.Descriptor instead.
func (*FinderUserInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{76}
}

func (x *FinderUserInfo) GetCoverImgUrl() string {
	if x != nil && x.CoverImgUrl != nil {
		return *x.CoverImgUrl
	}
	return ""
}

func (x *FinderUserInfo) GetAuthIconType() int32 {
	if x != nil && x.AuthIconType != nil {
		return *x.AuthIconType
	}
	return 0
}

func (x *FinderUserInfo) GetAuthProfession() string {
	if x != nil && x.AuthProfession != nil {
		return *x.AuthProfession
	}
	return ""
}

func (x *FinderUserInfo) GetAuthInfo() *FinderAuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type ListTab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val *string `protobuf:"bytes,1,opt,name=val" json:"val,omitempty"`
	Key *uint64 `protobuf:"varint,2,opt,name=key" json:"key,omitempty"`
}

func (x *ListTab) Reset() {
	*x = ListTab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTab) ProtoMessage() {}

func (x *ListTab) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTab.ProtoReflect.Descriptor instead.
func (*ListTab) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{77}
}

func (x *ListTab) GetVal() string {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return ""
}

func (x *ListTab) GetKey() uint64 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

type FinderUserPageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse          *BaseResponse             `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	Object                []*FinderObject           `protobuf:"bytes,2,rep,name=object" json:"object,omitempty"`
	FirstPageMd5          *string                   `protobuf:"bytes,3,opt,name=firstPageMd5" json:"firstPageMd5,omitempty"`
	FinderUserInfo        *FinderUserInfo           `protobuf:"bytes,4,opt,name=finderUserInfo" json:"finderUserInfo,omitempty"`
	Contact               *FinderContact            `protobuf:"bytes,5,opt,name=contact" json:"contact,omitempty"`
	FeedsCount            *int32                    `protobuf:"varint,6,opt,name=feedsCount" json:"feedsCount,omitempty"`
	ContinueFlag          *int32                    `protobuf:"varint,7,opt,name=continueFlag" json:"continueFlag,omitempty"`
	VerifyInfo            *FinderNicknameVerifyInfo `protobuf:"bytes,8,opt,name=verifyInfo" json:"verifyInfo,omitempty"`
	FansCount             *int32                    `protobuf:"varint,9,opt,name=fansCount" json:"fansCount,omitempty"`
	LastBuffer            []byte                    `protobuf:"bytes,10,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	FriendFollowCount     *int32                    `protobuf:"varint,11,opt,name=friendFollowCount" json:"friendFollowCount,omitempty"`
	UserTags              [][]byte                  `protobuf:"bytes,12,rep,name=userTags" json:"userTags,omitempty"` //未找到相关PB
	OriginalEnctranceFlag *int32                    `protobuf:"varint,13,opt,name=originalEnctranceFlag" json:"originalEnctranceFlag,omitempty"`
	ListTab               []*ListTab                `protobuf:"bytes,20,rep,name=listTab" json:"listTab,omitempty"`
	Num                   *int32                    `protobuf:"varint,21,opt,name=num" json:"num,omitempty"`
}

func (x *FinderUserPageResponse) Reset() {
	*x = FinderUserPageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderUserPageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderUserPageResponse) ProtoMessage() {}

func (x *FinderUserPageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderUserPageResponse.ProtoReflect.Descriptor instead.
func (*FinderUserPageResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{78}
}

func (x *FinderUserPageResponse) GetBaseResponse() *BaseResponse {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderUserPageResponse) GetObject() []*FinderObject {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *FinderUserPageResponse) GetFirstPageMd5() string {
	if x != nil && x.FirstPageMd5 != nil {
		return *x.FirstPageMd5
	}
	return ""
}

func (x *FinderUserPageResponse) GetFinderUserInfo() *FinderUserInfo {
	if x != nil {
		return x.FinderUserInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetContact() *FinderContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *FinderUserPageResponse) GetFeedsCount() int32 {
	if x != nil && x.FeedsCount != nil {
		return *x.FeedsCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetContinueFlag() int32 {
	if x != nil && x.ContinueFlag != nil {
		return *x.ContinueFlag
	}
	return 0
}

func (x *FinderUserPageResponse) GetVerifyInfo() *FinderNicknameVerifyInfo {
	if x != nil {
		return x.VerifyInfo
	}
	return nil
}

func (x *FinderUserPageResponse) GetFansCount() int32 {
	if x != nil && x.FansCount != nil {
		return *x.FansCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderUserPageResponse) GetFriendFollowCount() int32 {
	if x != nil && x.FriendFollowCount != nil {
		return *x.FriendFollowCount
	}
	return 0
}

func (x *FinderUserPageResponse) GetUserTags() [][]byte {
	if x != nil {
		return x.UserTags
	}
	return nil
}

func (x *FinderUserPageResponse) GetOriginalEnctranceFlag() int32 {
	if x != nil && x.OriginalEnctranceFlag != nil {
		return *x.OriginalEnctranceFlag
	}
	return 0
}

func (x *FinderUserPageResponse) GetListTab() []*ListTab {
	if x != nil {
		return x.ListTab
	}
	return nil
}

func (x *FinderUserPageResponse) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

type MarkUnreadObjectList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1    *uint64 `protobuf:"varint,1,opt,name=v1" json:"v1,omitempty"`
	Sec2  *uint64 `protobuf:"varint,2,opt,name=sec2" json:"sec2,omitempty"`
	V3    *uint64 `protobuf:"varint,3,opt,name=v3" json:"v3,omitempty"`
	V4    *uint64 `protobuf:"varint,4,opt,name=v4" json:"v4,omitempty"`
	EyKey *string `protobuf:"bytes,5,opt,name=eyKey" json:"eyKey,omitempty"`
	V6    *uint64 `protobuf:"varint,6,opt,name=v6" json:"v6,omitempty"`
}

func (x *MarkUnreadObjectList) Reset() {
	*x = MarkUnreadObjectList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkUnreadObjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkUnreadObjectList) ProtoMessage() {}

func (x *MarkUnreadObjectList) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkUnreadObjectList.ProtoReflect.Descriptor instead.
func (*MarkUnreadObjectList) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{79}
}

func (x *MarkUnreadObjectList) GetV1() uint64 {
	if x != nil && x.V1 != nil {
		return *x.V1
	}
	return 0
}

func (x *MarkUnreadObjectList) GetSec2() uint64 {
	if x != nil && x.Sec2 != nil {
		return *x.Sec2
	}
	return 0
}

func (x *MarkUnreadObjectList) GetV3() uint64 {
	if x != nil && x.V3 != nil {
		return *x.V3
	}
	return 0
}

func (x *MarkUnreadObjectList) GetV4() uint64 {
	if x != nil && x.V4 != nil {
		return *x.V4
	}
	return 0
}

func (x *MarkUnreadObjectList) GetEyKey() string {
	if x != nil && x.EyKey != nil {
		return *x.EyKey
	}
	return ""
}

func (x *MarkUnreadObjectList) GetV6() uint64 {
	if x != nil && x.V6 != nil {
		return *x.V6
	}
	return 0
}

type FinderStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request              *BaseRequest          `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	FinderUsername       *string               `protobuf:"bytes,3,opt,name=finderUsername" json:"finderUsername,omitempty"`
	PullType             *uint64               `protobuf:"varint,5,opt,name=pullType" json:"pullType,omitempty"`
	FinderBaseRequest    *FinderBaseRequest    `protobuf:"bytes,6,opt,name=finderBaseRequest" json:"finderBaseRequest,omitempty"`
	Latitude             *uint64               `protobuf:"varint,7,opt,name=latitude" json:"latitude,omitempty"`
	Longitude            *uint64               `protobuf:"varint,8,opt,name=longitude" json:"longitude,omitempty"`
	MarkUnreadObjectList *MarkUnreadObjectList `protobuf:"bytes,11,opt,name=markUnreadObjectList" json:"markUnreadObjectList,omitempty"`
	SpecialRequestScene  *uint64               `protobuf:"varint,12,opt,name=specialRequestScene" json:"specialRequestScene,omitempty"`
	TabTipsObjectId      *uint64               `protobuf:"varint,13,opt,name=tabTipsObjectId" json:"tabTipsObjectId,omitempty"`
	V14                  *uint64               `protobuf:"varint,14,opt,name=v14" json:"v14,omitempty"`
	V15                  *string               `protobuf:"bytes,15,opt,name=v15" json:"v15,omitempty"`
	V17                  *uint64               `protobuf:"varint,17,opt,name=v17" json:"v17,omitempty"`
	V21                  *string               `protobuf:"bytes,21,opt,name=v21" json:"v21,omitempty"`
	V22                  *string               `protobuf:"bytes,22,opt,name=v22" json:"v22,omitempty"`
	FinderEnt            *string               `protobuf:"bytes,24,opt,name=finderEnt" json:"finderEnt,omitempty"`
}

func (x *FinderStreamRequest) Reset() {
	*x = FinderStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamRequest) ProtoMessage() {}

func (x *FinderStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamRequest.ProtoReflect.Descriptor instead.
func (*FinderStreamRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{80}
}

func (x *FinderStreamRequest) GetRequest() *BaseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FinderStreamRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderStreamRequest) GetPullType() uint64 {
	if x != nil && x.PullType != nil {
		return *x.PullType
	}
	return 0
}

func (x *FinderStreamRequest) GetFinderBaseRequest() *FinderBaseRequest {
	if x != nil {
		return x.FinderBaseRequest
	}
	return nil
}

func (x *FinderStreamRequest) GetLatitude() uint64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderStreamRequest) GetLongitude() uint64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderStreamRequest) GetMarkUnreadObjectList() *MarkUnreadObjectList {
	if x != nil {
		return x.MarkUnreadObjectList
	}
	return nil
}

func (x *FinderStreamRequest) GetSpecialRequestScene() uint64 {
	if x != nil && x.SpecialRequestScene != nil {
		return *x.SpecialRequestScene
	}
	return 0
}

func (x *FinderStreamRequest) GetTabTipsObjectId() uint64 {
	if x != nil && x.TabTipsObjectId != nil {
		return *x.TabTipsObjectId
	}
	return 0
}

func (x *FinderStreamRequest) GetV14() uint64 {
	if x != nil && x.V14 != nil {
		return *x.V14
	}
	return 0
}

func (x *FinderStreamRequest) GetV15() string {
	if x != nil && x.V15 != nil {
		return *x.V15
	}
	return ""
}

func (x *FinderStreamRequest) GetV17() uint64 {
	if x != nil && x.V17 != nil {
		return *x.V17
	}
	return 0
}

func (x *FinderStreamRequest) GetV21() string {
	if x != nil && x.V21 != nil {
		return *x.V21
	}
	return ""
}

func (x *FinderStreamRequest) GetV22() string {
	if x != nil && x.V22 != nil {
		return *x.V22
	}
	return ""
}

func (x *FinderStreamRequest) GetFinderEnt() string {
	if x != nil && x.FinderEnt != nil {
		return *x.FinderEnt
	}
	return ""
}

type ByBing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *string `protobuf:"bytes,2,opt,name=ret" json:"ret,omitempty"`
}

func (x *ByBing) Reset() {
	*x = ByBing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ByBing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByBing) ProtoMessage() {}

func (x *ByBing) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByBing.ProtoReflect.Descriptor instead.
func (*ByBing) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{81}
}

func (x *ByBing) GetRet() string {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return ""
}

type BaseRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code *uint64 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Ret  *ByBing `protobuf:"bytes,2,opt,name=ret" json:"ret,omitempty"`
}

func (x *BaseRsp) Reset() {
	*x = BaseRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRsp) ProtoMessage() {}

func (x *BaseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRsp.ProtoReflect.Descriptor instead.
func (*BaseRsp) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{82}
}

func (x *BaseRsp) GetCode() uint64 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *BaseRsp) GetRet() *ByBing {
	if x != nil {
		return x.Ret
	}
	return nil
}

type FinderStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRsp      *BaseRsp        `protobuf:"bytes,1,opt,name=baseRsp" json:"baseRsp,omitempty"`
	FinderObject []*FinderObject `protobuf:"bytes,2,rep,name=finderObject" json:"finderObject,omitempty"`
	LastBuffer   []byte          `protobuf:"bytes,3,opt,name=LastBuffer" json:"LastBuffer,omitempty"`
	Rsp4         *uint64         `protobuf:"varint,4,opt,name=rsp4" json:"rsp4,omitempty"`
	Rsp5         *uint64         `protobuf:"varint,5,opt,name=rsp5" json:"rsp5,omitempty"`
	Text         []byte          `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
}

func (x *FinderStreamResponse) Reset() {
	*x = FinderStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderStreamResponse) ProtoMessage() {}

func (x *FinderStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderStreamResponse.ProtoReflect.Descriptor instead.
func (*FinderStreamResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{83}
}

func (x *FinderStreamResponse) GetBaseRsp() *BaseRsp {
	if x != nil {
		return x.BaseRsp
	}
	return nil
}

func (x *FinderStreamResponse) GetFinderObject() []*FinderObject {
	if x != nil {
		return x.FinderObject
	}
	return nil
}

func (x *FinderStreamResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderStreamResponse) GetRsp4() uint64 {
	if x != nil && x.Rsp4 != nil {
		return *x.Rsp4
	}
	return 0
}

func (x *FinderStreamResponse) GetRsp5() uint64 {
	if x != nil && x.Rsp5 != nil {
		return *x.Rsp5
	}
	return 0
}

func (x *FinderStreamResponse) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

type FinderSearchGetHotWordListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest       `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	FinderBaseRequest *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBaseRequest" json:"finderBaseRequest,omitempty"`
}

func (x *FinderSearchGetHotWordListRequest) Reset() {
	*x = FinderSearchGetHotWordListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchGetHotWordListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchGetHotWordListRequest) ProtoMessage() {}

func (x *FinderSearchGetHotWordListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchGetHotWordListRequest.ProtoReflect.Descriptor instead.
func (*FinderSearchGetHotWordListRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{84}
}

func (x *FinderSearchGetHotWordListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderSearchGetHotWordListRequest) GetFinderBaseRequest() *FinderBaseRequest {
	if x != nil {
		return x.FinderBaseRequest
	}
	return nil
}

type Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (x *Resp) Reset() {
	*x = Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resp) ProtoMessage() {}

func (x *Resp) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resp.ProtoReflect.Descriptor instead.
func (*Resp) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{85}
}

func (x *Resp) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type FinderSearchIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Number *uint32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (x *FinderSearchIdList) Reset() {
	*x = FinderSearchIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchIdList) ProtoMessage() {}

func (x *FinderSearchIdList) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchIdList.ProtoReflect.Descriptor instead.
func (*FinderSearchIdList) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{86}
}

func (x *FinderSearchIdList) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FinderSearchIdList) GetNumber() uint32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

type FinderSearchGetHotWordList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  *string             `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Number *int32              `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	Data   *FinderSearchIdList `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
}

func (x *FinderSearchGetHotWordList) Reset() {
	*x = FinderSearchGetHotWordList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchGetHotWordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchGetHotWordList) ProtoMessage() {}

func (x *FinderSearchGetHotWordList) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchGetHotWordList.ProtoReflect.Descriptor instead.
func (*FinderSearchGetHotWordList) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{87}
}

func (x *FinderSearchGetHotWordList) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FinderSearchGetHotWordList) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *FinderSearchGetHotWordList) GetData() *FinderSearchIdList {
	if x != nil {
		return x.Data
	}
	return nil
}

type FinderSearchGetHotWordListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResponse               *Resp                         `protobuf:"bytes,1,opt,name=baseResponse" json:"baseResponse,omitempty"`
	FinderSearchGetHotWordList []*FinderSearchGetHotWordList `protobuf:"bytes,2,rep,name=finderSearchGetHotWordList" json:"finderSearchGetHotWordList,omitempty"`
}

func (x *FinderSearchGetHotWordListResponse) Reset() {
	*x = FinderSearchGetHotWordListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderSearchGetHotWordListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderSearchGetHotWordListResponse) ProtoMessage() {}

func (x *FinderSearchGetHotWordListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderSearchGetHotWordListResponse.ProtoReflect.Descriptor instead.
func (*FinderSearchGetHotWordListResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{88}
}

func (x *FinderSearchGetHotWordListResponse) GetBaseResponse() *Resp {
	if x != nil {
		return x.BaseResponse
	}
	return nil
}

func (x *FinderSearchGetHotWordListResponse) GetFinderSearchGetHotWordList() []*FinderSearchGetHotWordList {
	if x != nil {
		return x.FinderSearchGetHotWordList
	}
	return nil
}

type FinderGetTopicListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest       *BaseRequest       `protobuf:"bytes,1,opt,name=BaseRequest" json:"BaseRequest,omitempty"`
	FinderBaseRequest *FinderBaseRequest `protobuf:"bytes,2,opt,name=finderBaseRequest" json:"finderBaseRequest,omitempty"`
	LastBuffer        []byte             `protobuf:"bytes,3,opt,name=lastBuffer" json:"lastBuffer,omitempty"`
	TopicType         *uint64            `protobuf:"varint,4,opt,name=topicType" json:"topicType,omitempty"`
	Topic             *string            `protobuf:"bytes,5,opt,name=topic" json:"topic,omitempty"`
	Latitude          *uint64            `protobuf:"varint,6,opt,name=latitude" json:"latitude,omitempty"`
	Longitude         *uint64            `protobuf:"varint,7,opt,name=longitude" json:"longitude,omitempty"`
	FromObjectId      *uint64            `protobuf:"varint,8,opt,name=fromObjectId" json:"fromObjectId,omitempty"`
	V9                *uint64            `protobuf:"varint,9,opt,name=v9" json:"v9,omitempty"`
	V12               *uint64            `protobuf:"varint,12,opt,name=v12" json:"v12,omitempty"`
	V14               *uint64            `protobuf:"varint,14,opt,name=v14" json:"v14,omitempty"`
	V15               *string            `protobuf:"bytes,15,opt,name=v15" json:"v15,omitempty"`
	V16               *string            `protobuf:"bytes,16,opt,name=v16" json:"v16,omitempty"`
	V17               *uint64            `protobuf:"varint,17,opt,name=v17" json:"v17,omitempty"`
}

func (x *FinderGetTopicListRequest) Reset() {
	*x = FinderGetTopicListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetTopicListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetTopicListRequest) ProtoMessage() {}

func (x *FinderGetTopicListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetTopicListRequest.ProtoReflect.Descriptor instead.
func (*FinderGetTopicListRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{89}
}

func (x *FinderGetTopicListRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetFinderBaseRequest() *FinderBaseRequest {
	if x != nil {
		return x.FinderBaseRequest
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetTopicListRequest) GetTopicType() uint64 {
	if x != nil && x.TopicType != nil {
		return *x.TopicType
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *FinderGetTopicListRequest) GetLatitude() uint64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetLongitude() uint64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetFromObjectId() uint64 {
	if x != nil && x.FromObjectId != nil {
		return *x.FromObjectId
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetV9() uint64 {
	if x != nil && x.V9 != nil {
		return *x.V9
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetV12() uint64 {
	if x != nil && x.V12 != nil {
		return *x.V12
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetV14() uint64 {
	if x != nil && x.V14 != nil {
		return *x.V14
	}
	return 0
}

func (x *FinderGetTopicListRequest) GetV15() string {
	if x != nil && x.V15 != nil {
		return *x.V15
	}
	return ""
}

func (x *FinderGetTopicListRequest) GetV16() string {
	if x != nil && x.V16 != nil {
		return *x.V16
	}
	return ""
}

func (x *FinderGetTopicListRequest) GetV17() uint64 {
	if x != nil && x.V17 != nil {
		return *x.V17
	}
	return 0
}

type FinderGetTopicListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderObject []*FinderObject `protobuf:"bytes,2,rep,name=finderObject" json:"finderObject,omitempty"`
	LastBuffer   []byte          `protobuf:"bytes,3,opt,name=LastBuffer" json:"LastBuffer,omitempty"`
	RspV4        *uint64         `protobuf:"varint,4,opt,name=rspV4" json:"rspV4,omitempty"`
	RspV5        *uint64         `protobuf:"varint,5,opt,name=rspV5" json:"rspV5,omitempty"`
	RspV6        []byte          `protobuf:"bytes,6,opt,name=rspV6" json:"rspV6,omitempty"`
}

func (x *FinderGetTopicListResponse) Reset() {
	*x = FinderGetTopicListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetTopicListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetTopicListResponse) ProtoMessage() {}

func (x *FinderGetTopicListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetTopicListResponse.ProtoReflect.Descriptor instead.
func (*FinderGetTopicListResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{90}
}

func (x *FinderGetTopicListResponse) GetFinderObject() []*FinderObject {
	if x != nil {
		return x.FinderObject
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetLastBuffer() []byte {
	if x != nil {
		return x.LastBuffer
	}
	return nil
}

func (x *FinderGetTopicListResponse) GetRspV4() uint64 {
	if x != nil && x.RspV4 != nil {
		return *x.RspV4
	}
	return 0
}

func (x *FinderGetTopicListResponse) GetRspV5() uint64 {
	if x != nil && x.RspV5 != nil {
		return *x.RspV5
	}
	return 0
}

func (x *FinderGetTopicListResponse) GetRspV6() []byte {
	if x != nil {
		return x.RspV6
	}
	return nil
}

type FinderGetMsgSessionIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MyAccountType     *uint64            `protobuf:"varint,2,opt,name=myAccountType" json:"myAccountType,omitempty"`
	FinderUsername    *string            `protobuf:"bytes,3,opt,name=finderUsername" json:"finderUsername,omitempty"`
	FinderBaseRequest *FinderBaseRequest `protobuf:"bytes,4,opt,name=finderBaseRequest" json:"finderBaseRequest,omitempty"`
}

func (x *FinderGetMsgSessionIdRequest) Reset() {
	*x = FinderGetMsgSessionIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetMsgSessionIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetMsgSessionIdRequest) ProtoMessage() {}

func (x *FinderGetMsgSessionIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetMsgSessionIdRequest.ProtoReflect.Descriptor instead.
func (*FinderGetMsgSessionIdRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{91}
}

func (x *FinderGetMsgSessionIdRequest) GetMyAccountType() uint64 {
	if x != nil && x.MyAccountType != nil {
		return *x.MyAccountType
	}
	return 0
}

func (x *FinderGetMsgSessionIdRequest) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetMsgSessionIdRequest) GetFinderBaseRequest() *FinderBaseRequest {
	if x != nil {
		return x.FinderBaseRequest
	}
	return nil
}

type RespV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret *int32 `protobuf:"varint,1,opt,name=ret" json:"ret,omitempty"`
}

func (x *RespV) Reset() {
	*x = RespV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespV) ProtoMessage() {}

func (x *RespV) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespV.ProtoReflect.Descriptor instead.
func (*RespV) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{92}
}

func (x *RespV) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type FinderMsgSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinderUsername *string `protobuf:"bytes,1,opt,name=finderUsername" json:"finderUsername,omitempty"`
	SessionId      *string `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	RejectMsg      *uint64 `protobuf:"varint,3,opt,name=rejectMsg" json:"rejectMsg,omitempty"`
	EnableAction   *uint64 `protobuf:"varint,4,opt,name=enableAction" json:"enableAction,omitempty"`
}

func (x *FinderMsgSessionInfo) Reset() {
	*x = FinderMsgSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderMsgSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderMsgSessionInfo) ProtoMessage() {}

func (x *FinderMsgSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderMsgSessionInfo.ProtoReflect.Descriptor instead.
func (*FinderMsgSessionInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{93}
}

func (x *FinderMsgSessionInfo) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderMsgSessionInfo) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *FinderMsgSessionInfo) GetRejectMsg() uint64 {
	if x != nil && x.RejectMsg != nil {
		return *x.RejectMsg
	}
	return 0
}

func (x *FinderMsgSessionInfo) GetEnableAction() uint64 {
	if x != nil && x.EnableAction != nil {
		return *x.EnableAction
	}
	return 0
}

type FinderGetMsgSessionIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp                 *RespV                `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	FinderMsg            *string               `protobuf:"bytes,2,opt,name=finderMsg" json:"finderMsg,omitempty"`
	EnableAction         *uint64               `protobuf:"varint,3,opt,name=enableAction" json:"enableAction,omitempty"`
	FinderUsername       *string               `protobuf:"bytes,4,opt,name=finderUsername" json:"finderUsername,omitempty"`
	FinderMsgSessionInfo *FinderMsgSessionInfo `protobuf:"bytes,5,opt,name=finderMsgSessionInfo" json:"finderMsgSessionInfo,omitempty"`
}

func (x *FinderGetMsgSessionIdResponse) Reset() {
	*x = FinderGetMsgSessionIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderGetMsgSessionIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderGetMsgSessionIdResponse) ProtoMessage() {}

func (x *FinderGetMsgSessionIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderGetMsgSessionIdResponse.ProtoReflect.Descriptor instead.
func (*FinderGetMsgSessionIdResponse) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{94}
}

func (x *FinderGetMsgSessionIdResponse) GetResp() *RespV {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *FinderGetMsgSessionIdResponse) GetFinderMsg() string {
	if x != nil && x.FinderMsg != nil {
		return *x.FinderMsg
	}
	return ""
}

func (x *FinderGetMsgSessionIdResponse) GetEnableAction() uint64 {
	if x != nil && x.EnableAction != nil {
		return *x.EnableAction
	}
	return 0
}

func (x *FinderGetMsgSessionIdResponse) GetFinderUsername() string {
	if x != nil && x.FinderUsername != nil {
		return *x.FinderUsername
	}
	return ""
}

func (x *FinderGetMsgSessionIdResponse) GetFinderMsgSessionInfo() *FinderMsgSessionInfo {
	if x != nil {
		return x.FinderMsgSessionInfo
	}
	return nil
}

type SKBuiltinStringTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ *string `protobuf:"bytes,1,opt,name=string" json:"string,omitempty"`
}

func (x *SKBuiltinStringTs) Reset() {
	*x = SKBuiltinStringTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SKBuiltinStringTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SKBuiltinStringTs) ProtoMessage() {}

func (x *SKBuiltinStringTs) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SKBuiltinStringTs.ProtoReflect.Descriptor instead.
func (*SKBuiltinStringTs) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{95}
}

func (x *SKBuiltinStringTs) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type BypMsgImgPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BypV1        *string `protobuf:"bytes,1,opt,name=bypV1" json:"bypV1,omitempty"`
	FromUsername *string `protobuf:"bytes,2,opt,name=fromUsername" json:"fromUsername,omitempty"`
	BypV3        *string `protobuf:"bytes,3,opt,name=bypV3" json:"bypV3,omitempty"`
	BypV4        *uint64 `protobuf:"varint,4,opt,name=bypV4" json:"bypV4,omitempty"`
	BypV5        *uint64 `protobuf:"varint,5,opt,name=bypV5" json:"bypV5,omitempty"`
	BypV6        *uint64 `protobuf:"varint,6,opt,name=bypV6" json:"bypV6,omitempty"`
	BypV7        *uint64 `protobuf:"varint,7,opt,name=bypV7" json:"bypV7,omitempty"`
	BypV8        *uint64 `protobuf:"varint,8,opt,name=bypV8" json:"bypV8,omitempty"`
	BypV9        *string `protobuf:"bytes,9,opt,name=bypV9" json:"bypV9,omitempty"`
	BypV15       *uint64 `protobuf:"varint,15,opt,name=bypV15" json:"bypV15,omitempty"`
}

func (x *BypMsgImgPack) Reset() {
	*x = BypMsgImgPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgImgPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgImgPack) ProtoMessage() {}

func (x *BypMsgImgPack) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgImgPack.ProtoReflect.Descriptor instead.
func (*BypMsgImgPack) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{96}
}

func (x *BypMsgImgPack) GetBypV1() string {
	if x != nil && x.BypV1 != nil {
		return *x.BypV1
	}
	return ""
}

func (x *BypMsgImgPack) GetFromUsername() string {
	if x != nil && x.FromUsername != nil {
		return *x.FromUsername
	}
	return ""
}

func (x *BypMsgImgPack) GetBypV3() string {
	if x != nil && x.BypV3 != nil {
		return *x.BypV3
	}
	return ""
}

func (x *BypMsgImgPack) GetBypV4() uint64 {
	if x != nil && x.BypV4 != nil {
		return *x.BypV4
	}
	return 0
}

func (x *BypMsgImgPack) GetBypV5() uint64 {
	if x != nil && x.BypV5 != nil {
		return *x.BypV5
	}
	return 0
}

func (x *BypMsgImgPack) GetBypV6() uint64 {
	if x != nil && x.BypV6 != nil {
		return *x.BypV6
	}
	return 0
}

func (x *BypMsgImgPack) GetBypV7() uint64 {
	if x != nil && x.BypV7 != nil {
		return *x.BypV7
	}
	return 0
}

func (x *BypMsgImgPack) GetBypV8() uint64 {
	if x != nil && x.BypV8 != nil {
		return *x.BypV8
	}
	return 0
}

func (x *BypMsgImgPack) GetBypV9() string {
	if x != nil && x.BypV9 != nil {
		return *x.BypV9
	}
	return ""
}

func (x *BypMsgImgPack) GetBypV15() uint64 {
	if x != nil && x.BypV15 != nil {
		return *x.BypV15
	}
	return 0
}

type BypMsgVideoPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BypVideoV1  *string `protobuf:"bytes,1,opt,name=bypVideoV1" json:"bypVideoV1,omitempty"`
	BypVideoV2  *string `protobuf:"bytes,2,opt,name=bypVideoV2" json:"bypVideoV2,omitempty"`
	BypVideoV3  *uint64 `protobuf:"varint,3,opt,name=bypVideoV3" json:"bypVideoV3,omitempty"`
	BypVideoV4  *uint64 `protobuf:"varint,4,opt,name=bypVideoV4" json:"bypVideoV4,omitempty"`
	BypVideoV5  *uint64 `protobuf:"varint,5,opt,name=bypVideoV5" json:"bypVideoV5,omitempty"`
	BypVideoV6  *string `protobuf:"bytes,6,opt,name=bypVideoV6" json:"bypVideoV6,omitempty"`
	BypVideoV7  *string `protobuf:"bytes,7,opt,name=bypVideoV7" json:"bypVideoV7,omitempty"`
	BypVideoV8  *uint64 `protobuf:"varint,8,opt,name=bypVideoV8" json:"bypVideoV8,omitempty"`
	BypVideoV9  *uint64 `protobuf:"varint,9,opt,name=bypVideoV9" json:"bypVideoV9,omitempty"`
	BypVideoV10 *uint64 `protobuf:"varint,10,opt,name=bypVideoV10" json:"bypVideoV10,omitempty"`
	BypVideoV11 *string `protobuf:"bytes,11,opt,name=bypVideoV11" json:"bypVideoV11,omitempty"`
	BypVideoV12 *string `protobuf:"bytes,12,opt,name=bypVideoV12" json:"bypVideoV12,omitempty"`
	BypVideoV13 *string `protobuf:"bytes,13,opt,name=bypVideoV13" json:"bypVideoV13,omitempty"`
}

func (x *BypMsgVideoPack) Reset() {
	*x = BypMsgVideoPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgVideoPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgVideoPack) ProtoMessage() {}

func (x *BypMsgVideoPack) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgVideoPack.ProtoReflect.Descriptor instead.
func (*BypMsgVideoPack) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{97}
}

func (x *BypMsgVideoPack) GetBypVideoV1() string {
	if x != nil && x.BypVideoV1 != nil {
		return *x.BypVideoV1
	}
	return ""
}

func (x *BypMsgVideoPack) GetBypVideoV2() string {
	if x != nil && x.BypVideoV2 != nil {
		return *x.BypVideoV2
	}
	return ""
}

func (x *BypMsgVideoPack) GetBypVideoV3() uint64 {
	if x != nil && x.BypVideoV3 != nil {
		return *x.BypVideoV3
	}
	return 0
}

func (x *BypMsgVideoPack) GetBypVideoV4() uint64 {
	if x != nil && x.BypVideoV4 != nil {
		return *x.BypVideoV4
	}
	return 0
}

func (x *BypMsgVideoPack) GetBypVideoV5() uint64 {
	if x != nil && x.BypVideoV5 != nil {
		return *x.BypVideoV5
	}
	return 0
}

func (x *BypMsgVideoPack) GetBypVideoV6() string {
	if x != nil && x.BypVideoV6 != nil {
		return *x.BypVideoV6
	}
	return ""
}

func (x *BypMsgVideoPack) GetBypVideoV7() string {
	if x != nil && x.BypVideoV7 != nil {
		return *x.BypVideoV7
	}
	return ""
}

func (x *BypMsgVideoPack) GetBypVideoV8() uint64 {
	if x != nil && x.BypVideoV8 != nil {
		return *x.BypVideoV8
	}
	return 0
}

func (x *BypMsgVideoPack) GetBypVideoV9() uint64 {
	if x != nil && x.BypVideoV9 != nil {
		return *x.BypVideoV9
	}
	return 0
}

func (x *BypMsgVideoPack) GetBypVideoV10() uint64 {
	if x != nil && x.BypVideoV10 != nil {
		return *x.BypVideoV10
	}
	return 0
}

func (x *BypMsgVideoPack) GetBypVideoV11() string {
	if x != nil && x.BypVideoV11 != nil {
		return *x.BypVideoV11
	}
	return ""
}

func (x *BypMsgVideoPack) GetBypVideoV12() string {
	if x != nil && x.BypVideoV12 != nil {
		return *x.BypVideoV12
	}
	return ""
}

func (x *BypMsgVideoPack) GetBypVideoV13() string {
	if x != nil && x.BypVideoV13 != nil {
		return *x.BypVideoV13
	}
	return ""
}

type BypMsgPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType      *uint64            `protobuf:"varint,1,opt,name=msgType" json:"msgType,omitempty"`
	FromUsername *string            `protobuf:"bytes,2,opt,name=fromUsername" json:"fromUsername,omitempty"`
	ToUsername   *string            `protobuf:"bytes,3,opt,name=toUsername" json:"toUsername,omitempty"`
	MsgSessionId *string            `protobuf:"bytes,4,opt,name=msgSessionId" json:"msgSessionId,omitempty"`
	MsgSource    *string            `protobuf:"bytes,5,opt,name=msgSource" json:"msgSource,omitempty"`
	V6           *string            `protobuf:"bytes,6,opt,name=v6" json:"v6,omitempty"`
	SessionId    *string            `protobuf:"bytes,7,opt,name=sessionId" json:"sessionId,omitempty"`
	Sk           *SKBuiltinStringTs `protobuf:"bytes,101,opt,name=sk" json:"sk,omitempty"`
	SkImg        *BypMsgImgPack     `protobuf:"bytes,102,opt,name=skImg" json:"skImg,omitempty"`
	SkVideo      *BypMsgVideoPack   `protobuf:"bytes,103,opt,name=skVideo" json:"skVideo,omitempty"`
}

func (x *BypMsgPack) Reset() {
	*x = BypMsgPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypMsgPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypMsgPack) ProtoMessage() {}

func (x *BypMsgPack) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypMsgPack.ProtoReflect.Descriptor instead.
func (*BypMsgPack) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{98}
}

func (x *BypMsgPack) GetMsgType() uint64 {
	if x != nil && x.MsgType != nil {
		return *x.MsgType
	}
	return 0
}

func (x *BypMsgPack) GetFromUsername() string {
	if x != nil && x.FromUsername != nil {
		return *x.FromUsername
	}
	return ""
}

func (x *BypMsgPack) GetToUsername() string {
	if x != nil && x.ToUsername != nil {
		return *x.ToUsername
	}
	return ""
}

func (x *BypMsgPack) GetMsgSessionId() string {
	if x != nil && x.MsgSessionId != nil {
		return *x.MsgSessionId
	}
	return ""
}

func (x *BypMsgPack) GetMsgSource() string {
	if x != nil && x.MsgSource != nil {
		return *x.MsgSource
	}
	return ""
}

func (x *BypMsgPack) GetV6() string {
	if x != nil && x.V6 != nil {
		return *x.V6
	}
	return ""
}

func (x *BypMsgPack) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *BypMsgPack) GetSk() *SKBuiltinStringTs {
	if x != nil {
		return x.Sk
	}
	return nil
}

func (x *BypMsgPack) GetSkImg() *BypMsgImgPack {
	if x != nil {
		return x.SkImg
	}
	return nil
}

func (x *BypMsgPack) GetSkVideo() *BypMsgVideoPack {
	if x != nil {
		return x.SkVideo
	}
	return nil
}

type BypSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseRequest *BaseRequest `protobuf:"bytes,1,opt,name=baseRequest" json:"baseRequest,omitempty"`
	BizType     *uint64      `protobuf:"varint,2,opt,name=bizType" json:"bizType,omitempty"`
	BypMsgPack  *BypMsgPack  `protobuf:"bytes,3,opt,name=bypMsgPack" json:"bypMsgPack,omitempty"`
}

func (x *BypSendRequest) Reset() {
	*x = BypSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSendRequest) ProtoMessage() {}

func (x *BypSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSendRequest.ProtoReflect.Descriptor instead.
func (*BypSendRequest) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{99}
}

func (x *BypSendRequest) GetBaseRequest() *BaseRequest {
	if x != nil {
		return x.BaseRequest
	}
	return nil
}

func (x *BypSendRequest) GetBizType() uint64 {
	if x != nil && x.BizType != nil {
		return *x.BizType
	}
	return 0
}

func (x *BypSendRequest) GetBypMsgPack() *BypMsgPack {
	if x != nil {
		return x.BypMsgPack
	}
	return nil
}

type BypSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []byte `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	MsgId    []byte `protobuf:"bytes,2,opt,name=msgId" json:"msgId,omitempty"`
}

func (x *BypSendResp) Reset() {
	*x = BypSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BypSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BypSendResp) ProtoMessage() {}

func (x *BypSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BypSendResp.ProtoReflect.Descriptor instead.
func (*BypSendResp) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{100}
}

func (x *BypSendResp) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BypSendResp) GetMsgId() []byte {
	if x != nil {
		return x.MsgId
	}
	return nil
}

type FinderJoinLiveRespInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T1List *int32 `protobuf:"varint,1,opt,name=T1List" json:"T1List,omitempty"`
}

func (x *FinderJoinLiveRespInfo) Reset() {
	*x = FinderJoinLiveRespInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveRespInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveRespInfo) ProtoMessage() {}

func (x *FinderJoinLiveRespInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveRespInfo.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveRespInfo) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{101}
}

func (x *FinderJoinLiveRespInfo) GetT1List() int32 {
	if x != nil && x.T1List != nil {
		return *x.T1List
	}
	return 0
}

type FinderJoinLiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T1 *FinderJoinLiveRespInfo `protobuf:"bytes,1,opt,name=T1" json:"T1,omitempty"`
	T  *string                 `protobuf:"bytes,2,opt,name=T" json:"T,omitempty"`
}

func (x *FinderJoinLiveResp) Reset() {
	*x = FinderJoinLiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wechat_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinderJoinLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinderJoinLiveResp) ProtoMessage() {}

func (x *FinderJoinLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_wechat_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinderJoinLiveResp.ProtoReflect.Descriptor instead.
func (*FinderJoinLiveResp) Descriptor() ([]byte, []int) {
	return file_wechat_proto_rawDescGZIP(), []int{102}
}

func (x *FinderJoinLiveResp) GetT1() *FinderJoinLiveRespInfo {
	if x != nil {
		return x.T1
	}
	return nil
}

func (x *FinderJoinLiveResp) GetT() string {
	if x != nil && x.T != nil {
		return *x.T
	}
	return ""
}

var File_wechat_proto protoreflect.FileDescriptor

var file_wechat_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x4b, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x53, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xa1, 0x01, 0x0a, 0x1e, 0x4d, 0x4d,
	0x42, 0x69, 0x7a, 0x4a, 0x73, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x75, 0x73,
	0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x75, 0x73, 0x69, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xee, 0x02,
	0x0a, 0x1f, 0x4d, 0x4d, 0x42, 0x69, 0x7a, 0x4a, 0x73, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x58,
	0x58, 0x58, 0x5f, 0x4e, 0x6f, 0x55, 0x6e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x58, 0x58, 0x58, 0x4e, 0x6f,
	0x55, 0x6e, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x58, 0x58, 0x58, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x58, 0x58, 0x58, 0x55, 0x6e, 0x72,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x58, 0x58, 0x58,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x58, 0x58, 0x58, 0x53, 0x69, 0x7a, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x36,
	0x0a, 0x08, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x4c,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x45, 0x63, 0x64, 0x68, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x45, 0x63, 0x64, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6b, 0x65, 0x79, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x6b, 0x65, 0x79, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63,
	0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65,
	0x6e, 0x63, 0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x45, 0x63, 0x64, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x45, 0x43, 0x44, 0x48, 0x4b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x53, 0x65, 0x63, 0x45, 0x43, 0x44, 0x48, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x07, 0x45, 0x43,
	0x44, 0x48, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x10, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x0e, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x50, 0x75, 0x62, 0x45, 0x63, 0x64, 0x68, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x43, 0x44,
	0x48, 0x4b, 0x65, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x50, 0x75, 0x62, 0x45, 0x63, 0x64, 0x68,
	0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x77, 0x64, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x77, 0x64, 0x32, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x57, 0x54, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x6d, 0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x53, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x67, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x67, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x04, 0x6b, 0x73, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x04, 0x6b, 0x73, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x13, 0x57, 0x78, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc9,
	0x03, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x43, 0x0a, 0x11, 0x77, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x0e, 0x77, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x42, 0x75, 0x66, 0x66, 0x12, 0x4b, 0x0a, 0x15, 0x77, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x57, 0x54, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x11, 0x77, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x67, 0x52, 0x65, 0x71,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x51, 0x0a, 0x17, 0x77, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x57,
	0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x13, 0x77, 0x78, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x64, 0x62,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x0f, 0x63, 0x6c,
	0x69, 0x64, 0x62, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x46, 0x0a,
	0x12, 0x63, 0x6c, 0x69, 0x64, 0x62, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x64, 0x62, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xbe, 0x06, 0x0a, 0x14, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x41, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x49, 0x70, 0x73, 0x65, 0x71, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x49, 0x70, 0x73, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3a, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x0a, 0x0d, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31,
	0x0a, 0x08, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x53,
	0x6f, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x11, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x63, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40,
	0x0a, 0x0f, 0x61, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x52, 0x0d, 0x61, 0x65, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x45, 0x63, 0x64, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x43,
	0x44, 0x48, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x45, 0x63, 0x64, 0x68, 0x4b, 0x65,
	0x79, 0x22, 0xf8, 0x04, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x41, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6d, 0x65, 0x69, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x73,
	0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x49, 0x70, 0x53, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a,
	0x0f, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0a, 0x72, 0x73, 0x61, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x0c, 0x61, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x41, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x61, 0x65, 0x73, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x22, 0x84, 0x04, 0x0a,
	0x0c, 0x57, 0x43, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x26, 0x0a,
	0x05, 0x57, 0x63, 0x73, 0x74, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x05,
	0x57, 0x63, 0x73, 0x74, 0x66, 0x12, 0x26, 0x0a, 0x05, 0x57, 0x63, 0x73, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x05, 0x57, 0x63, 0x73, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x43, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x06, 0x43, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52,
	0x0c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x0e, 0x41, 0x63, 0x67, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x41, 0x63, 0x67, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x67, 0x69, 0x54,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0a, 0x41,
	0x63, 0x67, 0x69, 0x54, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x52, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a,
	0x0a, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x0a, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x0e, 0x49, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0e, 0x49, 0x6f, 0x73, 0x74, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x0e, 0x49, 0x6f, 0x73,
	0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x52, 0x0e, 0x49, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x75, 0x75, 0x69, 0x64, 0x22, 0xc4, 0x14, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x31, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x6e, 0x4b, 0x6e,
	0x6f, 0x77, 0x6e, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x59, 0x65, 0x73, 0x31, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x59, 0x65, 0x73, 0x31,
	0x12, 0x12, 0x0a, 0x04, 0x59, 0x65, 0x73, 0x32, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04,
	0x59, 0x65, 0x73, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32,
	0x18, 0x0f, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x32,
	0x12, 0x30, 0x0a, 0x13, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x11, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x15, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x18, 0x12, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x13, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x16, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x18, 0x19, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x18, 0x1a, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x35, 0x18, 0x1b, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x18, 0x1c,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x12, 0x12,
	0x0a, 0x04, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x61,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x1e, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x37, 0x18, 0x1f, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x37, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x18, 0x20, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x38, 0x18, 0x21, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x38, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x39, 0x18, 0x22, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x39, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x4d, 0x44, 0x35, 0x18, 0x23, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x4d, 0x44, 0x35, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x55, 0x55, 0x49, 0x44, 0x18, 0x24, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x70, 0x70, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x25, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x26, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x57, 0x69, 0x66, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x61, 0x63, 0x18, 0x27, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x07, 0x57, 0x69, 0x66, 0x69, 0x4d, 0x61, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x73, 0x68, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x73, 0x68, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x65, 0x73, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x65, 0x76, 0x4d, 0x44, 0x35, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65,
	0x76, 0x4d, 0x44, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x76, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x65, 0x76, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x44, 0x65, 0x76, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x32, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x32, 0x18, 0x2f, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x32, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x32, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x08, 0x49, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x4d, 0x44, 0x35, 0x18, 0x33, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x44, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x71, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x34, 0x20, 0x02, 0x28, 0x03, 0x52, 0x07, 0x52, 0x71, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x33, 0x18,
	0x35, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x33,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x34, 0x18, 0x36, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x34, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x73, 0x69, 0x64, 0x18, 0x37, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x53, 0x73,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x35, 0x18,
	0x38, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x35,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x73, 0x73, 0x69, 0x64, 0x18, 0x39, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x05, 0x42, 0x73, 0x73, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4a, 0x61, 0x69, 0x6c,
	0x18, 0x3a, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x4a, 0x61, 0x69, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x65, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x65,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x36, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x36,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x37, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x37, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x38, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x38, 0x12, 0x16, 0x0a, 0x06,
	0x57, 0x69, 0x66, 0x69, 0x4f, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x69,
	0x66, 0x69, 0x4f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x68, 0x4f, 0x6e,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x68, 0x4f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x41,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x68, 0x4d, 0x61, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x39, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x39, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x30, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x36, 0x18, 0x45, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x53,
	0x69, 0x6d, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x61, 0x73, 0x53, 0x69, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x55, 0x73, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x37, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x37, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x38, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x38, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e,
	0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x49, 0x6d, 0x65, 0x69, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6d,
	0x65, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x65, 0x76, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x39, 0x18, 0x4f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x32, 0x39, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x30, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x30, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x31, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x32, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4e,
	0x75, 0x6d, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x41, 0x70, 0x70, 0x4e, 0x75, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x76, 0x61, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x76, 0x61, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33,
	0x33, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x33, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x34, 0x18,
	0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x34,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x35, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x33, 0x35, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x33, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x33, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x34, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x34, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x35, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x35, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x36, 0x18, 0x5c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x36, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x37, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x37, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x38, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x38, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x39, 0x18, 0x5f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x30, 0x39, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x30, 0x18, 0x60, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x30, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x31, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x31, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x32, 0x18, 0x62, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x31, 0x31, 0x32, 0x22, 0x6a,
	0x0a, 0x12, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x33, 0x32, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x33, 0x32, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x35, 0x12, 0x1a, 0x0a,
	0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x08, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x36, 0x22, 0x73, 0x0a, 0x05, 0x57, 0x43, 0x53,
	0x54, 0x46, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb5,
	0x02, 0x0a, 0x05, 0x57, 0x43, 0x53, 0x54, 0x45, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x33, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x31,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x32, 0x18, 0x08, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x33,
	0x18, 0x09, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x33, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x34, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x35,
	0x18, 0x0b, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x35, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x36, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x36, 0x22, 0xeb, 0x01, 0x0a, 0x07, 0x53, 0x61, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x39, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x31, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x38, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x38, 0x22, 0x94, 0x02, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x67, 0x69, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x67, 0x69, 0x43, 0x6d, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x50, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x50, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x54, 0x65, 0x78, 0x74, 0x57, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x09, 0x72, 0x65, 0x71, 0x54, 0x65, 0x78, 0x74, 0x57,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x74, 0x4e, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x72, 0x74, 0x4e, 0x6f, 0x22, 0x3f, 0x0a, 0x11, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x69, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0xf2, 0x02, 0x0a,
	0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64,
	0x35, 0x22, 0xbb, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x70, 0x70, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x97, 0x02, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73,
	0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x42, 0x75, 0x66, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x49, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x15, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x11,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x54, 0x61, 0x62, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x66, 0x66, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x74, 0x46, 0x6c, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x45, 0x78, 0x70, 0x74, 0x46, 0x6c, 0x61, 0x12, 0x33, 0x0a, 0x07, 0x43,
	0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x43, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x77, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x62, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x46, 0x62, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x62, 0x72,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x62, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x62, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x46, 0x62, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x54,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x54, 0x12, 0x0c, 0x0a, 0x01, 0x47, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x01, 0x47, 0x22, 0x89, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x74, 0x46, 0x6c, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x78, 0x70, 0x74, 0x46, 0x6c, 0x61, 0x12, 0x33, 0x0a,
	0x07, 0x43, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x43, 0x74, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x62, 0x72, 0x56,
	0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x46, 0x62, 0x72, 0x56, 0x37, 0x12, 0x23,
	0x0a, 0x03, 0x50, 0x77, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x77, 0x64, 0x52, 0x03,
	0x50, 0x77, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x45, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x0a,
	0x01, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x54, 0x12, 0x1e, 0x0a, 0x01, 0x47,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5a, 0x64, 0x52, 0x01, 0x47, 0x12, 0x0e, 0x0a, 0x02, 0x54,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x54, 0x67, 0x22, 0x3a, 0x0a, 0x08, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x5a, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x47, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x47, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x47, 0x33, 0x22, 0x90, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x09, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x52, 0x09, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x6f, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x88, 0x04, 0x0a, 0x14, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22,
	0xa6, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x64, 0x35, 0x53, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d,
	0x64, 0x35, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x53,
	0x70, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0x26, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xe8, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6f, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x69, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x37,
	0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcb, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xa7, 0x06, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x77, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22,
	0x96, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x76, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x38, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x76, 0x38, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x39, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x76, 0x39, 0x22, 0xcc, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79, 0x22, 0xbd, 0x03, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x20, 0x0a, 0x08, 0x42, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x4e, 0x75, 0x6d, 0x22, 0x40, 0x0a, 0x08, 0x42, 0x79, 0x54,
	0x61, 0x62, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x54, 0x61, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x79, 0x54, 0x61, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x10,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x64, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x74, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x65, 0x74, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x74, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x65, 0x74, 0x33, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x69,
	0x6b, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x37, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x37, 0x12, 0x2c, 0x0a, 0x08, 0x62, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x08,
	0x62, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f,
	0x6f, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x31, 0x33,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x75, 0x31, 0x33, 0x12, 0x22, 0x0a, 0x03,
	0x74, 0x61, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x42, 0x79, 0x54, 0x61, 0x62, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x74, 0x61, 0x62,
	0x22, 0xfb, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x6f, 0x77, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf2,
	0x0b, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6b,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x76, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x61, 0x76, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x69, 0x70, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x69, 0x70, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x4b,
	0x65, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x44, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x6b, 0x33, 0x38, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x6e, 0x6b, 0x33, 0x38, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x6e, 0x6b, 0x33, 0x39, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x6e, 0x6b, 0x33,
	0x39, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x6b, 0x34, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x75, 0x6e, 0x6b, 0x34, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x6b, 0x34, 0x34,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x6e, 0x6b, 0x34, 0x34, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x6e, 0x6b, 0x35, 0x37, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x6e,
	0x6b, 0x35, 0x37, 0x22, 0xfc, 0x01, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x41, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x87, 0x03, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x14,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf1,
	0x04, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x4d, 0x61, 0x78, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x65, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4e, 0x65, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x52, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x52, 0x65, 0x66,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72,
	0x65, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72,
	0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x31, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x6c, 0x6c, 0x31, 0x36,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x41, 0x6c, 0x6c,
	0x31, 0x36, 0x22, 0xc1, 0x03, 0x0a, 0x1e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x06,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x68,
	0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xc7, 0x03, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4f,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x69, 0x6b, 0x65, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x4c, 0x69, 0x6b, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x4e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x8b, 0x02, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x22, 0xf3,
	0x02, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75,
	0x73, 0x52, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x44, 0x74, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x44,
	0x74, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x4a, 0x6c, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4a, 0x6c, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6c, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x4a, 0x6c, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x53, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4a, 0x6c, 0x72, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x6c, 0x72, 0x38,
	0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6c, 0x72, 0x31,
	0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4a, 0x6c, 0x72, 0x31, 0x31, 0x12, 0x14,
	0x0a, 0x05, 0x4a, 0x6c, 0x72, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4a,
	0x6c, 0x72, 0x31, 0x32, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x61, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x46, 0x61, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x03, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0xd3, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x46, 0x61, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64,
	0x46, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x72, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x72, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x22,
	0xb2, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x49, 0x63, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x96, 0x05, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x3e, 0x0a, 0x0e, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x65, 0x65, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x65, 0x65, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x40, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x61, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x29, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x80, 0x01, 0x0a,
	0x14, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x76, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x63, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x63, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x76, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x76, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x79, 0x4b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x76, 0x36, 0x22,
	0xb1, 0x04, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x50, 0x0a,
	0x14, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x54, 0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x54,
	0x69, 0x70, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x31, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x76, 0x31, 0x34, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x31, 0x35, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x31, 0x37, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x76, 0x31,
	0x37, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x32, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x32, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x32, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x76, 0x32, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x06, 0x42, 0x79, 0x42, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22,
	0x3f, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x79, 0x42, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x22, 0xd7, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x73, 0x70, 0x52, 0x07, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x73, 0x70, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x73,
	0x70, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x70, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x72, 0x73, 0x70, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x21, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x66,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x18, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x3c, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xba, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a,
	0x1a, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1a, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xb7, 0x03, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x76,
	0x39, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x76, 0x31, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x31, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x76, 0x31, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x76, 0x31, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x31, 0x36, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x31, 0x36, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x31, 0x37,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x76, 0x31, 0x37, 0x22, 0xb8, 0x01, 0x0a, 0x1a,
	0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x70, 0x56, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x73, 0x70, 0x56, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73,
	0x70, 0x56, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x73, 0x70, 0x56, 0x35,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x70, 0x56, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x72, 0x73, 0x70, 0x56, 0x36, 0x22, 0xb5, 0x01, 0x0a, 0x1c, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x6d, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19,
	0x0a, 0x05, 0x52, 0x65, 0x73, 0x70, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfe, 0x01, 0x0a, 0x1d, 0x46,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x56, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x73, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x12, 0x53,
	0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xfb, 0x01, 0x0a, 0x0d, 0x42, 0x79,
	0x70, 0x4d, 0x73, 0x67, 0x49, 0x6d, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x70, 0x56, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x79, 0x70, 0x56,
	0x31, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x70, 0x56, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x79, 0x70, 0x56, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x70, 0x56, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x70, 0x56,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x70, 0x56, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x62, 0x79, 0x70, 0x56, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x70, 0x56, 0x36,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x70, 0x56, 0x36, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x70, 0x56, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79,
	0x70, 0x56, 0x37, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x70, 0x56, 0x38, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x70, 0x56, 0x38, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x70,
	0x56, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x79, 0x70, 0x56, 0x39, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x79, 0x70, 0x56, 0x31, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x62, 0x79, 0x70, 0x56, 0x31, 0x35, 0x22, 0xb9, 0x03, 0x0a, 0x0f, 0x42, 0x79, 0x70, 0x4d,
	0x73, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x37, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x38, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x39, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x30, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x31, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x32, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31,
	0x32, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x31, 0x33,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x79, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x56, 0x31, 0x33, 0x22, 0xe6, 0x02, 0x0a, 0x0a, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x76, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x02, 0x73, 0x6b, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x4b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x73, 0x52, 0x02, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x05,
	0x73, 0x6b, 0x49, 0x6d, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x49, 0x6d, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x52, 0x05, 0x73, 0x6b, 0x49, 0x6d, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x6b, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x42, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50,
	0x61, 0x63, 0x6b, 0x52, 0x07, 0x73, 0x6b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x95, 0x01, 0x0a,
	0x0e, 0x42, 0x79, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x0a, 0x62, 0x79, 0x70, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x79,
	0x70, 0x4d, 0x73, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x62, 0x79, 0x70, 0x4d, 0x73, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x0b, 0x42, 0x79, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x54, 0x31, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x02, 0x54, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x54, 0x31, 0x12, 0x0c, 0x0a,
	0x01, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x54, 0x42, 0x0a, 0x5a, 0x08, 0x2f,
	0x3b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
}

var (
	file_wechat_proto_rawDescOnce sync.Once
	file_wechat_proto_rawDescData = file_wechat_proto_rawDesc
)

func file_wechat_proto_rawDescGZIP() []byte {
	file_wechat_proto_rawDescOnce.Do(func() {
		file_wechat_proto_rawDescData = protoimpl.X.CompressGZIP(file_wechat_proto_rawDescData)
	})
	return file_wechat_proto_rawDescData
}

var file_wechat_proto_msgTypes = make([]protoimpl.MessageInfo, 103)
var file_wechat_proto_goTypes = []interface{}{
	(*BaseRequest)(nil),                        // 0: wechat.BaseRequest
	(*BaseRequestPlus)(nil),                    // 1: wechat.BaseRequestPlus
	(*SKBuiltinStringT)(nil),                   // 2: wechat.SKBuiltinString_t
	(*BaseResponse)(nil),                       // 3: wechat.BaseResponse
	(*MMBizJsApiGetUserOpenIdRequest)(nil),     // 4: wechat.MMBizJsApiGetUserOpenIdRequest
	(*MMBizJsApiGetUserOpenIdResponse)(nil),    // 5: wechat.MMBizJsApiGetUserOpenIdResponse
	(*BufferT)(nil),                            // 6: wechat.Buffer_t
	(*EcdhPacket)(nil),                         // 7: wechat.EcdhPacket
	(*HybridDecryptResponse)(nil),              // 8: wechat.HybridDecryptResponse
	(*HybridEcdhRequest)(nil),                  // 9: wechat.HybridEcdhRequest
	(*HybridEcdhResponse)(nil),                 // 10: wechat.HybridEcdhResponse
	(*ECDHKey)(nil),                            // 11: wechat.ECDHKey
	(*SKBuiltinString_)(nil),                   // 12: wechat.SKBuiltinString_
	(*ManualAuthRsaReqData)(nil),               // 13: wechat.ManualAuthRsaReqData
	(*WTLoginImgReqInfo)(nil),                  // 14: wechat.WTLoginImgReqInfo
	(*WxVerifyCodeReqInfo)(nil),                // 15: wechat.WxVerifyCodeReqInfo
	(*BaseAuthReqInfo)(nil),                    // 16: wechat.BaseAuthReqInfo
	(*ManualAuthAesReqData)(nil),               // 17: wechat.ManualAuthAesReqData
	(*TrustSoftData)(nil),                      // 18: wechat.TrustSoftData
	(*TrustResponseData)(nil),                  // 19: wechat.TrustResponseData
	(*TrustResp)(nil),                          // 20: wechat.TrustResp
	(*AutoAuthKey)(nil),                        // 21: wechat.AutoAuthKey
	(*AutoAuthRsaReqData)(nil),                 // 22: wechat.AutoAuthRsaReqData
	(*AutoAuthAesReqData)(nil),                 // 23: wechat.AutoAuthAesReqData
	(*AutoAuthRequest)(nil),                    // 24: wechat.AutoAuthRequest
	(*WCExtInfoNew)(nil),                       // 25: wechat.WCExtInfoNew
	(*FileInfo)(nil),                           // 26: wechat.FileInfo
	(*SpamDataBody)(nil),                       // 27: wechat.SpamDataBody
	(*NewClientCheckData)(nil),                 // 28: wechat.NewClientCheckData
	(*DeviceRunningInfoNew)(nil),               // 29: wechat.DeviceRunningInfoNew
	(*WCSTF)(nil),                              // 30: wechat.WCSTF
	(*WCSTE)(nil),                              // 31: wechat.WCSTE
	(*SaeInfo)(nil),                            // 32: wechat.SaeInfo
	(*TenPayRequest)(nil),                      // 33: wechat.TenPayRequest
	(*SKBuiltinBufferT)(nil),                   // 34: wechat.SKBuiltinBuffer_t
	(*UploadAppAttachRequest)(nil),             // 35: wechat.UploadAppAttachRequest
	(*UploadAppAttachResponse)(nil),            // 36: wechat.UploadAppAttachResponse
	(*DownloadVoiceRequest)(nil),               // 37: wechat.DownloadVoiceRequest
	(*DownloadVoiceResponse)(nil),              // 38: wechat.DownloadVoiceResponse
	(*ClientContextInfo)(nil),                  // 39: wechat.ClientContextInfo
	(*FinderBaseRequest)(nil),                  // 40: wechat.FinderBaseRequest
	(*FinderPwd)(nil),                          // 41: wechat.FinderPwd
	(*FinderBaseRequestPlus)(nil),              // 42: wechat.FinderBaseRequestPlus
	(*FinderTxRequestPlus)(nil),                // 43: wechat.FinderTxRequestPlus
	(*FinderZd)(nil),                           // 44: wechat.FinderZd
	(*FinderFollowRequestPlus)(nil),            // 45: wechat.FinderFollowRequestPlus
	(*FinderCommentRequest)(nil),               // 46: wechat.FinderCommentRequest
	(*FinderMediaSpec)(nil),                    // 47: wechat.FinderMediaSpec
	(*FinderMedia)(nil),                        // 48: wechat.FinderMedia
	(*FinderMediaExtra)(nil),                   // 49: wechat.FinderMediaExtra
	(*FinderLocation)(nil),                     // 50: wechat.FinderLocation
	(*FinderExtendedReading)(nil),              // 51: wechat.FinderExtendedReading
	(*FinderTopic)(nil),                        // 52: wechat.FinderTopic
	(*FinderObjectDesc)(nil),                   // 53: wechat.FinderObjectDesc
	(*FinderCommentInfo)(nil),                  // 54: wechat.FinderCommentInfo
	(*FinderAuthInfo)(nil),                     // 55: wechat.FinderAuthInfo
	(*FinderContactExtInfo)(nil),               // 56: wechat.FinderContactExtInfo
	(*FinderContact)(nil),                      // 57: wechat.FinderContact
	(*ByNumber)(nil),                           // 58: wechat.ByNumber
	(*ByTabMsg)(nil),                           // 59: wechat.ByTabMsg
	(*FinderObjDetails)(nil),                   // 60: wechat.FinderObjDetails
	(*FinderRecommendInfo)(nil),                // 61: wechat.FinderRecommendInfo
	(*FinderObject)(nil),                       // 62: wechat.FinderObject
	(*FinderCommentResponse)(nil),              // 63: wechat.FinderCommentResponse
	(*FinderFollowRequest)(nil),                // 64: wechat.FinderFollowRequest
	(*FinderFollowResponse)(nil),               // 65: wechat.FinderFollowResponse
	(*FinderGetCommentDetailRequest)(nil),      // 66: wechat.FinderGetCommentDetailRequest
	(*FinderGetCommentDetailResponse)(nil),     // 67: wechat.FinderGetCommentDetailResponse
	(*FinderLikeRequest)(nil),                  // 68: wechat.FinderLikeRequest
	(*FinderLikeResponse)(nil),                 // 69: wechat.FinderLikeResponse
	(*FinderSearchRequest)(nil),                // 70: wechat.FinderSearchRequest
	(*FinderJoinLiveReq)(nil),                  // 71: wechat.FinderJoinLiveReq
	(*FinderSearchInfo)(nil),                   // 72: wechat.FinderSearchInfo
	(*FinderSearchResponse)(nil),               // 73: wechat.FinderSearchResponse
	(*FinderUserPageRequest)(nil),              // 74: wechat.FinderUserPageRequest
	(*FinderNicknameVerifyInfo)(nil),           // 75: wechat.FinderNicknameVerifyInfo
	(*FinderUserInfo)(nil),                     // 76: wechat.FinderUserInfo
	(*ListTab)(nil),                            // 77: wechat.ListTab
	(*FinderUserPageResponse)(nil),             // 78: wechat.FinderUserPageResponse
	(*MarkUnreadObjectList)(nil),               // 79: wechat.MarkUnreadObjectList
	(*FinderStreamRequest)(nil),                // 80: wechat.FinderStreamRequest
	(*ByBing)(nil),                             // 81: wechat.ByBing
	(*BaseRsp)(nil),                            // 82: wechat.BaseRsp
	(*FinderStreamResponse)(nil),               // 83: wechat.FinderStreamResponse
	(*FinderSearchGetHotWordListRequest)(nil),  // 84: wechat.FinderSearchGetHotWordListRequest
	(*Resp)(nil),                               // 85: wechat.Resp
	(*FinderSearchIdList)(nil),                 // 86: wechat.FinderSearchIdList
	(*FinderSearchGetHotWordList)(nil),         // 87: wechat.FinderSearchGetHotWordList
	(*FinderSearchGetHotWordListResponse)(nil), // 88: wechat.FinderSearchGetHotWordListResponse
	(*FinderGetTopicListRequest)(nil),          // 89: wechat.FinderGetTopicListRequest
	(*FinderGetTopicListResponse)(nil),         // 90: wechat.FinderGetTopicListResponse
	(*FinderGetMsgSessionIdRequest)(nil),       // 91: wechat.FinderGetMsgSessionIdRequest
	(*RespV)(nil),                              // 92: wechat.RespV
	(*FinderMsgSessionInfo)(nil),               // 93: wechat.FinderMsgSessionInfo
	(*FinderGetMsgSessionIdResponse)(nil),      // 94: wechat.FinderGetMsgSessionIdResponse
	(*SKBuiltinStringTs)(nil),                  // 95: wechat.SKBuiltinString_ts
	(*BypMsgImgPack)(nil),                      // 96: wechat.BypMsgImgPack
	(*BypMsgVideoPack)(nil),                    // 97: wechat.BypMsgVideoPack
	(*BypMsgPack)(nil),                         // 98: wechat.BypMsgPack
	(*BypSendRequest)(nil),                     // 99: wechat.BypSendRequest
	(*BypSendResp)(nil),                        // 100: wechat.BypSendResp
	(*FinderJoinLiveRespInfo)(nil),             // 101: wechat.FinderJoinLiveRespInfo
	(*FinderJoinLiveResp)(nil),                 // 102: wechat.FinderJoinLiveResp
}
var file_wechat_proto_depIdxs = []int32{
	2,   // 0: wechat.BaseResponse.errMsg:type_name -> wechat.SKBuiltinString_t
	0,   // 1: wechat.MMBizJsApiGetUserOpenIdRequest.BaseRequest:type_name -> wechat.BaseRequest
	3,   // 2: wechat.MMBizJsApiGetUserOpenIdResponse.BaseResponse:type_name -> wechat.BaseResponse
	6,   // 3: wechat.EcdhPacket.Key:type_name -> wechat.Buffer_t
	6,   // 4: wechat.HybridDecryptResponse.Key:type_name -> wechat.Buffer_t
	6,   // 5: wechat.HybridEcdhRequest.SecECDHKey:type_name -> wechat.Buffer_t
	6,   // 6: wechat.HybridEcdhResponse.SecECDHKey:type_name -> wechat.Buffer_t
	12,  // 7: wechat.ECDHKey.key:type_name -> wechat.SKBuiltinString_
	12,  // 8: wechat.ManualAuthRsaReqData.randomEncryKey:type_name -> wechat.SKBuiltinString_
	11,  // 9: wechat.ManualAuthRsaReqData.cliPubEcdhkey:type_name -> wechat.ECDHKey
	12,  // 10: wechat.WTLoginImgReqInfo.ksid:type_name -> wechat.SKBuiltinString_
	12,  // 11: wechat.BaseAuthReqInfo.wt_login_req_buff:type_name -> wechat.SKBuiltinString_
	14,  // 12: wechat.BaseAuthReqInfo.wt_login_img_req_info:type_name -> wechat.WTLoginImgReqInfo
	15,  // 13: wechat.BaseAuthReqInfo.wx_verify_code_req_info:type_name -> wechat.WxVerifyCodeReqInfo
	12,  // 14: wechat.BaseAuthReqInfo.clidb_encrypt_key:type_name -> wechat.SKBuiltinString_
	12,  // 15: wechat.BaseAuthReqInfo.clidb_encrypt_info:type_name -> wechat.SKBuiltinString_
	0,   // 16: wechat.ManualAuthAesReqData.baseRequest:type_name -> wechat.BaseRequest
	16,  // 17: wechat.ManualAuthAesReqData.baseReqInfo:type_name -> wechat.BaseAuthReqInfo
	12,  // 18: wechat.ManualAuthAesReqData.clientCheckData:type_name -> wechat.SKBuiltinString_
	12,  // 19: wechat.ManualAuthAesReqData.extSpamInfo:type_name -> wechat.SKBuiltinString_
	18,  // 20: wechat.TrustResponseData.SoftData:type_name -> wechat.TrustSoftData
	3,   // 21: wechat.TrustResp.BaseResponse:type_name -> wechat.BaseResponse
	19,  // 22: wechat.TrustResp.TrustResponseData:type_name -> wechat.TrustResponseData
	6,   // 23: wechat.AutoAuthKey.EncryptKey:type_name -> wechat.Buffer_t
	6,   // 24: wechat.AutoAuthKey.Key:type_name -> wechat.Buffer_t
	12,  // 25: wechat.AutoAuthRsaReqData.aes_encrypt_key:type_name -> wechat.SKBuiltinString_
	11,  // 26: wechat.AutoAuthRsaReqData.pubEcdhKey:type_name -> wechat.ECDHKey
	1,   // 27: wechat.AutoAuthAesReqData.base_request:type_name -> wechat.BaseRequestPlus
	16,  // 28: wechat.AutoAuthAesReqData.base_req_info:type_name -> wechat.BaseAuthReqInfo
	12,  // 29: wechat.AutoAuthAesReqData.auto_auth_key:type_name -> wechat.SKBuiltinString_
	12,  // 30: wechat.AutoAuthAesReqData.clientCheckData:type_name -> wechat.SKBuiltinString_
	12,  // 31: wechat.AutoAuthAesReqData.extSpamInfo:type_name -> wechat.SKBuiltinString_
	22,  // 32: wechat.AutoAuthRequest.rsa_req_data:type_name -> wechat.AutoAuthRsaReqData
	23,  // 33: wechat.AutoAuthRequest.aes_req_data:type_name -> wechat.AutoAuthAesReqData
	6,   // 34: wechat.WCExtInfoNew.Wcstf:type_name -> wechat.Buffer_t
	6,   // 35: wechat.WCExtInfoNew.Wcste:type_name -> wechat.Buffer_t
	6,   // 36: wechat.WCExtInfoNew.CcData:type_name -> wechat.Buffer_t
	6,   // 37: wechat.WCExtInfoNew.UserAttrInfo:type_name -> wechat.Buffer_t
	6,   // 38: wechat.WCExtInfoNew.AcgiDeviceInfo:type_name -> wechat.Buffer_t
	6,   // 39: wechat.WCExtInfoNew.AcgiTuring:type_name -> wechat.Buffer_t
	6,   // 40: wechat.WCExtInfoNew.DeviceToken:type_name -> wechat.Buffer_t
	6,   // 41: wechat.WCExtInfoNew.BehaviorId:type_name -> wechat.Buffer_t
	6,   // 42: wechat.WCExtInfoNew.IosturingHuman:type_name -> wechat.Buffer_t
	6,   // 43: wechat.WCExtInfoNew.IosturingOwner:type_name -> wechat.Buffer_t
	26,  // 44: wechat.SpamDataBody.AppFileInfo:type_name -> wechat.FileInfo
	0,   // 45: wechat.TenPayRequest.baseRequest:type_name -> wechat.BaseRequest
	12,  // 46: wechat.TenPayRequest.reqText:type_name -> wechat.SKBuiltinString_
	12,  // 47: wechat.TenPayRequest.reqTextWx:type_name -> wechat.SKBuiltinString_
	0,   // 48: wechat.UploadAppAttachRequest.BaseRequest:type_name -> wechat.BaseRequest
	34,  // 49: wechat.UploadAppAttachRequest.data:type_name -> wechat.SKBuiltinBuffer_t
	3,   // 50: wechat.UploadAppAttachResponse.BaseResponse:type_name -> wechat.BaseResponse
	0,   // 51: wechat.DownloadVoiceRequest.baseRequest:type_name -> wechat.BaseRequest
	12,  // 52: wechat.DownloadVoiceResponse.data:type_name -> wechat.SKBuiltinString_
	3,   // 53: wechat.DownloadVoiceResponse.baseResponse:type_name -> wechat.BaseResponse
	39,  // 54: wechat.FinderBaseRequest.CtxInfo:type_name -> wechat.ClientContextInfo
	39,  // 55: wechat.FinderBaseRequestPlus.CtxInfo:type_name -> wechat.ClientContextInfo
	41,  // 56: wechat.FinderBaseRequestPlus.Pwd:type_name -> wechat.FinderPwd
	44,  // 57: wechat.FinderTxRequestPlus.G:type_name -> wechat.FinderZd
	43,  // 58: wechat.FinderFollowRequestPlus.FinderReq:type_name -> wechat.FinderTxRequestPlus
	0,   // 59: wechat.FinderCommentRequest.BaseRequest:type_name -> wechat.BaseRequest
	40,  // 60: wechat.FinderCommentRequest.FinderBasereq:type_name -> wechat.FinderBaseRequest
	47,  // 61: wechat.FinderMedia.Spec:type_name -> wechat.FinderMediaSpec
	48,  // 62: wechat.FinderObjectDesc.media:type_name -> wechat.FinderMedia
	49,  // 63: wechat.FinderObjectDesc.extra:type_name -> wechat.FinderMediaExtra
	50,  // 64: wechat.FinderObjectDesc.location:type_name -> wechat.FinderLocation
	51,  // 65: wechat.FinderObjectDesc.extReading:type_name -> wechat.FinderExtendedReading
	52,  // 66: wechat.FinderObjectDesc.topic:type_name -> wechat.FinderTopic
	55,  // 67: wechat.FinderContact.authInfo:type_name -> wechat.FinderAuthInfo
	56,  // 68: wechat.FinderContact.extInfo:type_name -> wechat.FinderContactExtInfo
	58,  // 69: wechat.FinderObjDetails.byNumber:type_name -> wechat.ByNumber
	59,  // 70: wechat.FinderObjDetails.tab:type_name -> wechat.ByTabMsg
	53,  // 71: wechat.FinderObject.objectDesc:type_name -> wechat.FinderObjectDesc
	54,  // 72: wechat.FinderObject.commentList:type_name -> wechat.FinderCommentInfo
	57,  // 73: wechat.FinderObject.contact:type_name -> wechat.FinderContact
	61,  // 74: wechat.FinderObject.recommenderList:type_name -> wechat.FinderRecommendInfo
	57,  // 75: wechat.FinderObject.refObjectContact:type_name -> wechat.FinderContact
	60,  // 76: wechat.FinderObject.finderObjDetails:type_name -> wechat.FinderObjDetails
	3,   // 77: wechat.FinderCommentResponse.BaseResponse:type_name -> wechat.BaseResponse
	62,  // 78: wechat.FinderCommentResponse.Object:type_name -> wechat.FinderObject
	54,  // 79: wechat.FinderCommentResponse.ExposedComment:type_name -> wechat.FinderCommentInfo
	0,   // 80: wechat.FinderFollowRequest.BaseRequest:type_name -> wechat.BaseRequest
	40,  // 81: wechat.FinderFollowRequest.FinderBasereq:type_name -> wechat.FinderBaseRequest
	3,   // 82: wechat.FinderFollowResponse.BaseResponse:type_name -> wechat.BaseResponse
	0,   // 83: wechat.FinderGetCommentDetailRequest.BaseRequest:type_name -> wechat.BaseRequest
	40,  // 84: wechat.FinderGetCommentDetailRequest.FinderBasereq:type_name -> wechat.FinderBaseRequest
	3,   // 85: wechat.FinderGetCommentDetailResponse.BaseResponse:type_name -> wechat.BaseResponse
	54,  // 86: wechat.FinderGetCommentDetailResponse.CommentInfo:type_name -> wechat.FinderCommentInfo
	62,  // 87: wechat.FinderGetCommentDetailResponse.Object:type_name -> wechat.FinderObject
	0,   // 88: wechat.FinderLikeRequest.BaseRequest:type_name -> wechat.BaseRequest
	40,  // 89: wechat.FinderLikeRequest.FinderBasereq:type_name -> wechat.FinderBaseRequest
	3,   // 90: wechat.FinderLikeResponse.BaseResponse:type_name -> wechat.BaseResponse
	0,   // 91: wechat.FinderSearchRequest.BaseRequest:type_name -> wechat.BaseRequest
	40,  // 92: wechat.FinderSearchRequest.FinderBasereq:type_name -> wechat.FinderBaseRequest
	0,   // 93: wechat.FinderJoinLiveReq.BaseRequest:type_name -> wechat.BaseRequest
	42,  // 94: wechat.FinderJoinLiveReq.FinderBasereq:type_name -> wechat.FinderBaseRequestPlus
	57,  // 95: wechat.FinderSearchInfo.Contact:type_name -> wechat.FinderContact
	3,   // 96: wechat.FinderSearchResponse.BaseResponse:type_name -> wechat.BaseResponse
	72,  // 97: wechat.FinderSearchResponse.InfoList:type_name -> wechat.FinderSearchInfo
	62,  // 98: wechat.FinderSearchResponse.ObjectList:type_name -> wechat.FinderObject
	52,  // 99: wechat.FinderSearchResponse.TopicInfoList:type_name -> wechat.FinderTopic
	0,   // 100: wechat.FinderUserPageRequest.baseRequest:type_name -> wechat.BaseRequest
	40,  // 101: wechat.FinderUserPageRequest.finderBasereq:type_name -> wechat.FinderBaseRequest
	55,  // 102: wechat.FinderUserInfo.authInfo:type_name -> wechat.FinderAuthInfo
	3,   // 103: wechat.FinderUserPageResponse.baseResponse:type_name -> wechat.BaseResponse
	62,  // 104: wechat.FinderUserPageResponse.object:type_name -> wechat.FinderObject
	76,  // 105: wechat.FinderUserPageResponse.finderUserInfo:type_name -> wechat.FinderUserInfo
	57,  // 106: wechat.FinderUserPageResponse.contact:type_name -> wechat.FinderContact
	75,  // 107: wechat.FinderUserPageResponse.verifyInfo:type_name -> wechat.FinderNicknameVerifyInfo
	77,  // 108: wechat.FinderUserPageResponse.listTab:type_name -> wechat.ListTab
	0,   // 109: wechat.FinderStreamRequest.request:type_name -> wechat.BaseRequest
	40,  // 110: wechat.FinderStreamRequest.finderBaseRequest:type_name -> wechat.FinderBaseRequest
	79,  // 111: wechat.FinderStreamRequest.markUnreadObjectList:type_name -> wechat.MarkUnreadObjectList
	81,  // 112: wechat.BaseRsp.ret:type_name -> wechat.ByBing
	82,  // 113: wechat.FinderStreamResponse.baseRsp:type_name -> wechat.BaseRsp
	62,  // 114: wechat.FinderStreamResponse.finderObject:type_name -> wechat.FinderObject
	0,   // 115: wechat.FinderSearchGetHotWordListRequest.baseRequest:type_name -> wechat.BaseRequest
	40,  // 116: wechat.FinderSearchGetHotWordListRequest.finderBaseRequest:type_name -> wechat.FinderBaseRequest
	86,  // 117: wechat.FinderSearchGetHotWordList.data:type_name -> wechat.FinderSearchIdList
	85,  // 118: wechat.FinderSearchGetHotWordListResponse.baseResponse:type_name -> wechat.Resp
	87,  // 119: wechat.FinderSearchGetHotWordListResponse.finderSearchGetHotWordList:type_name -> wechat.FinderSearchGetHotWordList
	0,   // 120: wechat.FinderGetTopicListRequest.BaseRequest:type_name -> wechat.BaseRequest
	40,  // 121: wechat.FinderGetTopicListRequest.finderBaseRequest:type_name -> wechat.FinderBaseRequest
	62,  // 122: wechat.FinderGetTopicListResponse.finderObject:type_name -> wechat.FinderObject
	40,  // 123: wechat.FinderGetMsgSessionIdRequest.finderBaseRequest:type_name -> wechat.FinderBaseRequest
	92,  // 124: wechat.FinderGetMsgSessionIdResponse.resp:type_name -> wechat.RespV
	93,  // 125: wechat.FinderGetMsgSessionIdResponse.finderMsgSessionInfo:type_name -> wechat.FinderMsgSessionInfo
	95,  // 126: wechat.BypMsgPack.sk:type_name -> wechat.SKBuiltinString_ts
	96,  // 127: wechat.BypMsgPack.skImg:type_name -> wechat.BypMsgImgPack
	97,  // 128: wechat.BypMsgPack.skVideo:type_name -> wechat.BypMsgVideoPack
	0,   // 129: wechat.BypSendRequest.baseRequest:type_name -> wechat.BaseRequest
	98,  // 130: wechat.BypSendRequest.bypMsgPack:type_name -> wechat.BypMsgPack
	101, // 131: wechat.FinderJoinLiveResp.T1:type_name -> wechat.FinderJoinLiveRespInfo
	132, // [132:132] is the sub-list for method output_type
	132, // [132:132] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_wechat_proto_init() }
func file_wechat_proto_init() {
	if File_wechat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wechat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRequestPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinStringT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MMBizJsApiGetUserOpenIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MMBizJsApiGetUserOpenIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EcdhPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEcdhRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEcdhResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECDHKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinString_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualAuthRsaReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WTLoginImgReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WxVerifyCodeReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseAuthReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualAuthAesReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustSoftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthRsaReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthAesReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WCExtInfoNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpamDataBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewClientCheckData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRunningInfoNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WCSTF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WCSTE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenPayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinBufferT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAppAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadAppAttachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadVoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadVoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientContextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderPwd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderBaseRequestPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTxRequestPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderZd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFollowRequestPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMediaExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderExtendedReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjectDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderAuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContactExtInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByTabMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObjDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderRecommendInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFollowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderFollowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetCommentDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetCommentDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLikeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderLikeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderNicknameVerifyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderUserPageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkUnreadObjectList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ByBing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchGetHotWordListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchGetHotWordList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderSearchGetHotWordListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetTopicListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetTopicListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetMsgSessionIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderMsgSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderGetMsgSessionIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SKBuiltinStringTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgImgPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgVideoPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypMsgPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BypSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveRespInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wechat_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinderJoinLiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wechat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   103,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wechat_proto_goTypes,
		DependencyIndexes: file_wechat_proto_depIdxs,
		MessageInfos:      file_wechat_proto_msgTypes,
	}.Build()
	File_wechat_proto = out.File
	file_wechat_proto_rawDesc = nil
	file_wechat_proto_goTypes = nil
	file_wechat_proto_depIdxs = nil
}
